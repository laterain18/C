
equicycle_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a61c  08000298  08000298  00001298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800a8b4  0800a8b4  0000b8b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a8f4  0800a8f4  0000b8f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a8fc  0800a8fc  0000b8fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a900  0800a900  0000b900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000014  24000000  0800a904  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003a8  24000014  0800a918  0000c014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240003bc  0800a918  0000c3bc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c014  2**0
                  CONTENTS, READONLY
 10 .debug_info   000170fb  00000000  00000000  0000c042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002a6f  00000000  00000000  0002313d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001158  00000000  00000000  00025bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d95  00000000  00000000  00026d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000034b6  00000000  00000000  00027a9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00018f1a  00000000  00000000  0002af53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00162c87  00000000  00000000  00043e6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a6af4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004938  00000000  00000000  001a6b38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005b  00000000  00000000  001ab470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000014 	.word	0x24000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800a89c 	.word	0x0800a89c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000018 	.word	0x24000018
 80002d4:	0800a89c 	.word	0x0800a89c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <float_to_bytes>:
// 尾帧的定义
static unsigned char tail[4] = {0x00, 0x00, 0x80, 0x7f};

// 将浮点数转换为小端字节流，并存储到指定的数组中
static void float_to_bytes(float value, unsigned char *bytes)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80005d2:	6038      	str	r0, [r7, #0]
    unsigned char *p = (unsigned char *)&value;
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < 4; i++)
 80005d8:	2300      	movs	r3, #0
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	e00a      	b.n	80005f4 <float_to_bytes+0x2c>
    {
        bytes[i] = p[i];
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	68ba      	ldr	r2, [r7, #8]
 80005e2:	441a      	add	r2, r3
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	6839      	ldr	r1, [r7, #0]
 80005e8:	440b      	add	r3, r1
 80005ea:	7812      	ldrb	r2, [r2, #0]
 80005ec:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; i++)
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	3301      	adds	r3, #1
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	2b03      	cmp	r3, #3
 80005f8:	ddf1      	ble.n	80005de <float_to_bytes+0x16>
    }
}
 80005fa:	bf00      	nop
 80005fc:	bf00      	nop
 80005fe:	3714      	adds	r7, #20
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <create_byte_stream>:

// 将多个浮点数转换为字节流并添加尾帧
static void create_byte_stream(const float *values, int num_values, unsigned char *byte_stream)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0
 800060e:	60f8      	str	r0, [r7, #12]
 8000610:	60b9      	str	r1, [r7, #8]
 8000612:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < num_values; i++)
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
 8000618:	e012      	b.n	8000640 <create_byte_stream+0x38>
    {
        float_to_bytes(values[i], &byte_stream[i * 4]);
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	68fa      	ldr	r2, [r7, #12]
 8000620:	4413      	add	r3, r2
 8000622:	edd3 7a00 	vldr	s15, [r3]
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	461a      	mov	r2, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4413      	add	r3, r2
 8000630:	4618      	mov	r0, r3
 8000632:	eeb0 0a67 	vmov.f32	s0, s15
 8000636:	f7ff ffc7 	bl	80005c8 <float_to_bytes>
    for (int i = 0; i < num_values; i++)
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	3301      	adds	r3, #1
 800063e:	617b      	str	r3, [r7, #20]
 8000640:	697a      	ldr	r2, [r7, #20]
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	429a      	cmp	r2, r3
 8000646:	dbe8      	blt.n	800061a <create_byte_stream+0x12>
    }
    // 添加尾帧
    memcpy(&byte_stream[num_values * 4], tail, 4);
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	461a      	mov	r2, r3
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4413      	add	r3, r2
 8000652:	4a03      	ldr	r2, [pc, #12]	@ (8000660 <create_byte_stream+0x58>)
 8000654:	6812      	ldr	r2, [r2, #0]
 8000656:	601a      	str	r2, [r3, #0]
}
 8000658:	bf00      	nop
 800065a:	3718      	adds	r7, #24
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	24000000 	.word	0x24000000

08000664 <vofa_three>:
//    printf("\n");
}

// 三个浮点数的例子
void vofa_three(float A, float B, float C)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08c      	sub	sp, #48	@ 0x30
 8000668:	af00      	add	r7, sp, #0
 800066a:	ed87 0a03 	vstr	s0, [r7, #12]
 800066e:	edc7 0a02 	vstr	s1, [r7, #8]
 8000672:	ed87 1a01 	vstr	s2, [r7, #4]
    float values[3] = {A, B, C};
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	627b      	str	r3, [r7, #36]	@ 0x24
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	62fb      	str	r3, [r7, #44]	@ 0x2c
    unsigned char byte_stream[16]; // 12 bytes for floats + 4 bytes for tail
    create_byte_stream(values, 3, byte_stream);
 8000682:	f107 0214 	add.w	r2, r7, #20
 8000686:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800068a:	2103      	movs	r1, #3
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ffbb 	bl	8000608 <create_byte_stream>
    // 这里可以添加处理字节流的代码，例如发送或保存
    HAL_UART_Transmit(&huart1, byte_stream, 16,10);
 8000692:	f107 0114 	add.w	r1, r7, #20
 8000696:	230a      	movs	r3, #10
 8000698:	2210      	movs	r2, #16
 800069a:	4803      	ldr	r0, [pc, #12]	@ (80006a8 <vofa_three+0x44>)
 800069c:	f008 f8b0 	bl	8008800 <HAL_UART_Transmit>
//    for (int i = 0; i < 16; i++)
//    {
//        printf("%02x ", byte_stream[i]);
//    }
//    printf("\n");
}
 80006a0:	bf00      	nop
 80006a2:	3730      	adds	r7, #48	@ 0x30
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	240000bc 	.word	0x240000bc

080006ac <calculateChecksum>:

// 全局变量定义
IMUData imuData;

// 计算校验和函数
unsigned char calculateChecksum(unsigned char data[]) {
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
    unsigned char checksum = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 10; i++) {
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	e009      	b.n	80006d2 <calculateChecksum+0x26>
        checksum += data[i];
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	687a      	ldr	r2, [r7, #4]
 80006c2:	4413      	add	r3, r2
 80006c4:	781a      	ldrb	r2, [r3, #0]
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	4413      	add	r3, r2
 80006ca:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 10; i++) {
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	3301      	adds	r3, #1
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	2b09      	cmp	r3, #9
 80006d6:	ddf2      	ble.n	80006be <calculateChecksum+0x12>
    }
    return checksum;
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3714      	adds	r7, #20
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
	...

080006e8 <parseGyroData>:
    accelData->temperature = (float)temp_raw / 100.0;
    return 1;
}

// 解析角速度数据函数
int parseGyroData(unsigned char data[], GyroData *gyroData) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	6039      	str	r1, [r7, #0]
    if (calculateChecksum(data) != data[10]) {
 80006f2:	6878      	ldr	r0, [r7, #4]
 80006f4:	f7ff ffda 	bl	80006ac <calculateChecksum>
 80006f8:	4603      	mov	r3, r0
 80006fa:	461a      	mov	r2, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	330a      	adds	r3, #10
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	429a      	cmp	r2, r3
 8000704:	d001      	beq.n	800070a <parseGyroData+0x22>
        return 0;
 8000706:	2300      	movs	r3, #0
 8000708:	e064      	b.n	80007d4 <parseGyroData+0xec>
    }
    short gyroX_raw = (data[3] << 8) | data[2];
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	3303      	adds	r3, #3
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	021b      	lsls	r3, r3, #8
 8000712:	b21a      	sxth	r2, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	3302      	adds	r3, #2
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	b21b      	sxth	r3, r3
 800071c:	4313      	orrs	r3, r2
 800071e:	81fb      	strh	r3, [r7, #14]
    gyroData->gyroX = (float)gyroX_raw / 32768.0 * 2000.0;
 8000720:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000724:	ee07 3a90 	vmov	s15, r3
 8000728:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800072c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000730:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 80007e0 <parseGyroData+0xf8>
 8000734:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000738:	ed9f 6b2b 	vldr	d6, [pc, #172]	@ 80007e8 <parseGyroData+0x100>
 800073c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000740:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	edc3 7a00 	vstr	s15, [r3]
    short gyroY_raw = (data[5] << 8) | data[4];
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	3305      	adds	r3, #5
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	021b      	lsls	r3, r3, #8
 8000752:	b21a      	sxth	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3304      	adds	r3, #4
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	b21b      	sxth	r3, r3
 800075c:	4313      	orrs	r3, r2
 800075e:	81bb      	strh	r3, [r7, #12]
    gyroData->gyroY = (float)gyroY_raw / 32768.0 * 2000.0;
 8000760:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000764:	ee07 3a90 	vmov	s15, r3
 8000768:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800076c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000770:	ed9f 5b1b 	vldr	d5, [pc, #108]	@ 80007e0 <parseGyroData+0xf8>
 8000774:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000778:	ed9f 6b1b 	vldr	d6, [pc, #108]	@ 80007e8 <parseGyroData+0x100>
 800077c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000780:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	edc3 7a01 	vstr	s15, [r3, #4]
    short gyroZ_raw = (data[7] << 8) | data[6];
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	3307      	adds	r3, #7
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	021b      	lsls	r3, r3, #8
 8000792:	b21a      	sxth	r2, r3
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	3306      	adds	r3, #6
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	b21b      	sxth	r3, r3
 800079c:	4313      	orrs	r3, r2
 800079e:	817b      	strh	r3, [r7, #10]
    gyroData->gyroZ = (float)gyroZ_raw / 32768.0 * 2000.0;
 80007a0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80007a4:	ee07 3a90 	vmov	s15, r3
 80007a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007ac:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80007b0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007e0 <parseGyroData+0xf8>
 80007b4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80007b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007e8 <parseGyroData+0x100>
 80007bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80007c0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	edc3 7a02 	vstr	s15, [r3, #8]
    gyroData->voltage = 0.0;
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	f04f 0200 	mov.w	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
    return 1;
 80007d2:	2301      	movs	r3, #1
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	f3af 8000 	nop.w
 80007e0:	00000000 	.word	0x00000000
 80007e4:	40e00000 	.word	0x40e00000
 80007e8:	00000000 	.word	0x00000000
 80007ec:	409f4000 	.word	0x409f4000

080007f0 <parseAngleData>:

// 解析角度数据函数
int parseAngleData(unsigned char data[], AngleData *angleData) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	6039      	str	r1, [r7, #0]
    if (calculateChecksum(data) != data[10]) {
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f7ff ff56 	bl	80006ac <calculateChecksum>
 8000800:	4603      	mov	r3, r0
 8000802:	461a      	mov	r2, r3
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	330a      	adds	r3, #10
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	429a      	cmp	r2, r3
 800080c:	d001      	beq.n	8000812 <parseAngleData+0x22>
        return 0;
 800080e:	2300      	movs	r3, #0
 8000810:	e06a      	b.n	80008e8 <parseAngleData+0xf8>
    }
    short roll_raw = (data[3] << 8) | data[2];
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	3303      	adds	r3, #3
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	021b      	lsls	r3, r3, #8
 800081a:	b21a      	sxth	r2, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	3302      	adds	r3, #2
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	b21b      	sxth	r3, r3
 8000824:	4313      	orrs	r3, r2
 8000826:	81fb      	strh	r3, [r7, #14]
    angleData->roll = (float)roll_raw / 32768.0 * 180.0;
 8000828:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800082c:	ee07 3a90 	vmov	s15, r3
 8000830:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000834:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000838:	ed9f 5b2d 	vldr	d5, [pc, #180]	@ 80008f0 <parseAngleData+0x100>
 800083c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000840:	ed9f 6b2d 	vldr	d6, [pc, #180]	@ 80008f8 <parseAngleData+0x108>
 8000844:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000848:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	edc3 7a00 	vstr	s15, [r3]
    short pitch_raw = (data[5] << 8) | data[4];
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	3305      	adds	r3, #5
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	021b      	lsls	r3, r3, #8
 800085a:	b21a      	sxth	r2, r3
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	3304      	adds	r3, #4
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	b21b      	sxth	r3, r3
 8000864:	4313      	orrs	r3, r2
 8000866:	81bb      	strh	r3, [r7, #12]
    angleData->pitch = (float)pitch_raw / 32768.0 * 180.0;
 8000868:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800086c:	ee07 3a90 	vmov	s15, r3
 8000870:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000874:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000878:	ed9f 5b1d 	vldr	d5, [pc, #116]	@ 80008f0 <parseAngleData+0x100>
 800087c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000880:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 80008f8 <parseAngleData+0x108>
 8000884:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000888:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	edc3 7a01 	vstr	s15, [r3, #4]
    short yaw_raw = (data[7] << 8) | data[6];
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	3307      	adds	r3, #7
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	021b      	lsls	r3, r3, #8
 800089a:	b21a      	sxth	r2, r3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	3306      	adds	r3, #6
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	b21b      	sxth	r3, r3
 80008a4:	4313      	orrs	r3, r2
 80008a6:	817b      	strh	r3, [r7, #10]
    angleData->yaw = (float)yaw_raw / 32768.0 * 180.0;
 80008a8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80008ac:	ee07 3a90 	vmov	s15, r3
 80008b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008b4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80008b8:	ed9f 5b0d 	vldr	d5, [pc, #52]	@ 80008f0 <parseAngleData+0x100>
 80008bc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008c0:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 80008f8 <parseAngleData+0x108>
 80008c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008c8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	edc3 7a02 	vstr	s15, [r3, #8]
    angleData->version = (data[9] << 8) | data[8];
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	3309      	adds	r3, #9
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	021b      	lsls	r3, r3, #8
 80008da:	687a      	ldr	r2, [r7, #4]
 80008dc:	3208      	adds	r2, #8
 80008de:	7812      	ldrb	r2, [r2, #0]
 80008e0:	431a      	orrs	r2, r3
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	60da      	str	r2, [r3, #12]
    return 1;
 80008e6:	2301      	movs	r3, #1
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	00000000 	.word	0x00000000
 80008f4:	40e00000 	.word	0x40e00000
 80008f8:	00000000 	.word	0x00000000
 80008fc:	40668000 	.word	0x40668000

08000900 <parseIMUData>:
    return 1;
}

// 解析IMU数据函数
//可以选择性的开启需要解析的数据以增加程序的性能，这里我暂且只开启动角度
int parseIMUData(unsigned char data[], IMUData *imuData) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	6039      	str	r1, [r7, #0]
    //if (!parseAccelData(data, &imuData->accel)) return 0;
    if (!parseGyroData(data + 11, &imuData->gyro)) return 0;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	f103 020b 	add.w	r2, r3, #11
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	3310      	adds	r3, #16
 8000914:	4619      	mov	r1, r3
 8000916:	4610      	mov	r0, r2
 8000918:	f7ff fee6 	bl	80006e8 <parseGyroData>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d101      	bne.n	8000926 <parseIMUData+0x26>
 8000922:	2300      	movs	r3, #0
 8000924:	e00e      	b.n	8000944 <parseIMUData+0x44>
    if (!parseAngleData(data + 22, &imuData->angle)) return 0;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	f103 0216 	add.w	r2, r3, #22
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	3320      	adds	r3, #32
 8000930:	4619      	mov	r1, r3
 8000932:	4610      	mov	r0, r2
 8000934:	f7ff ff5c 	bl	80007f0 <parseAngleData>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d101      	bne.n	8000942 <parseIMUData+0x42>
 800093e:	2300      	movs	r3, #0
 8000940:	e000      	b.n	8000944 <parseIMUData+0x44>
    //if (!parseMagData(data + 33, &imuData->mag)) return 0;
    return 1;
 8000942:	2301      	movs	r3, #1
}
 8000944:	4618      	mov	r0, r3
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <HAL_UARTEx_RxEventCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	460b      	mov	r3, r1
 8000956:	807b      	strh	r3, [r7, #2]
  if (huart == &huart2)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a41      	ldr	r2, [pc, #260]	@ (8000a60 <HAL_UARTEx_RxEventCallback+0x114>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d17a      	bne.n	8000a56 <HAL_UARTEx_RxEventCallback+0x10a>
  {

    parseIMUData(WITIMU_DATA, &imuData);
 8000960:	4940      	ldr	r1, [pc, #256]	@ (8000a64 <HAL_UARTEx_RxEventCallback+0x118>)
 8000962:	4841      	ldr	r0, [pc, #260]	@ (8000a68 <HAL_UARTEx_RxEventCallback+0x11c>)
 8000964:	f7ff ffcc 	bl	8000900 <parseIMUData>
    // ANO_Conver_16_16_16((int16_t)(imuData.angle.pitch * 100), (int16_t)(imuData.angle.roll * 100), (int16_t)(imuData.angle.yaw * 100));

    vofa_three(imuData.angle.roll, imuData.angle.pitch, imuData.gyro.gyroY);
 8000968:	4b3e      	ldr	r3, [pc, #248]	@ (8000a64 <HAL_UARTEx_RxEventCallback+0x118>)
 800096a:	edd3 7a08 	vldr	s15, [r3, #32]
 800096e:	4b3d      	ldr	r3, [pc, #244]	@ (8000a64 <HAL_UARTEx_RxEventCallback+0x118>)
 8000970:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8000974:	4b3b      	ldr	r3, [pc, #236]	@ (8000a64 <HAL_UARTEx_RxEventCallback+0x118>)
 8000976:	edd3 6a05 	vldr	s13, [r3, #20]
 800097a:	eeb0 1a66 	vmov.f32	s2, s13
 800097e:	eef0 0a47 	vmov.f32	s1, s14
 8000982:	eeb0 0a67 	vmov.f32	s0, s15
 8000986:	f7ff fe6d 	bl	8000664 <vofa_three>
    //    	send_combined_data(ch,tail,sizeof(ch), sizeof(tail));

    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, WITIMU_DATA, sizeof(WITIMU_DATA));
 800098a:	2232      	movs	r2, #50	@ 0x32
 800098c:	4936      	ldr	r1, [pc, #216]	@ (8000a68 <HAL_UARTEx_RxEventCallback+0x11c>)
 800098e:	4834      	ldr	r0, [pc, #208]	@ (8000a60 <HAL_UARTEx_RxEventCallback+0x114>)
 8000990:	f009 fe13 	bl	800a5ba <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000994:	4b35      	ldr	r3, [pc, #212]	@ (8000a6c <HAL_UARTEx_RxEventCallback+0x120>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a35      	ldr	r2, [pc, #212]	@ (8000a70 <HAL_UARTEx_RxEventCallback+0x124>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d04a      	beq.n	8000a34 <HAL_UARTEx_RxEventCallback+0xe8>
 800099e:	4b33      	ldr	r3, [pc, #204]	@ (8000a6c <HAL_UARTEx_RxEventCallback+0x120>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a34      	ldr	r2, [pc, #208]	@ (8000a74 <HAL_UARTEx_RxEventCallback+0x128>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d045      	beq.n	8000a34 <HAL_UARTEx_RxEventCallback+0xe8>
 80009a8:	4b30      	ldr	r3, [pc, #192]	@ (8000a6c <HAL_UARTEx_RxEventCallback+0x120>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a32      	ldr	r2, [pc, #200]	@ (8000a78 <HAL_UARTEx_RxEventCallback+0x12c>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d040      	beq.n	8000a34 <HAL_UARTEx_RxEventCallback+0xe8>
 80009b2:	4b2e      	ldr	r3, [pc, #184]	@ (8000a6c <HAL_UARTEx_RxEventCallback+0x120>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a31      	ldr	r2, [pc, #196]	@ (8000a7c <HAL_UARTEx_RxEventCallback+0x130>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d03b      	beq.n	8000a34 <HAL_UARTEx_RxEventCallback+0xe8>
 80009bc:	4b2b      	ldr	r3, [pc, #172]	@ (8000a6c <HAL_UARTEx_RxEventCallback+0x120>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a2f      	ldr	r2, [pc, #188]	@ (8000a80 <HAL_UARTEx_RxEventCallback+0x134>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d036      	beq.n	8000a34 <HAL_UARTEx_RxEventCallback+0xe8>
 80009c6:	4b29      	ldr	r3, [pc, #164]	@ (8000a6c <HAL_UARTEx_RxEventCallback+0x120>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a2e      	ldr	r2, [pc, #184]	@ (8000a84 <HAL_UARTEx_RxEventCallback+0x138>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d031      	beq.n	8000a34 <HAL_UARTEx_RxEventCallback+0xe8>
 80009d0:	4b26      	ldr	r3, [pc, #152]	@ (8000a6c <HAL_UARTEx_RxEventCallback+0x120>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a2c      	ldr	r2, [pc, #176]	@ (8000a88 <HAL_UARTEx_RxEventCallback+0x13c>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d02c      	beq.n	8000a34 <HAL_UARTEx_RxEventCallback+0xe8>
 80009da:	4b24      	ldr	r3, [pc, #144]	@ (8000a6c <HAL_UARTEx_RxEventCallback+0x120>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a2b      	ldr	r2, [pc, #172]	@ (8000a8c <HAL_UARTEx_RxEventCallback+0x140>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d027      	beq.n	8000a34 <HAL_UARTEx_RxEventCallback+0xe8>
 80009e4:	4b21      	ldr	r3, [pc, #132]	@ (8000a6c <HAL_UARTEx_RxEventCallback+0x120>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a29      	ldr	r2, [pc, #164]	@ (8000a90 <HAL_UARTEx_RxEventCallback+0x144>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d022      	beq.n	8000a34 <HAL_UARTEx_RxEventCallback+0xe8>
 80009ee:	4b1f      	ldr	r3, [pc, #124]	@ (8000a6c <HAL_UARTEx_RxEventCallback+0x120>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a28      	ldr	r2, [pc, #160]	@ (8000a94 <HAL_UARTEx_RxEventCallback+0x148>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d01d      	beq.n	8000a34 <HAL_UARTEx_RxEventCallback+0xe8>
 80009f8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a6c <HAL_UARTEx_RxEventCallback+0x120>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a26      	ldr	r2, [pc, #152]	@ (8000a98 <HAL_UARTEx_RxEventCallback+0x14c>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d018      	beq.n	8000a34 <HAL_UARTEx_RxEventCallback+0xe8>
 8000a02:	4b1a      	ldr	r3, [pc, #104]	@ (8000a6c <HAL_UARTEx_RxEventCallback+0x120>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a25      	ldr	r2, [pc, #148]	@ (8000a9c <HAL_UARTEx_RxEventCallback+0x150>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d013      	beq.n	8000a34 <HAL_UARTEx_RxEventCallback+0xe8>
 8000a0c:	4b17      	ldr	r3, [pc, #92]	@ (8000a6c <HAL_UARTEx_RxEventCallback+0x120>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a23      	ldr	r2, [pc, #140]	@ (8000aa0 <HAL_UARTEx_RxEventCallback+0x154>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d00e      	beq.n	8000a34 <HAL_UARTEx_RxEventCallback+0xe8>
 8000a16:	4b15      	ldr	r3, [pc, #84]	@ (8000a6c <HAL_UARTEx_RxEventCallback+0x120>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a22      	ldr	r2, [pc, #136]	@ (8000aa4 <HAL_UARTEx_RxEventCallback+0x158>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d009      	beq.n	8000a34 <HAL_UARTEx_RxEventCallback+0xe8>
 8000a20:	4b12      	ldr	r3, [pc, #72]	@ (8000a6c <HAL_UARTEx_RxEventCallback+0x120>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a20      	ldr	r2, [pc, #128]	@ (8000aa8 <HAL_UARTEx_RxEventCallback+0x15c>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d004      	beq.n	8000a34 <HAL_UARTEx_RxEventCallback+0xe8>
 8000a2a:	4b10      	ldr	r3, [pc, #64]	@ (8000a6c <HAL_UARTEx_RxEventCallback+0x120>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a1f      	ldr	r2, [pc, #124]	@ (8000aac <HAL_UARTEx_RxEventCallback+0x160>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d108      	bne.n	8000a46 <HAL_UARTEx_RxEventCallback+0xfa>
 8000a34:	4b0d      	ldr	r3, [pc, #52]	@ (8000a6c <HAL_UARTEx_RxEventCallback+0x120>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <HAL_UARTEx_RxEventCallback+0x120>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f022 0208 	bic.w	r2, r2, #8
 8000a42:	601a      	str	r2, [r3, #0]
  }
}
 8000a44:	e007      	b.n	8000a56 <HAL_UARTEx_RxEventCallback+0x10a>
    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000a46:	4b09      	ldr	r3, [pc, #36]	@ (8000a6c <HAL_UARTEx_RxEventCallback+0x120>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	4b07      	ldr	r3, [pc, #28]	@ (8000a6c <HAL_UARTEx_RxEventCallback+0x120>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f022 0204 	bic.w	r2, r2, #4
 8000a54:	601a      	str	r2, [r3, #0]
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	24000150 	.word	0x24000150
 8000a64:	24000030 	.word	0x24000030
 8000a68:	2400034c 	.word	0x2400034c
 8000a6c:	240002d4 	.word	0x240002d4
 8000a70:	40020010 	.word	0x40020010
 8000a74:	40020028 	.word	0x40020028
 8000a78:	40020040 	.word	0x40020040
 8000a7c:	40020058 	.word	0x40020058
 8000a80:	40020070 	.word	0x40020070
 8000a84:	40020088 	.word	0x40020088
 8000a88:	400200a0 	.word	0x400200a0
 8000a8c:	400200b8 	.word	0x400200b8
 8000a90:	40020410 	.word	0x40020410
 8000a94:	40020428 	.word	0x40020428
 8000a98:	40020440 	.word	0x40020440
 8000a9c:	40020458 	.word	0x40020458
 8000aa0:	40020470 	.word	0x40020470
 8000aa4:	40020488 	.word	0x40020488
 8000aa8:	400204a0 	.word	0x400204a0
 8000aac:	400204b8 	.word	0x400204b8

08000ab0 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, WITIMU_DATA, sizeof(WITIMU_DATA));
 8000ab8:	2232      	movs	r2, #50	@ 0x32
 8000aba:	4904      	ldr	r1, [pc, #16]	@ (8000acc <HAL_UART_ErrorCallback+0x1c>)
 8000abc:	4804      	ldr	r0, [pc, #16]	@ (8000ad0 <HAL_UART_ErrorCallback+0x20>)
 8000abe:	f009 fd7c 	bl	800a5ba <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	2400034c 	.word	0x2400034c
 8000ad0:	24000150 	.word	0x24000150

08000ad4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000ad8:	f000 fade 	bl	8001098 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000adc:	f000 fdf8 	bl	80016d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae0:	f000 f8a2 	bl	8000c28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae4:	f000 fa90 	bl	8001008 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ae8:	f000 fa5e 	bl	8000fa8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000aec:	f000 fa10 	bl	8000f10 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000af0:	f000 f9c2 	bl	8000e78 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000af4:	f000 f914 	bl	8000d20 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, WITIMU_DATA, sizeof(WITIMU_DATA));
 8000af8:	2232      	movs	r2, #50	@ 0x32
 8000afa:	4937      	ldr	r1, [pc, #220]	@ (8000bd8 <main+0x104>)
 8000afc:	4837      	ldr	r0, [pc, #220]	@ (8000bdc <main+0x108>)
 8000afe:	f009 fd5c 	bl	800a5ba <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000b02:	4b37      	ldr	r3, [pc, #220]	@ (8000be0 <main+0x10c>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a37      	ldr	r2, [pc, #220]	@ (8000be4 <main+0x110>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d04a      	beq.n	8000ba2 <main+0xce>
 8000b0c:	4b34      	ldr	r3, [pc, #208]	@ (8000be0 <main+0x10c>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a35      	ldr	r2, [pc, #212]	@ (8000be8 <main+0x114>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d045      	beq.n	8000ba2 <main+0xce>
 8000b16:	4b32      	ldr	r3, [pc, #200]	@ (8000be0 <main+0x10c>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a34      	ldr	r2, [pc, #208]	@ (8000bec <main+0x118>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d040      	beq.n	8000ba2 <main+0xce>
 8000b20:	4b2f      	ldr	r3, [pc, #188]	@ (8000be0 <main+0x10c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a32      	ldr	r2, [pc, #200]	@ (8000bf0 <main+0x11c>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d03b      	beq.n	8000ba2 <main+0xce>
 8000b2a:	4b2d      	ldr	r3, [pc, #180]	@ (8000be0 <main+0x10c>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a31      	ldr	r2, [pc, #196]	@ (8000bf4 <main+0x120>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d036      	beq.n	8000ba2 <main+0xce>
 8000b34:	4b2a      	ldr	r3, [pc, #168]	@ (8000be0 <main+0x10c>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a2f      	ldr	r2, [pc, #188]	@ (8000bf8 <main+0x124>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d031      	beq.n	8000ba2 <main+0xce>
 8000b3e:	4b28      	ldr	r3, [pc, #160]	@ (8000be0 <main+0x10c>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a2e      	ldr	r2, [pc, #184]	@ (8000bfc <main+0x128>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d02c      	beq.n	8000ba2 <main+0xce>
 8000b48:	4b25      	ldr	r3, [pc, #148]	@ (8000be0 <main+0x10c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a2c      	ldr	r2, [pc, #176]	@ (8000c00 <main+0x12c>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d027      	beq.n	8000ba2 <main+0xce>
 8000b52:	4b23      	ldr	r3, [pc, #140]	@ (8000be0 <main+0x10c>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a2b      	ldr	r2, [pc, #172]	@ (8000c04 <main+0x130>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d022      	beq.n	8000ba2 <main+0xce>
 8000b5c:	4b20      	ldr	r3, [pc, #128]	@ (8000be0 <main+0x10c>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a29      	ldr	r2, [pc, #164]	@ (8000c08 <main+0x134>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d01d      	beq.n	8000ba2 <main+0xce>
 8000b66:	4b1e      	ldr	r3, [pc, #120]	@ (8000be0 <main+0x10c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a28      	ldr	r2, [pc, #160]	@ (8000c0c <main+0x138>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d018      	beq.n	8000ba2 <main+0xce>
 8000b70:	4b1b      	ldr	r3, [pc, #108]	@ (8000be0 <main+0x10c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a26      	ldr	r2, [pc, #152]	@ (8000c10 <main+0x13c>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d013      	beq.n	8000ba2 <main+0xce>
 8000b7a:	4b19      	ldr	r3, [pc, #100]	@ (8000be0 <main+0x10c>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a25      	ldr	r2, [pc, #148]	@ (8000c14 <main+0x140>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d00e      	beq.n	8000ba2 <main+0xce>
 8000b84:	4b16      	ldr	r3, [pc, #88]	@ (8000be0 <main+0x10c>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a23      	ldr	r2, [pc, #140]	@ (8000c18 <main+0x144>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d009      	beq.n	8000ba2 <main+0xce>
 8000b8e:	4b14      	ldr	r3, [pc, #80]	@ (8000be0 <main+0x10c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a22      	ldr	r2, [pc, #136]	@ (8000c1c <main+0x148>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d004      	beq.n	8000ba2 <main+0xce>
 8000b98:	4b11      	ldr	r3, [pc, #68]	@ (8000be0 <main+0x10c>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a20      	ldr	r2, [pc, #128]	@ (8000c20 <main+0x14c>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d108      	bne.n	8000bb4 <main+0xe0>
 8000ba2:	4b0f      	ldr	r3, [pc, #60]	@ (8000be0 <main+0x10c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8000be0 <main+0x10c>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f022 0208 	bic.w	r2, r2, #8
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	e007      	b.n	8000bc4 <main+0xf0>
 8000bb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000be0 <main+0x10c>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	4b09      	ldr	r3, [pc, #36]	@ (8000be0 <main+0x10c>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f022 0204 	bic.w	r2, r2, #4
 8000bc2:	601a      	str	r2, [r3, #0]
  //  HAL_TIM_PWM_Init(&htim1);
  //  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  //
  balanceparam_init();
 8000bc4:	f009 fd9c 	bl	800a700 <balanceparam_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    a = Bal_Ang_Control();
 8000bc8:	f009 fdd4 	bl	800a774 <Bal_Ang_Control>
 8000bcc:	eef0 7a40 	vmov.f32	s15, s0
 8000bd0:	4b14      	ldr	r3, [pc, #80]	@ (8000c24 <main+0x150>)
 8000bd2:	edc3 7a00 	vstr	s15, [r3]
 8000bd6:	e7f7      	b.n	8000bc8 <main+0xf4>
 8000bd8:	2400034c 	.word	0x2400034c
 8000bdc:	24000150 	.word	0x24000150
 8000be0:	240002d4 	.word	0x240002d4
 8000be4:	40020010 	.word	0x40020010
 8000be8:	40020028 	.word	0x40020028
 8000bec:	40020040 	.word	0x40020040
 8000bf0:	40020058 	.word	0x40020058
 8000bf4:	40020070 	.word	0x40020070
 8000bf8:	40020088 	.word	0x40020088
 8000bfc:	400200a0 	.word	0x400200a0
 8000c00:	400200b8 	.word	0x400200b8
 8000c04:	40020410 	.word	0x40020410
 8000c08:	40020428 	.word	0x40020428
 8000c0c:	40020440 	.word	0x40020440
 8000c10:	40020458 	.word	0x40020458
 8000c14:	40020470 	.word	0x40020470
 8000c18:	40020488 	.word	0x40020488
 8000c1c:	400204a0 	.word	0x400204a0
 8000c20:	400204b8 	.word	0x400204b8
 8000c24:	24000380 	.word	0x24000380

08000c28 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b09c      	sub	sp, #112	@ 0x70
 8000c2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c32:	224c      	movs	r2, #76	@ 0x4c
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f009 fe04 	bl	800a844 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	2220      	movs	r2, #32
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f009 fdfe 	bl	800a844 <memset>

  /** Supply configuration update enable
   */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c48:	2002      	movs	r0, #2
 8000c4a:	f003 ff53 	bl	8004af4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
   */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c4e:	2300      	movs	r3, #0
 8000c50:	603b      	str	r3, [r7, #0]
 8000c52:	4b31      	ldr	r3, [pc, #196]	@ (8000d18 <SystemClock_Config+0xf0>)
 8000c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c56:	4a30      	ldr	r2, [pc, #192]	@ (8000d18 <SystemClock_Config+0xf0>)
 8000c58:	f023 0301 	bic.w	r3, r3, #1
 8000c5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000c5e:	4b2e      	ldr	r3, [pc, #184]	@ (8000d18 <SystemClock_Config+0xf0>)
 8000c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	4b2c      	ldr	r3, [pc, #176]	@ (8000d1c <SystemClock_Config+0xf4>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	4a2b      	ldr	r2, [pc, #172]	@ (8000d1c <SystemClock_Config+0xf4>)
 8000c6e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c72:	6193      	str	r3, [r2, #24]
 8000c74:	4b29      	ldr	r3, [pc, #164]	@ (8000d1c <SystemClock_Config+0xf4>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c7c:	603b      	str	r3, [r7, #0]
 8000c7e:	683b      	ldr	r3, [r7, #0]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000c80:	bf00      	nop
 8000c82:	4b26      	ldr	r3, [pc, #152]	@ (8000d1c <SystemClock_Config+0xf4>)
 8000c84:	699b      	ldr	r3, [r3, #24]
 8000c86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c8e:	d1f8      	bne.n	8000c82 <SystemClock_Config+0x5a>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c90:	2302      	movs	r3, #2
 8000c92:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000c94:	2301      	movs	r3, #1
 8000c96:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c98:	2340      	movs	r3, #64	@ 0x40
 8000c9a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ca4:	2304      	movs	r3, #4
 8000ca6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000ca8:	2332      	movs	r3, #50	@ 0x32
 8000caa:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cac:	2302      	movs	r3, #2
 8000cae:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000cb8:	230c      	movs	r3, #12
 8000cba:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f003 ff4d 	bl	8004b68 <HAL_RCC_OscConfig>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000cd4:	f000 fa0c 	bl	80010f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
 8000cd8:	233f      	movs	r3, #63	@ 0x3f
 8000cda:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ce4:	2308      	movs	r3, #8
 8000ce6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ce8:	2340      	movs	r3, #64	@ 0x40
 8000cea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000cec:	2340      	movs	r3, #64	@ 0x40
 8000cee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000cf0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cf4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000cf6:	2340      	movs	r3, #64	@ 0x40
 8000cf8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	2102      	movs	r1, #2
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f004 fb8c 	bl	800541c <HAL_RCC_ClockConfig>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000d0a:	f000 f9f1 	bl	80010f0 <Error_Handler>
  }
}
 8000d0e:	bf00      	nop
 8000d10:	3770      	adds	r7, #112	@ 0x70
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	58000400 	.word	0x58000400
 8000d1c:	58024800 	.word	0x58024800

08000d20 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b09a      	sub	sp, #104	@ 0x68
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d26:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d34:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d40:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
 8000d50:	615a      	str	r2, [r3, #20]
 8000d52:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	222c      	movs	r2, #44	@ 0x2c
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f009 fd72 	bl	800a844 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d60:	4b43      	ldr	r3, [pc, #268]	@ (8000e70 <MX_TIM1_Init+0x150>)
 8000d62:	4a44      	ldr	r2, [pc, #272]	@ (8000e74 <MX_TIM1_Init+0x154>)
 8000d64:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200 - 1;
 8000d66:	4b42      	ldr	r3, [pc, #264]	@ (8000e70 <MX_TIM1_Init+0x150>)
 8000d68:	22c7      	movs	r2, #199	@ 0xc7
 8000d6a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6c:	4b40      	ldr	r3, [pc, #256]	@ (8000e70 <MX_TIM1_Init+0x150>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000 - 1;
 8000d72:	4b3f      	ldr	r3, [pc, #252]	@ (8000e70 <MX_TIM1_Init+0x150>)
 8000d74:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000d78:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d7a:	4b3d      	ldr	r3, [pc, #244]	@ (8000e70 <MX_TIM1_Init+0x150>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d80:	4b3b      	ldr	r3, [pc, #236]	@ (8000e70 <MX_TIM1_Init+0x150>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d86:	4b3a      	ldr	r3, [pc, #232]	@ (8000e70 <MX_TIM1_Init+0x150>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d8c:	4838      	ldr	r0, [pc, #224]	@ (8000e70 <MX_TIM1_Init+0x150>)
 8000d8e:	f006 fcfd 	bl	800778c <HAL_TIM_Base_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000d98:	f000 f9aa 	bl	80010f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000da0:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000da2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000da6:	4619      	mov	r1, r3
 8000da8:	4831      	ldr	r0, [pc, #196]	@ (8000e70 <MX_TIM1_Init+0x150>)
 8000daa:	f006 febb 	bl	8007b24 <HAL_TIM_ConfigClockSource>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000db4:	f000 f99c 	bl	80010f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000db8:	482d      	ldr	r0, [pc, #180]	@ (8000e70 <MX_TIM1_Init+0x150>)
 8000dba:	f006 fd3e 	bl	800783a <HAL_TIM_PWM_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000dc4:	f000 f994 	bl	80010f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dd4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4825      	ldr	r0, [pc, #148]	@ (8000e70 <MX_TIM1_Init+0x150>)
 8000ddc:	f007 fbb4 	bl	8008548 <HAL_TIMEx_MasterConfigSynchronization>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000de6:	f000 f983 	bl	80010f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dea:	2360      	movs	r3, #96	@ 0x60
 8000dec:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000df2:	2300      	movs	r3, #0
 8000df4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000df6:	2300      	movs	r3, #0
 8000df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e02:	2300      	movs	r3, #0
 8000e04:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e06:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4818      	ldr	r0, [pc, #96]	@ (8000e70 <MX_TIM1_Init+0x150>)
 8000e10:	f006 fd74 	bl	80078fc <HAL_TIM_PWM_ConfigChannel>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000e1a:	f000 f969 	bl	80010f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e36:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e40:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000e44:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	4619      	mov	r1, r3
 8000e52:	4807      	ldr	r0, [pc, #28]	@ (8000e70 <MX_TIM1_Init+0x150>)
 8000e54:	f007 fc06 	bl	8008664 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000e5e:	f000 f947 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e62:	4803      	ldr	r0, [pc, #12]	@ (8000e70 <MX_TIM1_Init+0x150>)
 8000e64:	f000 f986 	bl	8001174 <HAL_TIM_MspPostInit>
}
 8000e68:	bf00      	nop
 8000e6a:	3768      	adds	r7, #104	@ 0x68
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	24000070 	.word	0x24000070
 8000e74:	40010000 	.word	0x40010000

08000e78 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e7c:	4b22      	ldr	r3, [pc, #136]	@ (8000f08 <MX_USART1_UART_Init+0x90>)
 8000e7e:	4a23      	ldr	r2, [pc, #140]	@ (8000f0c <MX_USART1_UART_Init+0x94>)
 8000e80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8000e82:	4b21      	ldr	r3, [pc, #132]	@ (8000f08 <MX_USART1_UART_Init+0x90>)
 8000e84:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 8000e88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e8a:	4b1f      	ldr	r3, [pc, #124]	@ (8000f08 <MX_USART1_UART_Init+0x90>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e90:	4b1d      	ldr	r3, [pc, #116]	@ (8000f08 <MX_USART1_UART_Init+0x90>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e96:	4b1c      	ldr	r3, [pc, #112]	@ (8000f08 <MX_USART1_UART_Init+0x90>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000f08 <MX_USART1_UART_Init+0x90>)
 8000e9e:	220c      	movs	r2, #12
 8000ea0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ea2:	4b19      	ldr	r3, [pc, #100]	@ (8000f08 <MX_USART1_UART_Init+0x90>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea8:	4b17      	ldr	r3, [pc, #92]	@ (8000f08 <MX_USART1_UART_Init+0x90>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eae:	4b16      	ldr	r3, [pc, #88]	@ (8000f08 <MX_USART1_UART_Init+0x90>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000eb4:	4b14      	ldr	r3, [pc, #80]	@ (8000f08 <MX_USART1_UART_Init+0x90>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eba:	4b13      	ldr	r3, [pc, #76]	@ (8000f08 <MX_USART1_UART_Init+0x90>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ec0:	4811      	ldr	r0, [pc, #68]	@ (8000f08 <MX_USART1_UART_Init+0x90>)
 8000ec2:	f007 fc4d 	bl	8008760 <HAL_UART_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ecc:	f000 f910 	bl	80010f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	480d      	ldr	r0, [pc, #52]	@ (8000f08 <MX_USART1_UART_Init+0x90>)
 8000ed4:	f009 faf5 	bl	800a4c2 <HAL_UARTEx_SetTxFifoThreshold>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000ede:	f000 f907 	bl	80010f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4808      	ldr	r0, [pc, #32]	@ (8000f08 <MX_USART1_UART_Init+0x90>)
 8000ee6:	f009 fb2a 	bl	800a53e <HAL_UARTEx_SetRxFifoThreshold>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ef0:	f000 f8fe 	bl	80010f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ef4:	4804      	ldr	r0, [pc, #16]	@ (8000f08 <MX_USART1_UART_Init+0x90>)
 8000ef6:	f009 faab 	bl	800a450 <HAL_UARTEx_DisableFifoMode>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000f00:	f000 f8f6 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	240000bc 	.word	0x240000bc
 8000f0c:	40011000 	.word	0x40011000

08000f10 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f14:	4b22      	ldr	r3, [pc, #136]	@ (8000fa0 <MX_USART2_UART_Init+0x90>)
 8000f16:	4a23      	ldr	r2, [pc, #140]	@ (8000fa4 <MX_USART2_UART_Init+0x94>)
 8000f18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8000f1a:	4b21      	ldr	r3, [pc, #132]	@ (8000fa0 <MX_USART2_UART_Init+0x90>)
 8000f1c:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8000f20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f22:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa0 <MX_USART2_UART_Init+0x90>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f28:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa0 <MX_USART2_UART_Init+0x90>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa0 <MX_USART2_UART_Init+0x90>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f34:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa0 <MX_USART2_UART_Init+0x90>)
 8000f36:	220c      	movs	r2, #12
 8000f38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f3a:	4b19      	ldr	r3, [pc, #100]	@ (8000fa0 <MX_USART2_UART_Init+0x90>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f40:	4b17      	ldr	r3, [pc, #92]	@ (8000fa0 <MX_USART2_UART_Init+0x90>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f46:	4b16      	ldr	r3, [pc, #88]	@ (8000fa0 <MX_USART2_UART_Init+0x90>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f4c:	4b14      	ldr	r3, [pc, #80]	@ (8000fa0 <MX_USART2_UART_Init+0x90>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f52:	4b13      	ldr	r3, [pc, #76]	@ (8000fa0 <MX_USART2_UART_Init+0x90>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f58:	4811      	ldr	r0, [pc, #68]	@ (8000fa0 <MX_USART2_UART_Init+0x90>)
 8000f5a:	f007 fc01 	bl	8008760 <HAL_UART_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000f64:	f000 f8c4 	bl	80010f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f68:	2100      	movs	r1, #0
 8000f6a:	480d      	ldr	r0, [pc, #52]	@ (8000fa0 <MX_USART2_UART_Init+0x90>)
 8000f6c:	f009 faa9 	bl	800a4c2 <HAL_UARTEx_SetTxFifoThreshold>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000f76:	f000 f8bb 	bl	80010f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4808      	ldr	r0, [pc, #32]	@ (8000fa0 <MX_USART2_UART_Init+0x90>)
 8000f7e:	f009 fade 	bl	800a53e <HAL_UARTEx_SetRxFifoThreshold>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000f88:	f000 f8b2 	bl	80010f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000f8c:	4804      	ldr	r0, [pc, #16]	@ (8000fa0 <MX_USART2_UART_Init+0x90>)
 8000f8e:	f009 fa5f 	bl	800a450 <HAL_UARTEx_DisableFifoMode>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000f98:	f000 f8aa 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	24000150 	.word	0x24000150
 8000fa4:	40004400 	.word	0x40004400

08000fa8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fae:	4b15      	ldr	r3, [pc, #84]	@ (8001004 <MX_DMA_Init+0x5c>)
 8000fb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fb4:	4a13      	ldr	r2, [pc, #76]	@ (8001004 <MX_DMA_Init+0x5c>)
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000fbe:	4b11      	ldr	r3, [pc, #68]	@ (8001004 <MX_DMA_Init+0x5c>)
 8000fc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 2, 0);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2102      	movs	r1, #2
 8000fd0:	200b      	movs	r0, #11
 8000fd2:	f000 fcf6 	bl	80019c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000fd6:	200b      	movs	r0, #11
 8000fd8:	f000 fd0d 	bl	80019f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 2, 0);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2102      	movs	r1, #2
 8000fe0:	200c      	movs	r0, #12
 8000fe2:	f000 fcee 	bl	80019c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000fe6:	200c      	movs	r0, #12
 8000fe8:	f000 fd05 	bl	80019f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 3, 0);
 8000fec:	2200      	movs	r2, #0
 8000fee:	2103      	movs	r1, #3
 8000ff0:	200d      	movs	r0, #13
 8000ff2:	f000 fce6 	bl	80019c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000ff6:	200d      	movs	r0, #13
 8000ff8:	f000 fcfd 	bl	80019f6 <HAL_NVIC_EnableIRQ>
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	58024400 	.word	0x58024400

08001008 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800100e:	4b21      	ldr	r3, [pc, #132]	@ (8001094 <MX_GPIO_Init+0x8c>)
 8001010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001014:	4a1f      	ldr	r2, [pc, #124]	@ (8001094 <MX_GPIO_Init+0x8c>)
 8001016:	f043 0302 	orr.w	r3, r3, #2
 800101a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800101e:	4b1d      	ldr	r3, [pc, #116]	@ (8001094 <MX_GPIO_Init+0x8c>)
 8001020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001024:	f003 0302 	and.w	r3, r3, #2
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800102c:	4b19      	ldr	r3, [pc, #100]	@ (8001094 <MX_GPIO_Init+0x8c>)
 800102e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001032:	4a18      	ldr	r2, [pc, #96]	@ (8001094 <MX_GPIO_Init+0x8c>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800103c:	4b15      	ldr	r3, [pc, #84]	@ (8001094 <MX_GPIO_Init+0x8c>)
 800103e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800104a:	4b12      	ldr	r3, [pc, #72]	@ (8001094 <MX_GPIO_Init+0x8c>)
 800104c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001050:	4a10      	ldr	r2, [pc, #64]	@ (8001094 <MX_GPIO_Init+0x8c>)
 8001052:	f043 0308 	orr.w	r3, r3, #8
 8001056:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800105a:	4b0e      	ldr	r3, [pc, #56]	@ (8001094 <MX_GPIO_Init+0x8c>)
 800105c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001060:	f003 0308 	and.w	r3, r3, #8
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001068:	4b0a      	ldr	r3, [pc, #40]	@ (8001094 <MX_GPIO_Init+0x8c>)
 800106a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800106e:	4a09      	ldr	r2, [pc, #36]	@ (8001094 <MX_GPIO_Init+0x8c>)
 8001070:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001074:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001078:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <MX_GPIO_Init+0x8c>)
 800107a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800107e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001082:	603b      	str	r3, [r7, #0]
 8001084:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001086:	bf00      	nop
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	58024400 	.word	0x58024400

08001098 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800109e:	463b      	mov	r3, r7
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80010aa:	f000 fcbf 	bl	8001a2c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80010ae:	2301      	movs	r3, #1
 80010b0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80010ba:	231f      	movs	r3, #31
 80010bc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80010be:	2387      	movs	r3, #135	@ 0x87
 80010c0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80010c6:	2300      	movs	r3, #0
 80010c8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80010ca:	2301      	movs	r3, #1
 80010cc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80010ce:	2301      	movs	r3, #1
 80010d0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80010d2:	2300      	movs	r3, #0
 80010d4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80010da:	463b      	mov	r3, r7
 80010dc:	4618      	mov	r0, r3
 80010de:	f000 fcdd 	bl	8001a9c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80010e2:	2004      	movs	r0, #4
 80010e4:	f000 fcba 	bl	8001a5c <HAL_MPU_Enable>
}
 80010e8:	bf00      	nop
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010f4:	b672      	cpsid	i
}
 80010f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010f8:	bf00      	nop
 80010fa:	e7fd      	b.n	80010f8 <Error_Handler+0x8>

080010fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001102:	4b0a      	ldr	r3, [pc, #40]	@ (800112c <HAL_MspInit+0x30>)
 8001104:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001108:	4a08      	ldr	r2, [pc, #32]	@ (800112c <HAL_MspInit+0x30>)
 800110a:	f043 0302 	orr.w	r3, r3, #2
 800110e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001112:	4b06      	ldr	r3, [pc, #24]	@ (800112c <HAL_MspInit+0x30>)
 8001114:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001118:	f003 0302 	and.w	r3, r3, #2
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	58024400 	.word	0x58024400

08001130 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a0b      	ldr	r2, [pc, #44]	@ (800116c <HAL_TIM_Base_MspInit+0x3c>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d10e      	bne.n	8001160 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001142:	4b0b      	ldr	r3, [pc, #44]	@ (8001170 <HAL_TIM_Base_MspInit+0x40>)
 8001144:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001148:	4a09      	ldr	r2, [pc, #36]	@ (8001170 <HAL_TIM_Base_MspInit+0x40>)
 800114a:	f043 0301 	orr.w	r3, r3, #1
 800114e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001152:	4b07      	ldr	r3, [pc, #28]	@ (8001170 <HAL_TIM_Base_MspInit+0x40>)
 8001154:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001160:	bf00      	nop
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	40010000 	.word	0x40010000
 8001170:	58024400 	.word	0x58024400

08001174 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b088      	sub	sp, #32
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 030c 	add.w	r3, r7, #12
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a13      	ldr	r2, [pc, #76]	@ (80011e0 <HAL_TIM_MspPostInit+0x6c>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d11f      	bne.n	80011d6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001196:	4b13      	ldr	r3, [pc, #76]	@ (80011e4 <HAL_TIM_MspPostInit+0x70>)
 8001198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800119c:	4a11      	ldr	r2, [pc, #68]	@ (80011e4 <HAL_TIM_MspPostInit+0x70>)
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011a6:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <HAL_TIM_MspPostInit+0x70>)
 80011a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011b8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ba:	2302      	movs	r3, #2
 80011bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80011c6:	2301      	movs	r3, #1
 80011c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ca:	f107 030c 	add.w	r3, r7, #12
 80011ce:	4619      	mov	r1, r3
 80011d0:	4805      	ldr	r0, [pc, #20]	@ (80011e8 <HAL_TIM_MspPostInit+0x74>)
 80011d2:	f003 fadf 	bl	8004794 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80011d6:	bf00      	nop
 80011d8:	3720      	adds	r7, #32
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40010000 	.word	0x40010000
 80011e4:	58024400 	.word	0x58024400
 80011e8:	58020000 	.word	0x58020000

080011ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b0bc      	sub	sp, #240	@ 0xf0
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001204:	f107 0318 	add.w	r3, r7, #24
 8001208:	22c0      	movs	r2, #192	@ 0xc0
 800120a:	2100      	movs	r1, #0
 800120c:	4618      	mov	r0, r3
 800120e:	f009 fb19 	bl	800a844 <memset>
  if(huart->Instance==USART1)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a99      	ldr	r2, [pc, #612]	@ (800147c <HAL_UART_MspInit+0x290>)
 8001218:	4293      	cmp	r3, r2
 800121a:	f040 80aa 	bne.w	8001372 <HAL_UART_MspInit+0x186>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800121e:	f04f 0201 	mov.w	r2, #1
 8001222:	f04f 0300 	mov.w	r3, #0
 8001226:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800122a:	2300      	movs	r3, #0
 800122c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001230:	f107 0318 	add.w	r3, r7, #24
 8001234:	4618      	mov	r0, r3
 8001236:	f004 fc7d 	bl	8005b34 <HAL_RCCEx_PeriphCLKConfig>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001240:	f7ff ff56 	bl	80010f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001244:	4b8e      	ldr	r3, [pc, #568]	@ (8001480 <HAL_UART_MspInit+0x294>)
 8001246:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800124a:	4a8d      	ldr	r2, [pc, #564]	@ (8001480 <HAL_UART_MspInit+0x294>)
 800124c:	f043 0310 	orr.w	r3, r3, #16
 8001250:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001254:	4b8a      	ldr	r3, [pc, #552]	@ (8001480 <HAL_UART_MspInit+0x294>)
 8001256:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800125a:	f003 0310 	and.w	r3, r3, #16
 800125e:	617b      	str	r3, [r7, #20]
 8001260:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001262:	4b87      	ldr	r3, [pc, #540]	@ (8001480 <HAL_UART_MspInit+0x294>)
 8001264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001268:	4a85      	ldr	r2, [pc, #532]	@ (8001480 <HAL_UART_MspInit+0x294>)
 800126a:	f043 0302 	orr.w	r3, r3, #2
 800126e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001272:	4b83      	ldr	r3, [pc, #524]	@ (8001480 <HAL_UART_MspInit+0x294>)
 8001274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	613b      	str	r3, [r7, #16]
 800127e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001280:	23c0      	movs	r3, #192	@ 0xc0
 8001282:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	2302      	movs	r3, #2
 8001288:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001292:	2300      	movs	r3, #0
 8001294:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001298:	2307      	movs	r3, #7
 800129a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80012a2:	4619      	mov	r1, r3
 80012a4:	4877      	ldr	r0, [pc, #476]	@ (8001484 <HAL_UART_MspInit+0x298>)
 80012a6:	f003 fa75 	bl	8004794 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 80012aa:	4b77      	ldr	r3, [pc, #476]	@ (8001488 <HAL_UART_MspInit+0x29c>)
 80012ac:	4a77      	ldr	r2, [pc, #476]	@ (800148c <HAL_UART_MspInit+0x2a0>)
 80012ae:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80012b0:	4b75      	ldr	r3, [pc, #468]	@ (8001488 <HAL_UART_MspInit+0x29c>)
 80012b2:	2229      	movs	r2, #41	@ 0x29
 80012b4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012b6:	4b74      	ldr	r3, [pc, #464]	@ (8001488 <HAL_UART_MspInit+0x29c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012bc:	4b72      	ldr	r3, [pc, #456]	@ (8001488 <HAL_UART_MspInit+0x29c>)
 80012be:	2200      	movs	r2, #0
 80012c0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012c2:	4b71      	ldr	r3, [pc, #452]	@ (8001488 <HAL_UART_MspInit+0x29c>)
 80012c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012c8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012ca:	4b6f      	ldr	r3, [pc, #444]	@ (8001488 <HAL_UART_MspInit+0x29c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012d0:	4b6d      	ldr	r3, [pc, #436]	@ (8001488 <HAL_UART_MspInit+0x29c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80012d6:	4b6c      	ldr	r3, [pc, #432]	@ (8001488 <HAL_UART_MspInit+0x29c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012dc:	4b6a      	ldr	r3, [pc, #424]	@ (8001488 <HAL_UART_MspInit+0x29c>)
 80012de:	2200      	movs	r2, #0
 80012e0:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012e2:	4b69      	ldr	r3, [pc, #420]	@ (8001488 <HAL_UART_MspInit+0x29c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80012e8:	4867      	ldr	r0, [pc, #412]	@ (8001488 <HAL_UART_MspInit+0x29c>)
 80012ea:	f000 fc17 	bl	8001b1c <HAL_DMA_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80012f4:	f7ff fefc 	bl	80010f0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a63      	ldr	r2, [pc, #396]	@ (8001488 <HAL_UART_MspInit+0x29c>)
 80012fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001300:	4a61      	ldr	r2, [pc, #388]	@ (8001488 <HAL_UART_MspInit+0x29c>)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 8001306:	4b62      	ldr	r3, [pc, #392]	@ (8001490 <HAL_UART_MspInit+0x2a4>)
 8001308:	4a62      	ldr	r2, [pc, #392]	@ (8001494 <HAL_UART_MspInit+0x2a8>)
 800130a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800130c:	4b60      	ldr	r3, [pc, #384]	@ (8001490 <HAL_UART_MspInit+0x2a4>)
 800130e:	222a      	movs	r2, #42	@ 0x2a
 8001310:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001312:	4b5f      	ldr	r3, [pc, #380]	@ (8001490 <HAL_UART_MspInit+0x2a4>)
 8001314:	2240      	movs	r2, #64	@ 0x40
 8001316:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001318:	4b5d      	ldr	r3, [pc, #372]	@ (8001490 <HAL_UART_MspInit+0x2a4>)
 800131a:	2200      	movs	r2, #0
 800131c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800131e:	4b5c      	ldr	r3, [pc, #368]	@ (8001490 <HAL_UART_MspInit+0x2a4>)
 8001320:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001324:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001326:	4b5a      	ldr	r3, [pc, #360]	@ (8001490 <HAL_UART_MspInit+0x2a4>)
 8001328:	2200      	movs	r2, #0
 800132a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800132c:	4b58      	ldr	r3, [pc, #352]	@ (8001490 <HAL_UART_MspInit+0x2a4>)
 800132e:	2200      	movs	r2, #0
 8001330:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001332:	4b57      	ldr	r3, [pc, #348]	@ (8001490 <HAL_UART_MspInit+0x2a4>)
 8001334:	2200      	movs	r2, #0
 8001336:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001338:	4b55      	ldr	r3, [pc, #340]	@ (8001490 <HAL_UART_MspInit+0x2a4>)
 800133a:	2200      	movs	r2, #0
 800133c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800133e:	4b54      	ldr	r3, [pc, #336]	@ (8001490 <HAL_UART_MspInit+0x2a4>)
 8001340:	2200      	movs	r2, #0
 8001342:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001344:	4852      	ldr	r0, [pc, #328]	@ (8001490 <HAL_UART_MspInit+0x2a4>)
 8001346:	f000 fbe9 	bl	8001b1c <HAL_DMA_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <HAL_UART_MspInit+0x168>
    {
      Error_Handler();
 8001350:	f7ff fece 	bl	80010f0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a4e      	ldr	r2, [pc, #312]	@ (8001490 <HAL_UART_MspInit+0x2a4>)
 8001358:	67da      	str	r2, [r3, #124]	@ 0x7c
 800135a:	4a4d      	ldr	r2, [pc, #308]	@ (8001490 <HAL_UART_MspInit+0x2a4>)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001360:	2200      	movs	r2, #0
 8001362:	2100      	movs	r1, #0
 8001364:	2025      	movs	r0, #37	@ 0x25
 8001366:	f000 fb2c 	bl	80019c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800136a:	2025      	movs	r0, #37	@ 0x25
 800136c:	f000 fb43 	bl	80019f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001370:	e080      	b.n	8001474 <HAL_UART_MspInit+0x288>
  else if(huart->Instance==USART2)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a48      	ldr	r2, [pc, #288]	@ (8001498 <HAL_UART_MspInit+0x2ac>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d17b      	bne.n	8001474 <HAL_UART_MspInit+0x288>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800137c:	f04f 0202 	mov.w	r2, #2
 8001380:	f04f 0300 	mov.w	r3, #0
 8001384:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001388:	2300      	movs	r3, #0
 800138a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800138e:	f107 0318 	add.w	r3, r7, #24
 8001392:	4618      	mov	r0, r3
 8001394:	f004 fbce 	bl	8005b34 <HAL_RCCEx_PeriphCLKConfig>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <HAL_UART_MspInit+0x1b6>
      Error_Handler();
 800139e:	f7ff fea7 	bl	80010f0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80013a2:	4b37      	ldr	r3, [pc, #220]	@ (8001480 <HAL_UART_MspInit+0x294>)
 80013a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013a8:	4a35      	ldr	r2, [pc, #212]	@ (8001480 <HAL_UART_MspInit+0x294>)
 80013aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013ae:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80013b2:	4b33      	ldr	r3, [pc, #204]	@ (8001480 <HAL_UART_MspInit+0x294>)
 80013b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001480 <HAL_UART_MspInit+0x294>)
 80013c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013c6:	4a2e      	ldr	r2, [pc, #184]	@ (8001480 <HAL_UART_MspInit+0x294>)
 80013c8:	f043 0308 	orr.w	r3, r3, #8
 80013cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001480 <HAL_UART_MspInit+0x294>)
 80013d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013d6:	f003 0308 	and.w	r3, r3, #8
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80013de:	2360      	movs	r3, #96	@ 0x60
 80013e0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e4:	2302      	movs	r3, #2
 80013e6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f0:	2300      	movs	r3, #0
 80013f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013f6:	2307      	movs	r3, #7
 80013f8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013fc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001400:	4619      	mov	r1, r3
 8001402:	4826      	ldr	r0, [pc, #152]	@ (800149c <HAL_UART_MspInit+0x2b0>)
 8001404:	f003 f9c6 	bl	8004794 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream2;
 8001408:	4b25      	ldr	r3, [pc, #148]	@ (80014a0 <HAL_UART_MspInit+0x2b4>)
 800140a:	4a26      	ldr	r2, [pc, #152]	@ (80014a4 <HAL_UART_MspInit+0x2b8>)
 800140c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800140e:	4b24      	ldr	r3, [pc, #144]	@ (80014a0 <HAL_UART_MspInit+0x2b4>)
 8001410:	222b      	movs	r2, #43	@ 0x2b
 8001412:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001414:	4b22      	ldr	r3, [pc, #136]	@ (80014a0 <HAL_UART_MspInit+0x2b4>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800141a:	4b21      	ldr	r3, [pc, #132]	@ (80014a0 <HAL_UART_MspInit+0x2b4>)
 800141c:	2200      	movs	r2, #0
 800141e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001420:	4b1f      	ldr	r3, [pc, #124]	@ (80014a0 <HAL_UART_MspInit+0x2b4>)
 8001422:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001426:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001428:	4b1d      	ldr	r3, [pc, #116]	@ (80014a0 <HAL_UART_MspInit+0x2b4>)
 800142a:	2200      	movs	r2, #0
 800142c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800142e:	4b1c      	ldr	r3, [pc, #112]	@ (80014a0 <HAL_UART_MspInit+0x2b4>)
 8001430:	2200      	movs	r2, #0
 8001432:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001434:	4b1a      	ldr	r3, [pc, #104]	@ (80014a0 <HAL_UART_MspInit+0x2b4>)
 8001436:	2200      	movs	r2, #0
 8001438:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800143a:	4b19      	ldr	r3, [pc, #100]	@ (80014a0 <HAL_UART_MspInit+0x2b4>)
 800143c:	2200      	movs	r2, #0
 800143e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001440:	4b17      	ldr	r3, [pc, #92]	@ (80014a0 <HAL_UART_MspInit+0x2b4>)
 8001442:	2200      	movs	r2, #0
 8001444:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001446:	4816      	ldr	r0, [pc, #88]	@ (80014a0 <HAL_UART_MspInit+0x2b4>)
 8001448:	f000 fb68 	bl	8001b1c <HAL_DMA_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <HAL_UART_MspInit+0x26a>
      Error_Handler();
 8001452:	f7ff fe4d 	bl	80010f0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a11      	ldr	r2, [pc, #68]	@ (80014a0 <HAL_UART_MspInit+0x2b4>)
 800145a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800145e:	4a10      	ldr	r2, [pc, #64]	@ (80014a0 <HAL_UART_MspInit+0x2b4>)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001464:	2200      	movs	r2, #0
 8001466:	2100      	movs	r1, #0
 8001468:	2026      	movs	r0, #38	@ 0x26
 800146a:	f000 faaa 	bl	80019c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800146e:	2026      	movs	r0, #38	@ 0x26
 8001470:	f000 fac1 	bl	80019f6 <HAL_NVIC_EnableIRQ>
}
 8001474:	bf00      	nop
 8001476:	37f0      	adds	r7, #240	@ 0xf0
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40011000 	.word	0x40011000
 8001480:	58024400 	.word	0x58024400
 8001484:	58020400 	.word	0x58020400
 8001488:	240001e4 	.word	0x240001e4
 800148c:	40020010 	.word	0x40020010
 8001490:	2400025c 	.word	0x2400025c
 8001494:	40020028 	.word	0x40020028
 8001498:	40004400 	.word	0x40004400
 800149c:	58020c00 	.word	0x58020c00
 80014a0:	240002d4 	.word	0x240002d4
 80014a4:	40020040 	.word	0x40020040

080014a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014ac:	bf00      	nop
 80014ae:	e7fd      	b.n	80014ac <NMI_Handler+0x4>

080014b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b4:	bf00      	nop
 80014b6:	e7fd      	b.n	80014b4 <HardFault_Handler+0x4>

080014b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <MemManage_Handler+0x4>

080014c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <BusFault_Handler+0x4>

080014c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <UsageFault_Handler+0x4>

080014d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014fe:	f000 f959 	bl	80017b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800150c:	4802      	ldr	r0, [pc, #8]	@ (8001518 <DMA1_Stream0_IRQHandler+0x10>)
 800150e:	f001 fe2f 	bl	8003170 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	240001e4 	.word	0x240001e4

0800151c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001520:	4802      	ldr	r0, [pc, #8]	@ (800152c <DMA1_Stream1_IRQHandler+0x10>)
 8001522:	f001 fe25 	bl	8003170 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	2400025c 	.word	0x2400025c

08001530 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001534:	4802      	ldr	r0, [pc, #8]	@ (8001540 <DMA1_Stream2_IRQHandler+0x10>)
 8001536:	f001 fe1b 	bl	8003170 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	240002d4 	.word	0x240002d4

08001544 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001548:	4802      	ldr	r0, [pc, #8]	@ (8001554 <USART1_IRQHandler+0x10>)
 800154a:	f007 f9e7 	bl	800891c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	240000bc 	.word	0x240000bc

08001558 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800155c:	4802      	ldr	r0, [pc, #8]	@ (8001568 <USART2_IRQHandler+0x10>)
 800155e:	f007 f9dd 	bl	800891c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	24000150 	.word	0x24000150

0800156c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001570:	4b37      	ldr	r3, [pc, #220]	@ (8001650 <SystemInit+0xe4>)
 8001572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001576:	4a36      	ldr	r2, [pc, #216]	@ (8001650 <SystemInit+0xe4>)
 8001578:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800157c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001580:	4b34      	ldr	r3, [pc, #208]	@ (8001654 <SystemInit+0xe8>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 030f 	and.w	r3, r3, #15
 8001588:	2b06      	cmp	r3, #6
 800158a:	d807      	bhi.n	800159c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800158c:	4b31      	ldr	r3, [pc, #196]	@ (8001654 <SystemInit+0xe8>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f023 030f 	bic.w	r3, r3, #15
 8001594:	4a2f      	ldr	r2, [pc, #188]	@ (8001654 <SystemInit+0xe8>)
 8001596:	f043 0307 	orr.w	r3, r3, #7
 800159a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800159c:	4b2e      	ldr	r3, [pc, #184]	@ (8001658 <SystemInit+0xec>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a2d      	ldr	r2, [pc, #180]	@ (8001658 <SystemInit+0xec>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80015a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001658 <SystemInit+0xec>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80015ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001658 <SystemInit+0xec>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	4929      	ldr	r1, [pc, #164]	@ (8001658 <SystemInit+0xec>)
 80015b4:	4b29      	ldr	r3, [pc, #164]	@ (800165c <SystemInit+0xf0>)
 80015b6:	4013      	ands	r3, r2
 80015b8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015ba:	4b26      	ldr	r3, [pc, #152]	@ (8001654 <SystemInit+0xe8>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0308 	and.w	r3, r3, #8
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d007      	beq.n	80015d6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015c6:	4b23      	ldr	r3, [pc, #140]	@ (8001654 <SystemInit+0xe8>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f023 030f 	bic.w	r3, r3, #15
 80015ce:	4a21      	ldr	r2, [pc, #132]	@ (8001654 <SystemInit+0xe8>)
 80015d0:	f043 0307 	orr.w	r3, r3, #7
 80015d4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80015d6:	4b20      	ldr	r3, [pc, #128]	@ (8001658 <SystemInit+0xec>)
 80015d8:	2200      	movs	r2, #0
 80015da:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80015dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001658 <SystemInit+0xec>)
 80015de:	2200      	movs	r2, #0
 80015e0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80015e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001658 <SystemInit+0xec>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80015e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001658 <SystemInit+0xec>)
 80015ea:	4a1d      	ldr	r2, [pc, #116]	@ (8001660 <SystemInit+0xf4>)
 80015ec:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80015ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001658 <SystemInit+0xec>)
 80015f0:	4a1c      	ldr	r2, [pc, #112]	@ (8001664 <SystemInit+0xf8>)
 80015f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80015f4:	4b18      	ldr	r3, [pc, #96]	@ (8001658 <SystemInit+0xec>)
 80015f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001668 <SystemInit+0xfc>)
 80015f8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80015fa:	4b17      	ldr	r3, [pc, #92]	@ (8001658 <SystemInit+0xec>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001600:	4b15      	ldr	r3, [pc, #84]	@ (8001658 <SystemInit+0xec>)
 8001602:	4a19      	ldr	r2, [pc, #100]	@ (8001668 <SystemInit+0xfc>)
 8001604:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001606:	4b14      	ldr	r3, [pc, #80]	@ (8001658 <SystemInit+0xec>)
 8001608:	2200      	movs	r2, #0
 800160a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800160c:	4b12      	ldr	r3, [pc, #72]	@ (8001658 <SystemInit+0xec>)
 800160e:	4a16      	ldr	r2, [pc, #88]	@ (8001668 <SystemInit+0xfc>)
 8001610:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001612:	4b11      	ldr	r3, [pc, #68]	@ (8001658 <SystemInit+0xec>)
 8001614:	2200      	movs	r2, #0
 8001616:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001618:	4b0f      	ldr	r3, [pc, #60]	@ (8001658 <SystemInit+0xec>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a0e      	ldr	r2, [pc, #56]	@ (8001658 <SystemInit+0xec>)
 800161e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001622:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001624:	4b0c      	ldr	r3, [pc, #48]	@ (8001658 <SystemInit+0xec>)
 8001626:	2200      	movs	r2, #0
 8001628:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800162a:	4b10      	ldr	r3, [pc, #64]	@ (800166c <SystemInit+0x100>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	4b10      	ldr	r3, [pc, #64]	@ (8001670 <SystemInit+0x104>)
 8001630:	4013      	ands	r3, r2
 8001632:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001636:	d202      	bcs.n	800163e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001638:	4b0e      	ldr	r3, [pc, #56]	@ (8001674 <SystemInit+0x108>)
 800163a:	2201      	movs	r2, #1
 800163c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800163e:	4b0e      	ldr	r3, [pc, #56]	@ (8001678 <SystemInit+0x10c>)
 8001640:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001644:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	e000ed00 	.word	0xe000ed00
 8001654:	52002000 	.word	0x52002000
 8001658:	58024400 	.word	0x58024400
 800165c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001660:	02020200 	.word	0x02020200
 8001664:	01ff0000 	.word	0x01ff0000
 8001668:	01010280 	.word	0x01010280
 800166c:	5c001000 	.word	0x5c001000
 8001670:	ffff0000 	.word	0xffff0000
 8001674:	51008108 	.word	0x51008108
 8001678:	52004000 	.word	0x52004000

0800167c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800167c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001680:	f7ff ff74 	bl	800156c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001684:	480c      	ldr	r0, [pc, #48]	@ (80016b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001686:	490d      	ldr	r1, [pc, #52]	@ (80016bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001688:	4a0d      	ldr	r2, [pc, #52]	@ (80016c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800168a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800168c:	e002      	b.n	8001694 <LoopCopyDataInit>

0800168e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800168e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001692:	3304      	adds	r3, #4

08001694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001698:	d3f9      	bcc.n	800168e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800169a:	4a0a      	ldr	r2, [pc, #40]	@ (80016c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800169c:	4c0a      	ldr	r4, [pc, #40]	@ (80016c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800169e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a0:	e001      	b.n	80016a6 <LoopFillZerobss>

080016a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016a4:	3204      	adds	r2, #4

080016a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016a8:	d3fb      	bcc.n	80016a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016aa:	f009 f8d3 	bl	800a854 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ae:	f7ff fa11 	bl	8000ad4 <main>
  bx  lr
 80016b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016b4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80016b8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016bc:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 80016c0:	0800a904 	.word	0x0800a904
  ldr r2, =_sbss
 80016c4:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 80016c8:	240003bc 	.word	0x240003bc

080016cc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016cc:	e7fe      	b.n	80016cc <ADC3_IRQHandler>
	...

080016d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d6:	2003      	movs	r0, #3
 80016d8:	f000 f968 	bl	80019ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016dc:	f004 f854 	bl	8005788 <HAL_RCC_GetSysClockFreq>
 80016e0:	4602      	mov	r2, r0
 80016e2:	4b15      	ldr	r3, [pc, #84]	@ (8001738 <HAL_Init+0x68>)
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	0a1b      	lsrs	r3, r3, #8
 80016e8:	f003 030f 	and.w	r3, r3, #15
 80016ec:	4913      	ldr	r1, [pc, #76]	@ (800173c <HAL_Init+0x6c>)
 80016ee:	5ccb      	ldrb	r3, [r1, r3]
 80016f0:	f003 031f 	and.w	r3, r3, #31
 80016f4:	fa22 f303 	lsr.w	r3, r2, r3
 80016f8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001738 <HAL_Init+0x68>)
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	4a0e      	ldr	r2, [pc, #56]	@ (800173c <HAL_Init+0x6c>)
 8001704:	5cd3      	ldrb	r3, [r2, r3]
 8001706:	f003 031f 	and.w	r3, r3, #31
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	fa22 f303 	lsr.w	r3, r2, r3
 8001710:	4a0b      	ldr	r2, [pc, #44]	@ (8001740 <HAL_Init+0x70>)
 8001712:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001714:	4a0b      	ldr	r2, [pc, #44]	@ (8001744 <HAL_Init+0x74>)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800171a:	200f      	movs	r0, #15
 800171c:	f000 f814 	bl	8001748 <HAL_InitTick>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e002      	b.n	8001730 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800172a:	f7ff fce7 	bl	80010fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	58024400 	.word	0x58024400
 800173c:	0800a8b4 	.word	0x0800a8b4
 8001740:	24000008 	.word	0x24000008
 8001744:	24000004 	.word	0x24000004

08001748 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001750:	4b15      	ldr	r3, [pc, #84]	@ (80017a8 <HAL_InitTick+0x60>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e021      	b.n	80017a0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800175c:	4b13      	ldr	r3, [pc, #76]	@ (80017ac <HAL_InitTick+0x64>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	4b11      	ldr	r3, [pc, #68]	@ (80017a8 <HAL_InitTick+0x60>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	4619      	mov	r1, r3
 8001766:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800176a:	fbb3 f3f1 	udiv	r3, r3, r1
 800176e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001772:	4618      	mov	r0, r3
 8001774:	f000 f94d 	bl	8001a12 <HAL_SYSTICK_Config>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e00e      	b.n	80017a0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b0f      	cmp	r3, #15
 8001786:	d80a      	bhi.n	800179e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001788:	2200      	movs	r2, #0
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	f04f 30ff 	mov.w	r0, #4294967295
 8001790:	f000 f917 	bl	80019c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001794:	4a06      	ldr	r2, [pc, #24]	@ (80017b0 <HAL_InitTick+0x68>)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800179a:	2300      	movs	r3, #0
 800179c:	e000      	b.n	80017a0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	24000010 	.word	0x24000010
 80017ac:	24000004 	.word	0x24000004
 80017b0:	2400000c 	.word	0x2400000c

080017b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017b8:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <HAL_IncTick+0x20>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	461a      	mov	r2, r3
 80017be:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <HAL_IncTick+0x24>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4413      	add	r3, r2
 80017c4:	4a04      	ldr	r2, [pc, #16]	@ (80017d8 <HAL_IncTick+0x24>)
 80017c6:	6013      	str	r3, [r2, #0]
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	24000010 	.word	0x24000010
 80017d8:	24000384 	.word	0x24000384

080017dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return uwTick;
 80017e0:	4b03      	ldr	r3, [pc, #12]	@ (80017f0 <HAL_GetTick+0x14>)
 80017e2:	681b      	ldr	r3, [r3, #0]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	24000384 	.word	0x24000384

080017f4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80017f8:	4b03      	ldr	r3, [pc, #12]	@ (8001808 <HAL_GetREVID+0x14>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	0c1b      	lsrs	r3, r3, #16
}
 80017fe:	4618      	mov	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	5c001000 	.word	0x5c001000

0800180c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800181c:	4b0b      	ldr	r3, [pc, #44]	@ (800184c <__NVIC_SetPriorityGrouping+0x40>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001828:	4013      	ands	r3, r2
 800182a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001834:	4b06      	ldr	r3, [pc, #24]	@ (8001850 <__NVIC_SetPriorityGrouping+0x44>)
 8001836:	4313      	orrs	r3, r2
 8001838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800183a:	4a04      	ldr	r2, [pc, #16]	@ (800184c <__NVIC_SetPriorityGrouping+0x40>)
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	60d3      	str	r3, [r2, #12]
}
 8001840:	bf00      	nop
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000ed00 	.word	0xe000ed00
 8001850:	05fa0000 	.word	0x05fa0000

08001854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001858:	4b04      	ldr	r3, [pc, #16]	@ (800186c <__NVIC_GetPriorityGrouping+0x18>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	0a1b      	lsrs	r3, r3, #8
 800185e:	f003 0307 	and.w	r3, r3, #7
}
 8001862:	4618      	mov	r0, r3
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800187a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800187e:	2b00      	cmp	r3, #0
 8001880:	db0b      	blt.n	800189a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001882:	88fb      	ldrh	r3, [r7, #6]
 8001884:	f003 021f 	and.w	r2, r3, #31
 8001888:	4907      	ldr	r1, [pc, #28]	@ (80018a8 <__NVIC_EnableIRQ+0x38>)
 800188a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800188e:	095b      	lsrs	r3, r3, #5
 8001890:	2001      	movs	r0, #1
 8001892:	fa00 f202 	lsl.w	r2, r0, r2
 8001896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000e100 	.word	0xe000e100

080018ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	6039      	str	r1, [r7, #0]
 80018b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	db0a      	blt.n	80018d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	490c      	ldr	r1, [pc, #48]	@ (80018f8 <__NVIC_SetPriority+0x4c>)
 80018c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ca:	0112      	lsls	r2, r2, #4
 80018cc:	b2d2      	uxtb	r2, r2
 80018ce:	440b      	add	r3, r1
 80018d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018d4:	e00a      	b.n	80018ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	4908      	ldr	r1, [pc, #32]	@ (80018fc <__NVIC_SetPriority+0x50>)
 80018dc:	88fb      	ldrh	r3, [r7, #6]
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	3b04      	subs	r3, #4
 80018e4:	0112      	lsls	r2, r2, #4
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	440b      	add	r3, r1
 80018ea:	761a      	strb	r2, [r3, #24]
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	e000e100 	.word	0xe000e100
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001900:	b480      	push	{r7}
 8001902:	b089      	sub	sp, #36	@ 0x24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	f1c3 0307 	rsb	r3, r3, #7
 800191a:	2b04      	cmp	r3, #4
 800191c:	bf28      	it	cs
 800191e:	2304      	movcs	r3, #4
 8001920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	3304      	adds	r3, #4
 8001926:	2b06      	cmp	r3, #6
 8001928:	d902      	bls.n	8001930 <NVIC_EncodePriority+0x30>
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3b03      	subs	r3, #3
 800192e:	e000      	b.n	8001932 <NVIC_EncodePriority+0x32>
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001934:	f04f 32ff 	mov.w	r2, #4294967295
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43da      	mvns	r2, r3
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	401a      	ands	r2, r3
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001948:	f04f 31ff 	mov.w	r1, #4294967295
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	fa01 f303 	lsl.w	r3, r1, r3
 8001952:	43d9      	mvns	r1, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001958:	4313      	orrs	r3, r2
         );
}
 800195a:	4618      	mov	r0, r3
 800195c:	3724      	adds	r7, #36	@ 0x24
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
	...

08001968 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3b01      	subs	r3, #1
 8001974:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001978:	d301      	bcc.n	800197e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800197a:	2301      	movs	r3, #1
 800197c:	e00f      	b.n	800199e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800197e:	4a0a      	ldr	r2, [pc, #40]	@ (80019a8 <SysTick_Config+0x40>)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3b01      	subs	r3, #1
 8001984:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001986:	210f      	movs	r1, #15
 8001988:	f04f 30ff 	mov.w	r0, #4294967295
 800198c:	f7ff ff8e 	bl	80018ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001990:	4b05      	ldr	r3, [pc, #20]	@ (80019a8 <SysTick_Config+0x40>)
 8001992:	2200      	movs	r2, #0
 8001994:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001996:	4b04      	ldr	r3, [pc, #16]	@ (80019a8 <SysTick_Config+0x40>)
 8001998:	2207      	movs	r2, #7
 800199a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	e000e010 	.word	0xe000e010

080019ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff ff29 	bl	800180c <__NVIC_SetPriorityGrouping>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b086      	sub	sp, #24
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	60b9      	str	r1, [r7, #8]
 80019cc:	607a      	str	r2, [r7, #4]
 80019ce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019d0:	f7ff ff40 	bl	8001854 <__NVIC_GetPriorityGrouping>
 80019d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	68b9      	ldr	r1, [r7, #8]
 80019da:	6978      	ldr	r0, [r7, #20]
 80019dc:	f7ff ff90 	bl	8001900 <NVIC_EncodePriority>
 80019e0:	4602      	mov	r2, r0
 80019e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019e6:	4611      	mov	r1, r2
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ff5f 	bl	80018ac <__NVIC_SetPriority>
}
 80019ee:	bf00      	nop
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	4603      	mov	r3, r0
 80019fe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff ff33 	bl	8001870 <__NVIC_EnableIRQ>
}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff ffa4 	bl	8001968 <SysTick_Config>
 8001a20:	4603      	mov	r3, r0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
	...

08001a2c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001a30:	f3bf 8f5f 	dmb	sy
}
 8001a34:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001a36:	4b07      	ldr	r3, [pc, #28]	@ (8001a54 <HAL_MPU_Disable+0x28>)
 8001a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3a:	4a06      	ldr	r2, [pc, #24]	@ (8001a54 <HAL_MPU_Disable+0x28>)
 8001a3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a40:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001a42:	4b05      	ldr	r3, [pc, #20]	@ (8001a58 <HAL_MPU_Disable+0x2c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	605a      	str	r2, [r3, #4]
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	e000ed00 	.word	0xe000ed00
 8001a58:	e000ed90 	.word	0xe000ed90

08001a5c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001a64:	4a0b      	ldr	r2, [pc, #44]	@ (8001a94 <HAL_MPU_Enable+0x38>)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a98 <HAL_MPU_Enable+0x3c>)
 8001a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a72:	4a09      	ldr	r2, [pc, #36]	@ (8001a98 <HAL_MPU_Enable+0x3c>)
 8001a74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a78:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001a7a:	f3bf 8f4f 	dsb	sy
}
 8001a7e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a80:	f3bf 8f6f 	isb	sy
}
 8001a84:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	e000ed90 	.word	0xe000ed90
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	785a      	ldrb	r2, [r3, #1]
 8001aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b18 <HAL_MPU_ConfigRegion+0x7c>)
 8001aaa:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001aac:	4b1a      	ldr	r3, [pc, #104]	@ (8001b18 <HAL_MPU_ConfigRegion+0x7c>)
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	4a19      	ldr	r2, [pc, #100]	@ (8001b18 <HAL_MPU_ConfigRegion+0x7c>)
 8001ab2:	f023 0301 	bic.w	r3, r3, #1
 8001ab6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001ab8:	4a17      	ldr	r2, [pc, #92]	@ (8001b18 <HAL_MPU_ConfigRegion+0x7c>)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	7b1b      	ldrb	r3, [r3, #12]
 8001ac4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	7adb      	ldrb	r3, [r3, #11]
 8001aca:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001acc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	7a9b      	ldrb	r3, [r3, #10]
 8001ad2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001ad4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	7b5b      	ldrb	r3, [r3, #13]
 8001ada:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001adc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	7b9b      	ldrb	r3, [r3, #14]
 8001ae2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ae4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	7bdb      	ldrb	r3, [r3, #15]
 8001aea:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001aec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	7a5b      	ldrb	r3, [r3, #9]
 8001af2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001af4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	7a1b      	ldrb	r3, [r3, #8]
 8001afa:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001afc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	7812      	ldrb	r2, [r2, #0]
 8001b02:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b04:	4a04      	ldr	r2, [pc, #16]	@ (8001b18 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b06:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b08:	6113      	str	r3, [r2, #16]
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	e000ed90 	.word	0xe000ed90

08001b1c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001b24:	f7ff fe5a 	bl	80017dc <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d101      	bne.n	8001b34 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e316      	b.n	8002162 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a66      	ldr	r2, [pc, #408]	@ (8001cd4 <HAL_DMA_Init+0x1b8>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d04a      	beq.n	8001bd4 <HAL_DMA_Init+0xb8>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a65      	ldr	r2, [pc, #404]	@ (8001cd8 <HAL_DMA_Init+0x1bc>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d045      	beq.n	8001bd4 <HAL_DMA_Init+0xb8>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a63      	ldr	r2, [pc, #396]	@ (8001cdc <HAL_DMA_Init+0x1c0>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d040      	beq.n	8001bd4 <HAL_DMA_Init+0xb8>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a62      	ldr	r2, [pc, #392]	@ (8001ce0 <HAL_DMA_Init+0x1c4>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d03b      	beq.n	8001bd4 <HAL_DMA_Init+0xb8>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a60      	ldr	r2, [pc, #384]	@ (8001ce4 <HAL_DMA_Init+0x1c8>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d036      	beq.n	8001bd4 <HAL_DMA_Init+0xb8>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a5f      	ldr	r2, [pc, #380]	@ (8001ce8 <HAL_DMA_Init+0x1cc>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d031      	beq.n	8001bd4 <HAL_DMA_Init+0xb8>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a5d      	ldr	r2, [pc, #372]	@ (8001cec <HAL_DMA_Init+0x1d0>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d02c      	beq.n	8001bd4 <HAL_DMA_Init+0xb8>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a5c      	ldr	r2, [pc, #368]	@ (8001cf0 <HAL_DMA_Init+0x1d4>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d027      	beq.n	8001bd4 <HAL_DMA_Init+0xb8>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a5a      	ldr	r2, [pc, #360]	@ (8001cf4 <HAL_DMA_Init+0x1d8>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d022      	beq.n	8001bd4 <HAL_DMA_Init+0xb8>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a59      	ldr	r2, [pc, #356]	@ (8001cf8 <HAL_DMA_Init+0x1dc>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d01d      	beq.n	8001bd4 <HAL_DMA_Init+0xb8>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a57      	ldr	r2, [pc, #348]	@ (8001cfc <HAL_DMA_Init+0x1e0>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d018      	beq.n	8001bd4 <HAL_DMA_Init+0xb8>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a56      	ldr	r2, [pc, #344]	@ (8001d00 <HAL_DMA_Init+0x1e4>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d013      	beq.n	8001bd4 <HAL_DMA_Init+0xb8>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a54      	ldr	r2, [pc, #336]	@ (8001d04 <HAL_DMA_Init+0x1e8>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d00e      	beq.n	8001bd4 <HAL_DMA_Init+0xb8>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a53      	ldr	r2, [pc, #332]	@ (8001d08 <HAL_DMA_Init+0x1ec>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d009      	beq.n	8001bd4 <HAL_DMA_Init+0xb8>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a51      	ldr	r2, [pc, #324]	@ (8001d0c <HAL_DMA_Init+0x1f0>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d004      	beq.n	8001bd4 <HAL_DMA_Init+0xb8>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a50      	ldr	r2, [pc, #320]	@ (8001d10 <HAL_DMA_Init+0x1f4>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d101      	bne.n	8001bd8 <HAL_DMA_Init+0xbc>
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e000      	b.n	8001bda <HAL_DMA_Init+0xbe>
 8001bd8:	2300      	movs	r3, #0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 813b 	beq.w	8001e56 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2202      	movs	r2, #2
 8001be4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a37      	ldr	r2, [pc, #220]	@ (8001cd4 <HAL_DMA_Init+0x1b8>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d04a      	beq.n	8001c90 <HAL_DMA_Init+0x174>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a36      	ldr	r2, [pc, #216]	@ (8001cd8 <HAL_DMA_Init+0x1bc>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d045      	beq.n	8001c90 <HAL_DMA_Init+0x174>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a34      	ldr	r2, [pc, #208]	@ (8001cdc <HAL_DMA_Init+0x1c0>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d040      	beq.n	8001c90 <HAL_DMA_Init+0x174>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a33      	ldr	r2, [pc, #204]	@ (8001ce0 <HAL_DMA_Init+0x1c4>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d03b      	beq.n	8001c90 <HAL_DMA_Init+0x174>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a31      	ldr	r2, [pc, #196]	@ (8001ce4 <HAL_DMA_Init+0x1c8>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d036      	beq.n	8001c90 <HAL_DMA_Init+0x174>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a30      	ldr	r2, [pc, #192]	@ (8001ce8 <HAL_DMA_Init+0x1cc>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d031      	beq.n	8001c90 <HAL_DMA_Init+0x174>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a2e      	ldr	r2, [pc, #184]	@ (8001cec <HAL_DMA_Init+0x1d0>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d02c      	beq.n	8001c90 <HAL_DMA_Init+0x174>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a2d      	ldr	r2, [pc, #180]	@ (8001cf0 <HAL_DMA_Init+0x1d4>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d027      	beq.n	8001c90 <HAL_DMA_Init+0x174>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a2b      	ldr	r2, [pc, #172]	@ (8001cf4 <HAL_DMA_Init+0x1d8>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d022      	beq.n	8001c90 <HAL_DMA_Init+0x174>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a2a      	ldr	r2, [pc, #168]	@ (8001cf8 <HAL_DMA_Init+0x1dc>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d01d      	beq.n	8001c90 <HAL_DMA_Init+0x174>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a28      	ldr	r2, [pc, #160]	@ (8001cfc <HAL_DMA_Init+0x1e0>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d018      	beq.n	8001c90 <HAL_DMA_Init+0x174>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a27      	ldr	r2, [pc, #156]	@ (8001d00 <HAL_DMA_Init+0x1e4>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d013      	beq.n	8001c90 <HAL_DMA_Init+0x174>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a25      	ldr	r2, [pc, #148]	@ (8001d04 <HAL_DMA_Init+0x1e8>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d00e      	beq.n	8001c90 <HAL_DMA_Init+0x174>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a24      	ldr	r2, [pc, #144]	@ (8001d08 <HAL_DMA_Init+0x1ec>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d009      	beq.n	8001c90 <HAL_DMA_Init+0x174>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a22      	ldr	r2, [pc, #136]	@ (8001d0c <HAL_DMA_Init+0x1f0>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d004      	beq.n	8001c90 <HAL_DMA_Init+0x174>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a21      	ldr	r2, [pc, #132]	@ (8001d10 <HAL_DMA_Init+0x1f4>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d108      	bne.n	8001ca2 <HAL_DMA_Init+0x186>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f022 0201 	bic.w	r2, r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	e007      	b.n	8001cb2 <HAL_DMA_Init+0x196>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0201 	bic.w	r2, r2, #1
 8001cb0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001cb2:	e02f      	b.n	8001d14 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cb4:	f7ff fd92 	bl	80017dc <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b05      	cmp	r3, #5
 8001cc0:	d928      	bls.n	8001d14 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2220      	movs	r2, #32
 8001cc6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2203      	movs	r2, #3
 8001ccc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e246      	b.n	8002162 <HAL_DMA_Init+0x646>
 8001cd4:	40020010 	.word	0x40020010
 8001cd8:	40020028 	.word	0x40020028
 8001cdc:	40020040 	.word	0x40020040
 8001ce0:	40020058 	.word	0x40020058
 8001ce4:	40020070 	.word	0x40020070
 8001ce8:	40020088 	.word	0x40020088
 8001cec:	400200a0 	.word	0x400200a0
 8001cf0:	400200b8 	.word	0x400200b8
 8001cf4:	40020410 	.word	0x40020410
 8001cf8:	40020428 	.word	0x40020428
 8001cfc:	40020440 	.word	0x40020440
 8001d00:	40020458 	.word	0x40020458
 8001d04:	40020470 	.word	0x40020470
 8001d08:	40020488 	.word	0x40020488
 8001d0c:	400204a0 	.word	0x400204a0
 8001d10:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1c8      	bne.n	8001cb4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	4b83      	ldr	r3, [pc, #524]	@ (8001f3c <HAL_DMA_Init+0x420>)
 8001d2e:	4013      	ands	r3, r2
 8001d30:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001d3a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d46:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d52:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d107      	bne.n	8001d78 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d70:	4313      	orrs	r3, r2
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001d78:	4b71      	ldr	r3, [pc, #452]	@ (8001f40 <HAL_DMA_Init+0x424>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	4b71      	ldr	r3, [pc, #452]	@ (8001f44 <HAL_DMA_Init+0x428>)
 8001d7e:	4013      	ands	r3, r2
 8001d80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d84:	d328      	bcc.n	8001dd8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b28      	cmp	r3, #40	@ 0x28
 8001d8c:	d903      	bls.n	8001d96 <HAL_DMA_Init+0x27a>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b2e      	cmp	r3, #46	@ 0x2e
 8001d94:	d917      	bls.n	8001dc6 <HAL_DMA_Init+0x2aa>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b3e      	cmp	r3, #62	@ 0x3e
 8001d9c:	d903      	bls.n	8001da6 <HAL_DMA_Init+0x28a>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b42      	cmp	r3, #66	@ 0x42
 8001da4:	d90f      	bls.n	8001dc6 <HAL_DMA_Init+0x2aa>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b46      	cmp	r3, #70	@ 0x46
 8001dac:	d903      	bls.n	8001db6 <HAL_DMA_Init+0x29a>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b48      	cmp	r3, #72	@ 0x48
 8001db4:	d907      	bls.n	8001dc6 <HAL_DMA_Init+0x2aa>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b4e      	cmp	r3, #78	@ 0x4e
 8001dbc:	d905      	bls.n	8001dca <HAL_DMA_Init+0x2ae>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b52      	cmp	r3, #82	@ 0x52
 8001dc4:	d801      	bhi.n	8001dca <HAL_DMA_Init+0x2ae>
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e000      	b.n	8001dcc <HAL_DMA_Init+0x2b0>
 8001dca:	2300      	movs	r3, #0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001dd6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	f023 0307 	bic.w	r3, r3, #7
 8001dee:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df4:	697a      	ldr	r2, [r7, #20]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	d117      	bne.n	8001e32 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d00e      	beq.n	8001e32 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f002 fb33 	bl	8004480 <DMA_CheckFifoParam>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d008      	beq.n	8001e32 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2240      	movs	r2, #64	@ 0x40
 8001e24:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e197      	b.n	8002162 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f002 fa6e 	bl	800431c <DMA_CalcBaseAndBitshift>
 8001e40:	4603      	mov	r3, r0
 8001e42:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e48:	f003 031f 	and.w	r3, r3, #31
 8001e4c:	223f      	movs	r2, #63	@ 0x3f
 8001e4e:	409a      	lsls	r2, r3
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	e0cd      	b.n	8001ff2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a3b      	ldr	r2, [pc, #236]	@ (8001f48 <HAL_DMA_Init+0x42c>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d022      	beq.n	8001ea6 <HAL_DMA_Init+0x38a>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a39      	ldr	r2, [pc, #228]	@ (8001f4c <HAL_DMA_Init+0x430>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d01d      	beq.n	8001ea6 <HAL_DMA_Init+0x38a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a38      	ldr	r2, [pc, #224]	@ (8001f50 <HAL_DMA_Init+0x434>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d018      	beq.n	8001ea6 <HAL_DMA_Init+0x38a>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a36      	ldr	r2, [pc, #216]	@ (8001f54 <HAL_DMA_Init+0x438>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d013      	beq.n	8001ea6 <HAL_DMA_Init+0x38a>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a35      	ldr	r2, [pc, #212]	@ (8001f58 <HAL_DMA_Init+0x43c>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d00e      	beq.n	8001ea6 <HAL_DMA_Init+0x38a>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a33      	ldr	r2, [pc, #204]	@ (8001f5c <HAL_DMA_Init+0x440>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d009      	beq.n	8001ea6 <HAL_DMA_Init+0x38a>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a32      	ldr	r2, [pc, #200]	@ (8001f60 <HAL_DMA_Init+0x444>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d004      	beq.n	8001ea6 <HAL_DMA_Init+0x38a>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a30      	ldr	r2, [pc, #192]	@ (8001f64 <HAL_DMA_Init+0x448>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d101      	bne.n	8001eaa <HAL_DMA_Init+0x38e>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e000      	b.n	8001eac <HAL_DMA_Init+0x390>
 8001eaa:	2300      	movs	r3, #0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f000 8097 	beq.w	8001fe0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a24      	ldr	r2, [pc, #144]	@ (8001f48 <HAL_DMA_Init+0x42c>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d021      	beq.n	8001f00 <HAL_DMA_Init+0x3e4>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a22      	ldr	r2, [pc, #136]	@ (8001f4c <HAL_DMA_Init+0x430>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d01c      	beq.n	8001f00 <HAL_DMA_Init+0x3e4>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a21      	ldr	r2, [pc, #132]	@ (8001f50 <HAL_DMA_Init+0x434>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d017      	beq.n	8001f00 <HAL_DMA_Init+0x3e4>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a1f      	ldr	r2, [pc, #124]	@ (8001f54 <HAL_DMA_Init+0x438>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d012      	beq.n	8001f00 <HAL_DMA_Init+0x3e4>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a1e      	ldr	r2, [pc, #120]	@ (8001f58 <HAL_DMA_Init+0x43c>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d00d      	beq.n	8001f00 <HAL_DMA_Init+0x3e4>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a1c      	ldr	r2, [pc, #112]	@ (8001f5c <HAL_DMA_Init+0x440>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d008      	beq.n	8001f00 <HAL_DMA_Init+0x3e4>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a1b      	ldr	r2, [pc, #108]	@ (8001f60 <HAL_DMA_Init+0x444>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d003      	beq.n	8001f00 <HAL_DMA_Init+0x3e4>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a19      	ldr	r2, [pc, #100]	@ (8001f64 <HAL_DMA_Init+0x448>)
 8001efe:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2202      	movs	r2, #2
 8001f04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	4b13      	ldr	r3, [pc, #76]	@ (8001f68 <HAL_DMA_Init+0x44c>)
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	2b40      	cmp	r3, #64	@ 0x40
 8001f26:	d021      	beq.n	8001f6c <HAL_DMA_Init+0x450>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	2b80      	cmp	r3, #128	@ 0x80
 8001f2e:	d102      	bne.n	8001f36 <HAL_DMA_Init+0x41a>
 8001f30:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001f34:	e01b      	b.n	8001f6e <HAL_DMA_Init+0x452>
 8001f36:	2300      	movs	r3, #0
 8001f38:	e019      	b.n	8001f6e <HAL_DMA_Init+0x452>
 8001f3a:	bf00      	nop
 8001f3c:	fe10803f 	.word	0xfe10803f
 8001f40:	5c001000 	.word	0x5c001000
 8001f44:	ffff0000 	.word	0xffff0000
 8001f48:	58025408 	.word	0x58025408
 8001f4c:	5802541c 	.word	0x5802541c
 8001f50:	58025430 	.word	0x58025430
 8001f54:	58025444 	.word	0x58025444
 8001f58:	58025458 	.word	0x58025458
 8001f5c:	5802546c 	.word	0x5802546c
 8001f60:	58025480 	.word	0x58025480
 8001f64:	58025494 	.word	0x58025494
 8001f68:	fffe000f 	.word	0xfffe000f
 8001f6c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	68d2      	ldr	r2, [r2, #12]
 8001f72:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001f7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001f84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001f8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001f94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001f9c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	4b6e      	ldr	r3, [pc, #440]	@ (800216c <HAL_DMA_Init+0x650>)
 8001fb4:	4413      	add	r3, r2
 8001fb6:	4a6e      	ldr	r2, [pc, #440]	@ (8002170 <HAL_DMA_Init+0x654>)
 8001fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fbc:	091b      	lsrs	r3, r3, #4
 8001fbe:	009a      	lsls	r2, r3, #2
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f002 f9a9 	bl	800431c <DMA_CalcBaseAndBitshift>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fd2:	f003 031f 	and.w	r3, r3, #31
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	409a      	lsls	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	e008      	b.n	8001ff2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2240      	movs	r2, #64	@ 0x40
 8001fe4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2203      	movs	r2, #3
 8001fea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e0b7      	b.n	8002162 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a5f      	ldr	r2, [pc, #380]	@ (8002174 <HAL_DMA_Init+0x658>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d072      	beq.n	80020e2 <HAL_DMA_Init+0x5c6>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a5d      	ldr	r2, [pc, #372]	@ (8002178 <HAL_DMA_Init+0x65c>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d06d      	beq.n	80020e2 <HAL_DMA_Init+0x5c6>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a5c      	ldr	r2, [pc, #368]	@ (800217c <HAL_DMA_Init+0x660>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d068      	beq.n	80020e2 <HAL_DMA_Init+0x5c6>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a5a      	ldr	r2, [pc, #360]	@ (8002180 <HAL_DMA_Init+0x664>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d063      	beq.n	80020e2 <HAL_DMA_Init+0x5c6>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a59      	ldr	r2, [pc, #356]	@ (8002184 <HAL_DMA_Init+0x668>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d05e      	beq.n	80020e2 <HAL_DMA_Init+0x5c6>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a57      	ldr	r2, [pc, #348]	@ (8002188 <HAL_DMA_Init+0x66c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d059      	beq.n	80020e2 <HAL_DMA_Init+0x5c6>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a56      	ldr	r2, [pc, #344]	@ (800218c <HAL_DMA_Init+0x670>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d054      	beq.n	80020e2 <HAL_DMA_Init+0x5c6>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a54      	ldr	r2, [pc, #336]	@ (8002190 <HAL_DMA_Init+0x674>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d04f      	beq.n	80020e2 <HAL_DMA_Init+0x5c6>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a53      	ldr	r2, [pc, #332]	@ (8002194 <HAL_DMA_Init+0x678>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d04a      	beq.n	80020e2 <HAL_DMA_Init+0x5c6>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a51      	ldr	r2, [pc, #324]	@ (8002198 <HAL_DMA_Init+0x67c>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d045      	beq.n	80020e2 <HAL_DMA_Init+0x5c6>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a50      	ldr	r2, [pc, #320]	@ (800219c <HAL_DMA_Init+0x680>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d040      	beq.n	80020e2 <HAL_DMA_Init+0x5c6>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a4e      	ldr	r2, [pc, #312]	@ (80021a0 <HAL_DMA_Init+0x684>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d03b      	beq.n	80020e2 <HAL_DMA_Init+0x5c6>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a4d      	ldr	r2, [pc, #308]	@ (80021a4 <HAL_DMA_Init+0x688>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d036      	beq.n	80020e2 <HAL_DMA_Init+0x5c6>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a4b      	ldr	r2, [pc, #300]	@ (80021a8 <HAL_DMA_Init+0x68c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d031      	beq.n	80020e2 <HAL_DMA_Init+0x5c6>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a4a      	ldr	r2, [pc, #296]	@ (80021ac <HAL_DMA_Init+0x690>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d02c      	beq.n	80020e2 <HAL_DMA_Init+0x5c6>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a48      	ldr	r2, [pc, #288]	@ (80021b0 <HAL_DMA_Init+0x694>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d027      	beq.n	80020e2 <HAL_DMA_Init+0x5c6>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a47      	ldr	r2, [pc, #284]	@ (80021b4 <HAL_DMA_Init+0x698>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d022      	beq.n	80020e2 <HAL_DMA_Init+0x5c6>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a45      	ldr	r2, [pc, #276]	@ (80021b8 <HAL_DMA_Init+0x69c>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d01d      	beq.n	80020e2 <HAL_DMA_Init+0x5c6>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a44      	ldr	r2, [pc, #272]	@ (80021bc <HAL_DMA_Init+0x6a0>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d018      	beq.n	80020e2 <HAL_DMA_Init+0x5c6>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a42      	ldr	r2, [pc, #264]	@ (80021c0 <HAL_DMA_Init+0x6a4>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d013      	beq.n	80020e2 <HAL_DMA_Init+0x5c6>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a41      	ldr	r2, [pc, #260]	@ (80021c4 <HAL_DMA_Init+0x6a8>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d00e      	beq.n	80020e2 <HAL_DMA_Init+0x5c6>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a3f      	ldr	r2, [pc, #252]	@ (80021c8 <HAL_DMA_Init+0x6ac>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d009      	beq.n	80020e2 <HAL_DMA_Init+0x5c6>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a3e      	ldr	r2, [pc, #248]	@ (80021cc <HAL_DMA_Init+0x6b0>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d004      	beq.n	80020e2 <HAL_DMA_Init+0x5c6>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a3c      	ldr	r2, [pc, #240]	@ (80021d0 <HAL_DMA_Init+0x6b4>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d101      	bne.n	80020e6 <HAL_DMA_Init+0x5ca>
 80020e2:	2301      	movs	r3, #1
 80020e4:	e000      	b.n	80020e8 <HAL_DMA_Init+0x5cc>
 80020e6:	2300      	movs	r3, #0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d032      	beq.n	8002152 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f002 fa43 	bl	8004578 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	2b80      	cmp	r3, #128	@ 0x80
 80020f8:	d102      	bne.n	8002100 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002114:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d010      	beq.n	8002140 <HAL_DMA_Init+0x624>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b08      	cmp	r3, #8
 8002124:	d80c      	bhi.n	8002140 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f002 fac0 	bl	80046ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800213c:	605a      	str	r2, [r3, #4]
 800213e:	e008      	b.n	8002152 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	a7fdabf8 	.word	0xa7fdabf8
 8002170:	cccccccd 	.word	0xcccccccd
 8002174:	40020010 	.word	0x40020010
 8002178:	40020028 	.word	0x40020028
 800217c:	40020040 	.word	0x40020040
 8002180:	40020058 	.word	0x40020058
 8002184:	40020070 	.word	0x40020070
 8002188:	40020088 	.word	0x40020088
 800218c:	400200a0 	.word	0x400200a0
 8002190:	400200b8 	.word	0x400200b8
 8002194:	40020410 	.word	0x40020410
 8002198:	40020428 	.word	0x40020428
 800219c:	40020440 	.word	0x40020440
 80021a0:	40020458 	.word	0x40020458
 80021a4:	40020470 	.word	0x40020470
 80021a8:	40020488 	.word	0x40020488
 80021ac:	400204a0 	.word	0x400204a0
 80021b0:	400204b8 	.word	0x400204b8
 80021b4:	58025408 	.word	0x58025408
 80021b8:	5802541c 	.word	0x5802541c
 80021bc:	58025430 	.word	0x58025430
 80021c0:	58025444 	.word	0x58025444
 80021c4:	58025458 	.word	0x58025458
 80021c8:	5802546c 	.word	0x5802546c
 80021cc:	58025480 	.word	0x58025480
 80021d0:	58025494 	.word	0x58025494

080021d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
 80021e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021e2:	2300      	movs	r3, #0
 80021e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e226      	b.n	800263e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d101      	bne.n	80021fe <HAL_DMA_Start_IT+0x2a>
 80021fa:	2302      	movs	r3, #2
 80021fc:	e21f      	b.n	800263e <HAL_DMA_Start_IT+0x46a>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b01      	cmp	r3, #1
 8002210:	f040 820a 	bne.w	8002628 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2202      	movs	r2, #2
 8002218:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a68      	ldr	r2, [pc, #416]	@ (80023c8 <HAL_DMA_Start_IT+0x1f4>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d04a      	beq.n	80022c2 <HAL_DMA_Start_IT+0xee>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a66      	ldr	r2, [pc, #408]	@ (80023cc <HAL_DMA_Start_IT+0x1f8>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d045      	beq.n	80022c2 <HAL_DMA_Start_IT+0xee>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a65      	ldr	r2, [pc, #404]	@ (80023d0 <HAL_DMA_Start_IT+0x1fc>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d040      	beq.n	80022c2 <HAL_DMA_Start_IT+0xee>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a63      	ldr	r2, [pc, #396]	@ (80023d4 <HAL_DMA_Start_IT+0x200>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d03b      	beq.n	80022c2 <HAL_DMA_Start_IT+0xee>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a62      	ldr	r2, [pc, #392]	@ (80023d8 <HAL_DMA_Start_IT+0x204>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d036      	beq.n	80022c2 <HAL_DMA_Start_IT+0xee>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a60      	ldr	r2, [pc, #384]	@ (80023dc <HAL_DMA_Start_IT+0x208>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d031      	beq.n	80022c2 <HAL_DMA_Start_IT+0xee>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a5f      	ldr	r2, [pc, #380]	@ (80023e0 <HAL_DMA_Start_IT+0x20c>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d02c      	beq.n	80022c2 <HAL_DMA_Start_IT+0xee>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a5d      	ldr	r2, [pc, #372]	@ (80023e4 <HAL_DMA_Start_IT+0x210>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d027      	beq.n	80022c2 <HAL_DMA_Start_IT+0xee>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a5c      	ldr	r2, [pc, #368]	@ (80023e8 <HAL_DMA_Start_IT+0x214>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d022      	beq.n	80022c2 <HAL_DMA_Start_IT+0xee>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a5a      	ldr	r2, [pc, #360]	@ (80023ec <HAL_DMA_Start_IT+0x218>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d01d      	beq.n	80022c2 <HAL_DMA_Start_IT+0xee>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a59      	ldr	r2, [pc, #356]	@ (80023f0 <HAL_DMA_Start_IT+0x21c>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d018      	beq.n	80022c2 <HAL_DMA_Start_IT+0xee>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a57      	ldr	r2, [pc, #348]	@ (80023f4 <HAL_DMA_Start_IT+0x220>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d013      	beq.n	80022c2 <HAL_DMA_Start_IT+0xee>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a56      	ldr	r2, [pc, #344]	@ (80023f8 <HAL_DMA_Start_IT+0x224>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d00e      	beq.n	80022c2 <HAL_DMA_Start_IT+0xee>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a54      	ldr	r2, [pc, #336]	@ (80023fc <HAL_DMA_Start_IT+0x228>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d009      	beq.n	80022c2 <HAL_DMA_Start_IT+0xee>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a53      	ldr	r2, [pc, #332]	@ (8002400 <HAL_DMA_Start_IT+0x22c>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d004      	beq.n	80022c2 <HAL_DMA_Start_IT+0xee>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a51      	ldr	r2, [pc, #324]	@ (8002404 <HAL_DMA_Start_IT+0x230>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d108      	bne.n	80022d4 <HAL_DMA_Start_IT+0x100>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 0201 	bic.w	r2, r2, #1
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	e007      	b.n	80022e4 <HAL_DMA_Start_IT+0x110>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 0201 	bic.w	r2, r2, #1
 80022e2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	68b9      	ldr	r1, [r7, #8]
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f001 fe6a 	bl	8003fc4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a34      	ldr	r2, [pc, #208]	@ (80023c8 <HAL_DMA_Start_IT+0x1f4>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d04a      	beq.n	8002390 <HAL_DMA_Start_IT+0x1bc>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a33      	ldr	r2, [pc, #204]	@ (80023cc <HAL_DMA_Start_IT+0x1f8>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d045      	beq.n	8002390 <HAL_DMA_Start_IT+0x1bc>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a31      	ldr	r2, [pc, #196]	@ (80023d0 <HAL_DMA_Start_IT+0x1fc>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d040      	beq.n	8002390 <HAL_DMA_Start_IT+0x1bc>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a30      	ldr	r2, [pc, #192]	@ (80023d4 <HAL_DMA_Start_IT+0x200>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d03b      	beq.n	8002390 <HAL_DMA_Start_IT+0x1bc>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a2e      	ldr	r2, [pc, #184]	@ (80023d8 <HAL_DMA_Start_IT+0x204>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d036      	beq.n	8002390 <HAL_DMA_Start_IT+0x1bc>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a2d      	ldr	r2, [pc, #180]	@ (80023dc <HAL_DMA_Start_IT+0x208>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d031      	beq.n	8002390 <HAL_DMA_Start_IT+0x1bc>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a2b      	ldr	r2, [pc, #172]	@ (80023e0 <HAL_DMA_Start_IT+0x20c>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d02c      	beq.n	8002390 <HAL_DMA_Start_IT+0x1bc>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a2a      	ldr	r2, [pc, #168]	@ (80023e4 <HAL_DMA_Start_IT+0x210>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d027      	beq.n	8002390 <HAL_DMA_Start_IT+0x1bc>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a28      	ldr	r2, [pc, #160]	@ (80023e8 <HAL_DMA_Start_IT+0x214>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d022      	beq.n	8002390 <HAL_DMA_Start_IT+0x1bc>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a27      	ldr	r2, [pc, #156]	@ (80023ec <HAL_DMA_Start_IT+0x218>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d01d      	beq.n	8002390 <HAL_DMA_Start_IT+0x1bc>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a25      	ldr	r2, [pc, #148]	@ (80023f0 <HAL_DMA_Start_IT+0x21c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d018      	beq.n	8002390 <HAL_DMA_Start_IT+0x1bc>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a24      	ldr	r2, [pc, #144]	@ (80023f4 <HAL_DMA_Start_IT+0x220>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d013      	beq.n	8002390 <HAL_DMA_Start_IT+0x1bc>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a22      	ldr	r2, [pc, #136]	@ (80023f8 <HAL_DMA_Start_IT+0x224>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d00e      	beq.n	8002390 <HAL_DMA_Start_IT+0x1bc>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a21      	ldr	r2, [pc, #132]	@ (80023fc <HAL_DMA_Start_IT+0x228>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d009      	beq.n	8002390 <HAL_DMA_Start_IT+0x1bc>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a1f      	ldr	r2, [pc, #124]	@ (8002400 <HAL_DMA_Start_IT+0x22c>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d004      	beq.n	8002390 <HAL_DMA_Start_IT+0x1bc>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a1e      	ldr	r2, [pc, #120]	@ (8002404 <HAL_DMA_Start_IT+0x230>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d101      	bne.n	8002394 <HAL_DMA_Start_IT+0x1c0>
 8002390:	2301      	movs	r3, #1
 8002392:	e000      	b.n	8002396 <HAL_DMA_Start_IT+0x1c2>
 8002394:	2300      	movs	r3, #0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d036      	beq.n	8002408 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f023 021e 	bic.w	r2, r3, #30
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f042 0216 	orr.w	r2, r2, #22
 80023ac:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d03e      	beq.n	8002434 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f042 0208 	orr.w	r2, r2, #8
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	e035      	b.n	8002434 <HAL_DMA_Start_IT+0x260>
 80023c8:	40020010 	.word	0x40020010
 80023cc:	40020028 	.word	0x40020028
 80023d0:	40020040 	.word	0x40020040
 80023d4:	40020058 	.word	0x40020058
 80023d8:	40020070 	.word	0x40020070
 80023dc:	40020088 	.word	0x40020088
 80023e0:	400200a0 	.word	0x400200a0
 80023e4:	400200b8 	.word	0x400200b8
 80023e8:	40020410 	.word	0x40020410
 80023ec:	40020428 	.word	0x40020428
 80023f0:	40020440 	.word	0x40020440
 80023f4:	40020458 	.word	0x40020458
 80023f8:	40020470 	.word	0x40020470
 80023fc:	40020488 	.word	0x40020488
 8002400:	400204a0 	.word	0x400204a0
 8002404:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f023 020e 	bic.w	r2, r3, #14
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 020a 	orr.w	r2, r2, #10
 800241a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002420:	2b00      	cmp	r3, #0
 8002422:	d007      	beq.n	8002434 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f042 0204 	orr.w	r2, r2, #4
 8002432:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a83      	ldr	r2, [pc, #524]	@ (8002648 <HAL_DMA_Start_IT+0x474>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d072      	beq.n	8002524 <HAL_DMA_Start_IT+0x350>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a82      	ldr	r2, [pc, #520]	@ (800264c <HAL_DMA_Start_IT+0x478>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d06d      	beq.n	8002524 <HAL_DMA_Start_IT+0x350>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a80      	ldr	r2, [pc, #512]	@ (8002650 <HAL_DMA_Start_IT+0x47c>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d068      	beq.n	8002524 <HAL_DMA_Start_IT+0x350>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a7f      	ldr	r2, [pc, #508]	@ (8002654 <HAL_DMA_Start_IT+0x480>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d063      	beq.n	8002524 <HAL_DMA_Start_IT+0x350>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a7d      	ldr	r2, [pc, #500]	@ (8002658 <HAL_DMA_Start_IT+0x484>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d05e      	beq.n	8002524 <HAL_DMA_Start_IT+0x350>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a7c      	ldr	r2, [pc, #496]	@ (800265c <HAL_DMA_Start_IT+0x488>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d059      	beq.n	8002524 <HAL_DMA_Start_IT+0x350>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a7a      	ldr	r2, [pc, #488]	@ (8002660 <HAL_DMA_Start_IT+0x48c>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d054      	beq.n	8002524 <HAL_DMA_Start_IT+0x350>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a79      	ldr	r2, [pc, #484]	@ (8002664 <HAL_DMA_Start_IT+0x490>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d04f      	beq.n	8002524 <HAL_DMA_Start_IT+0x350>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a77      	ldr	r2, [pc, #476]	@ (8002668 <HAL_DMA_Start_IT+0x494>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d04a      	beq.n	8002524 <HAL_DMA_Start_IT+0x350>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a76      	ldr	r2, [pc, #472]	@ (800266c <HAL_DMA_Start_IT+0x498>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d045      	beq.n	8002524 <HAL_DMA_Start_IT+0x350>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a74      	ldr	r2, [pc, #464]	@ (8002670 <HAL_DMA_Start_IT+0x49c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d040      	beq.n	8002524 <HAL_DMA_Start_IT+0x350>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a73      	ldr	r2, [pc, #460]	@ (8002674 <HAL_DMA_Start_IT+0x4a0>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d03b      	beq.n	8002524 <HAL_DMA_Start_IT+0x350>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a71      	ldr	r2, [pc, #452]	@ (8002678 <HAL_DMA_Start_IT+0x4a4>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d036      	beq.n	8002524 <HAL_DMA_Start_IT+0x350>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a70      	ldr	r2, [pc, #448]	@ (800267c <HAL_DMA_Start_IT+0x4a8>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d031      	beq.n	8002524 <HAL_DMA_Start_IT+0x350>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a6e      	ldr	r2, [pc, #440]	@ (8002680 <HAL_DMA_Start_IT+0x4ac>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d02c      	beq.n	8002524 <HAL_DMA_Start_IT+0x350>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a6d      	ldr	r2, [pc, #436]	@ (8002684 <HAL_DMA_Start_IT+0x4b0>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d027      	beq.n	8002524 <HAL_DMA_Start_IT+0x350>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a6b      	ldr	r2, [pc, #428]	@ (8002688 <HAL_DMA_Start_IT+0x4b4>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d022      	beq.n	8002524 <HAL_DMA_Start_IT+0x350>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a6a      	ldr	r2, [pc, #424]	@ (800268c <HAL_DMA_Start_IT+0x4b8>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d01d      	beq.n	8002524 <HAL_DMA_Start_IT+0x350>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a68      	ldr	r2, [pc, #416]	@ (8002690 <HAL_DMA_Start_IT+0x4bc>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d018      	beq.n	8002524 <HAL_DMA_Start_IT+0x350>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a67      	ldr	r2, [pc, #412]	@ (8002694 <HAL_DMA_Start_IT+0x4c0>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d013      	beq.n	8002524 <HAL_DMA_Start_IT+0x350>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a65      	ldr	r2, [pc, #404]	@ (8002698 <HAL_DMA_Start_IT+0x4c4>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d00e      	beq.n	8002524 <HAL_DMA_Start_IT+0x350>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a64      	ldr	r2, [pc, #400]	@ (800269c <HAL_DMA_Start_IT+0x4c8>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d009      	beq.n	8002524 <HAL_DMA_Start_IT+0x350>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a62      	ldr	r2, [pc, #392]	@ (80026a0 <HAL_DMA_Start_IT+0x4cc>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d004      	beq.n	8002524 <HAL_DMA_Start_IT+0x350>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a61      	ldr	r2, [pc, #388]	@ (80026a4 <HAL_DMA_Start_IT+0x4d0>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d101      	bne.n	8002528 <HAL_DMA_Start_IT+0x354>
 8002524:	2301      	movs	r3, #1
 8002526:	e000      	b.n	800252a <HAL_DMA_Start_IT+0x356>
 8002528:	2300      	movs	r3, #0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d01a      	beq.n	8002564 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d007      	beq.n	800254c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002546:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800254a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002550:	2b00      	cmp	r3, #0
 8002552:	d007      	beq.n	8002564 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800255e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002562:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a37      	ldr	r2, [pc, #220]	@ (8002648 <HAL_DMA_Start_IT+0x474>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d04a      	beq.n	8002604 <HAL_DMA_Start_IT+0x430>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a36      	ldr	r2, [pc, #216]	@ (800264c <HAL_DMA_Start_IT+0x478>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d045      	beq.n	8002604 <HAL_DMA_Start_IT+0x430>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a34      	ldr	r2, [pc, #208]	@ (8002650 <HAL_DMA_Start_IT+0x47c>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d040      	beq.n	8002604 <HAL_DMA_Start_IT+0x430>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a33      	ldr	r2, [pc, #204]	@ (8002654 <HAL_DMA_Start_IT+0x480>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d03b      	beq.n	8002604 <HAL_DMA_Start_IT+0x430>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a31      	ldr	r2, [pc, #196]	@ (8002658 <HAL_DMA_Start_IT+0x484>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d036      	beq.n	8002604 <HAL_DMA_Start_IT+0x430>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a30      	ldr	r2, [pc, #192]	@ (800265c <HAL_DMA_Start_IT+0x488>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d031      	beq.n	8002604 <HAL_DMA_Start_IT+0x430>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a2e      	ldr	r2, [pc, #184]	@ (8002660 <HAL_DMA_Start_IT+0x48c>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d02c      	beq.n	8002604 <HAL_DMA_Start_IT+0x430>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a2d      	ldr	r2, [pc, #180]	@ (8002664 <HAL_DMA_Start_IT+0x490>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d027      	beq.n	8002604 <HAL_DMA_Start_IT+0x430>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a2b      	ldr	r2, [pc, #172]	@ (8002668 <HAL_DMA_Start_IT+0x494>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d022      	beq.n	8002604 <HAL_DMA_Start_IT+0x430>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a2a      	ldr	r2, [pc, #168]	@ (800266c <HAL_DMA_Start_IT+0x498>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d01d      	beq.n	8002604 <HAL_DMA_Start_IT+0x430>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a28      	ldr	r2, [pc, #160]	@ (8002670 <HAL_DMA_Start_IT+0x49c>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d018      	beq.n	8002604 <HAL_DMA_Start_IT+0x430>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a27      	ldr	r2, [pc, #156]	@ (8002674 <HAL_DMA_Start_IT+0x4a0>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d013      	beq.n	8002604 <HAL_DMA_Start_IT+0x430>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a25      	ldr	r2, [pc, #148]	@ (8002678 <HAL_DMA_Start_IT+0x4a4>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d00e      	beq.n	8002604 <HAL_DMA_Start_IT+0x430>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a24      	ldr	r2, [pc, #144]	@ (800267c <HAL_DMA_Start_IT+0x4a8>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d009      	beq.n	8002604 <HAL_DMA_Start_IT+0x430>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a22      	ldr	r2, [pc, #136]	@ (8002680 <HAL_DMA_Start_IT+0x4ac>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d004      	beq.n	8002604 <HAL_DMA_Start_IT+0x430>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a21      	ldr	r2, [pc, #132]	@ (8002684 <HAL_DMA_Start_IT+0x4b0>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d108      	bne.n	8002616 <HAL_DMA_Start_IT+0x442>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 0201 	orr.w	r2, r2, #1
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	e012      	b.n	800263c <HAL_DMA_Start_IT+0x468>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f042 0201 	orr.w	r2, r2, #1
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	e009      	b.n	800263c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800262e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800263c:	7dfb      	ldrb	r3, [r7, #23]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40020010 	.word	0x40020010
 800264c:	40020028 	.word	0x40020028
 8002650:	40020040 	.word	0x40020040
 8002654:	40020058 	.word	0x40020058
 8002658:	40020070 	.word	0x40020070
 800265c:	40020088 	.word	0x40020088
 8002660:	400200a0 	.word	0x400200a0
 8002664:	400200b8 	.word	0x400200b8
 8002668:	40020410 	.word	0x40020410
 800266c:	40020428 	.word	0x40020428
 8002670:	40020440 	.word	0x40020440
 8002674:	40020458 	.word	0x40020458
 8002678:	40020470 	.word	0x40020470
 800267c:	40020488 	.word	0x40020488
 8002680:	400204a0 	.word	0x400204a0
 8002684:	400204b8 	.word	0x400204b8
 8002688:	58025408 	.word	0x58025408
 800268c:	5802541c 	.word	0x5802541c
 8002690:	58025430 	.word	0x58025430
 8002694:	58025444 	.word	0x58025444
 8002698:	58025458 	.word	0x58025458
 800269c:	5802546c 	.word	0x5802546c
 80026a0:	58025480 	.word	0x58025480
 80026a4:	58025494 	.word	0x58025494

080026a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80026b0:	f7ff f894 	bl	80017dc <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e2dc      	b.n	8002c7a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d008      	beq.n	80026de <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2280      	movs	r2, #128	@ 0x80
 80026d0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e2cd      	b.n	8002c7a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a76      	ldr	r2, [pc, #472]	@ (80028bc <HAL_DMA_Abort+0x214>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d04a      	beq.n	800277e <HAL_DMA_Abort+0xd6>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a74      	ldr	r2, [pc, #464]	@ (80028c0 <HAL_DMA_Abort+0x218>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d045      	beq.n	800277e <HAL_DMA_Abort+0xd6>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a73      	ldr	r2, [pc, #460]	@ (80028c4 <HAL_DMA_Abort+0x21c>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d040      	beq.n	800277e <HAL_DMA_Abort+0xd6>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a71      	ldr	r2, [pc, #452]	@ (80028c8 <HAL_DMA_Abort+0x220>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d03b      	beq.n	800277e <HAL_DMA_Abort+0xd6>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a70      	ldr	r2, [pc, #448]	@ (80028cc <HAL_DMA_Abort+0x224>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d036      	beq.n	800277e <HAL_DMA_Abort+0xd6>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a6e      	ldr	r2, [pc, #440]	@ (80028d0 <HAL_DMA_Abort+0x228>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d031      	beq.n	800277e <HAL_DMA_Abort+0xd6>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a6d      	ldr	r2, [pc, #436]	@ (80028d4 <HAL_DMA_Abort+0x22c>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d02c      	beq.n	800277e <HAL_DMA_Abort+0xd6>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a6b      	ldr	r2, [pc, #428]	@ (80028d8 <HAL_DMA_Abort+0x230>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d027      	beq.n	800277e <HAL_DMA_Abort+0xd6>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a6a      	ldr	r2, [pc, #424]	@ (80028dc <HAL_DMA_Abort+0x234>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d022      	beq.n	800277e <HAL_DMA_Abort+0xd6>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a68      	ldr	r2, [pc, #416]	@ (80028e0 <HAL_DMA_Abort+0x238>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d01d      	beq.n	800277e <HAL_DMA_Abort+0xd6>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a67      	ldr	r2, [pc, #412]	@ (80028e4 <HAL_DMA_Abort+0x23c>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d018      	beq.n	800277e <HAL_DMA_Abort+0xd6>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a65      	ldr	r2, [pc, #404]	@ (80028e8 <HAL_DMA_Abort+0x240>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d013      	beq.n	800277e <HAL_DMA_Abort+0xd6>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a64      	ldr	r2, [pc, #400]	@ (80028ec <HAL_DMA_Abort+0x244>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d00e      	beq.n	800277e <HAL_DMA_Abort+0xd6>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a62      	ldr	r2, [pc, #392]	@ (80028f0 <HAL_DMA_Abort+0x248>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d009      	beq.n	800277e <HAL_DMA_Abort+0xd6>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a61      	ldr	r2, [pc, #388]	@ (80028f4 <HAL_DMA_Abort+0x24c>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d004      	beq.n	800277e <HAL_DMA_Abort+0xd6>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a5f      	ldr	r2, [pc, #380]	@ (80028f8 <HAL_DMA_Abort+0x250>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d101      	bne.n	8002782 <HAL_DMA_Abort+0xda>
 800277e:	2301      	movs	r3, #1
 8002780:	e000      	b.n	8002784 <HAL_DMA_Abort+0xdc>
 8002782:	2300      	movs	r3, #0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d013      	beq.n	80027b0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 021e 	bic.w	r2, r2, #30
 8002796:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	695a      	ldr	r2, [r3, #20]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027a6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	617b      	str	r3, [r7, #20]
 80027ae:	e00a      	b.n	80027c6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 020e 	bic.w	r2, r2, #14
 80027be:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a3c      	ldr	r2, [pc, #240]	@ (80028bc <HAL_DMA_Abort+0x214>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d072      	beq.n	80028b6 <HAL_DMA_Abort+0x20e>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a3a      	ldr	r2, [pc, #232]	@ (80028c0 <HAL_DMA_Abort+0x218>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d06d      	beq.n	80028b6 <HAL_DMA_Abort+0x20e>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a39      	ldr	r2, [pc, #228]	@ (80028c4 <HAL_DMA_Abort+0x21c>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d068      	beq.n	80028b6 <HAL_DMA_Abort+0x20e>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a37      	ldr	r2, [pc, #220]	@ (80028c8 <HAL_DMA_Abort+0x220>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d063      	beq.n	80028b6 <HAL_DMA_Abort+0x20e>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a36      	ldr	r2, [pc, #216]	@ (80028cc <HAL_DMA_Abort+0x224>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d05e      	beq.n	80028b6 <HAL_DMA_Abort+0x20e>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a34      	ldr	r2, [pc, #208]	@ (80028d0 <HAL_DMA_Abort+0x228>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d059      	beq.n	80028b6 <HAL_DMA_Abort+0x20e>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a33      	ldr	r2, [pc, #204]	@ (80028d4 <HAL_DMA_Abort+0x22c>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d054      	beq.n	80028b6 <HAL_DMA_Abort+0x20e>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a31      	ldr	r2, [pc, #196]	@ (80028d8 <HAL_DMA_Abort+0x230>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d04f      	beq.n	80028b6 <HAL_DMA_Abort+0x20e>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a30      	ldr	r2, [pc, #192]	@ (80028dc <HAL_DMA_Abort+0x234>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d04a      	beq.n	80028b6 <HAL_DMA_Abort+0x20e>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a2e      	ldr	r2, [pc, #184]	@ (80028e0 <HAL_DMA_Abort+0x238>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d045      	beq.n	80028b6 <HAL_DMA_Abort+0x20e>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a2d      	ldr	r2, [pc, #180]	@ (80028e4 <HAL_DMA_Abort+0x23c>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d040      	beq.n	80028b6 <HAL_DMA_Abort+0x20e>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a2b      	ldr	r2, [pc, #172]	@ (80028e8 <HAL_DMA_Abort+0x240>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d03b      	beq.n	80028b6 <HAL_DMA_Abort+0x20e>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a2a      	ldr	r2, [pc, #168]	@ (80028ec <HAL_DMA_Abort+0x244>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d036      	beq.n	80028b6 <HAL_DMA_Abort+0x20e>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a28      	ldr	r2, [pc, #160]	@ (80028f0 <HAL_DMA_Abort+0x248>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d031      	beq.n	80028b6 <HAL_DMA_Abort+0x20e>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a27      	ldr	r2, [pc, #156]	@ (80028f4 <HAL_DMA_Abort+0x24c>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d02c      	beq.n	80028b6 <HAL_DMA_Abort+0x20e>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a25      	ldr	r2, [pc, #148]	@ (80028f8 <HAL_DMA_Abort+0x250>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d027      	beq.n	80028b6 <HAL_DMA_Abort+0x20e>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a24      	ldr	r2, [pc, #144]	@ (80028fc <HAL_DMA_Abort+0x254>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d022      	beq.n	80028b6 <HAL_DMA_Abort+0x20e>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a22      	ldr	r2, [pc, #136]	@ (8002900 <HAL_DMA_Abort+0x258>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d01d      	beq.n	80028b6 <HAL_DMA_Abort+0x20e>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a21      	ldr	r2, [pc, #132]	@ (8002904 <HAL_DMA_Abort+0x25c>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d018      	beq.n	80028b6 <HAL_DMA_Abort+0x20e>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a1f      	ldr	r2, [pc, #124]	@ (8002908 <HAL_DMA_Abort+0x260>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d013      	beq.n	80028b6 <HAL_DMA_Abort+0x20e>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a1e      	ldr	r2, [pc, #120]	@ (800290c <HAL_DMA_Abort+0x264>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d00e      	beq.n	80028b6 <HAL_DMA_Abort+0x20e>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a1c      	ldr	r2, [pc, #112]	@ (8002910 <HAL_DMA_Abort+0x268>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d009      	beq.n	80028b6 <HAL_DMA_Abort+0x20e>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a1b      	ldr	r2, [pc, #108]	@ (8002914 <HAL_DMA_Abort+0x26c>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d004      	beq.n	80028b6 <HAL_DMA_Abort+0x20e>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a19      	ldr	r2, [pc, #100]	@ (8002918 <HAL_DMA_Abort+0x270>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d132      	bne.n	800291c <HAL_DMA_Abort+0x274>
 80028b6:	2301      	movs	r3, #1
 80028b8:	e031      	b.n	800291e <HAL_DMA_Abort+0x276>
 80028ba:	bf00      	nop
 80028bc:	40020010 	.word	0x40020010
 80028c0:	40020028 	.word	0x40020028
 80028c4:	40020040 	.word	0x40020040
 80028c8:	40020058 	.word	0x40020058
 80028cc:	40020070 	.word	0x40020070
 80028d0:	40020088 	.word	0x40020088
 80028d4:	400200a0 	.word	0x400200a0
 80028d8:	400200b8 	.word	0x400200b8
 80028dc:	40020410 	.word	0x40020410
 80028e0:	40020428 	.word	0x40020428
 80028e4:	40020440 	.word	0x40020440
 80028e8:	40020458 	.word	0x40020458
 80028ec:	40020470 	.word	0x40020470
 80028f0:	40020488 	.word	0x40020488
 80028f4:	400204a0 	.word	0x400204a0
 80028f8:	400204b8 	.word	0x400204b8
 80028fc:	58025408 	.word	0x58025408
 8002900:	5802541c 	.word	0x5802541c
 8002904:	58025430 	.word	0x58025430
 8002908:	58025444 	.word	0x58025444
 800290c:	58025458 	.word	0x58025458
 8002910:	5802546c 	.word	0x5802546c
 8002914:	58025480 	.word	0x58025480
 8002918:	58025494 	.word	0x58025494
 800291c:	2300      	movs	r3, #0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d007      	beq.n	8002932 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800292c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002930:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a6d      	ldr	r2, [pc, #436]	@ (8002aec <HAL_DMA_Abort+0x444>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d04a      	beq.n	80029d2 <HAL_DMA_Abort+0x32a>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a6b      	ldr	r2, [pc, #428]	@ (8002af0 <HAL_DMA_Abort+0x448>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d045      	beq.n	80029d2 <HAL_DMA_Abort+0x32a>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a6a      	ldr	r2, [pc, #424]	@ (8002af4 <HAL_DMA_Abort+0x44c>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d040      	beq.n	80029d2 <HAL_DMA_Abort+0x32a>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a68      	ldr	r2, [pc, #416]	@ (8002af8 <HAL_DMA_Abort+0x450>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d03b      	beq.n	80029d2 <HAL_DMA_Abort+0x32a>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a67      	ldr	r2, [pc, #412]	@ (8002afc <HAL_DMA_Abort+0x454>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d036      	beq.n	80029d2 <HAL_DMA_Abort+0x32a>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a65      	ldr	r2, [pc, #404]	@ (8002b00 <HAL_DMA_Abort+0x458>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d031      	beq.n	80029d2 <HAL_DMA_Abort+0x32a>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a64      	ldr	r2, [pc, #400]	@ (8002b04 <HAL_DMA_Abort+0x45c>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d02c      	beq.n	80029d2 <HAL_DMA_Abort+0x32a>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a62      	ldr	r2, [pc, #392]	@ (8002b08 <HAL_DMA_Abort+0x460>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d027      	beq.n	80029d2 <HAL_DMA_Abort+0x32a>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a61      	ldr	r2, [pc, #388]	@ (8002b0c <HAL_DMA_Abort+0x464>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d022      	beq.n	80029d2 <HAL_DMA_Abort+0x32a>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a5f      	ldr	r2, [pc, #380]	@ (8002b10 <HAL_DMA_Abort+0x468>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d01d      	beq.n	80029d2 <HAL_DMA_Abort+0x32a>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a5e      	ldr	r2, [pc, #376]	@ (8002b14 <HAL_DMA_Abort+0x46c>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d018      	beq.n	80029d2 <HAL_DMA_Abort+0x32a>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a5c      	ldr	r2, [pc, #368]	@ (8002b18 <HAL_DMA_Abort+0x470>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d013      	beq.n	80029d2 <HAL_DMA_Abort+0x32a>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a5b      	ldr	r2, [pc, #364]	@ (8002b1c <HAL_DMA_Abort+0x474>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d00e      	beq.n	80029d2 <HAL_DMA_Abort+0x32a>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a59      	ldr	r2, [pc, #356]	@ (8002b20 <HAL_DMA_Abort+0x478>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d009      	beq.n	80029d2 <HAL_DMA_Abort+0x32a>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a58      	ldr	r2, [pc, #352]	@ (8002b24 <HAL_DMA_Abort+0x47c>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d004      	beq.n	80029d2 <HAL_DMA_Abort+0x32a>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a56      	ldr	r2, [pc, #344]	@ (8002b28 <HAL_DMA_Abort+0x480>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d108      	bne.n	80029e4 <HAL_DMA_Abort+0x33c>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 0201 	bic.w	r2, r2, #1
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	e007      	b.n	80029f4 <HAL_DMA_Abort+0x34c>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0201 	bic.w	r2, r2, #1
 80029f2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80029f4:	e013      	b.n	8002a1e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029f6:	f7fe fef1 	bl	80017dc <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b05      	cmp	r3, #5
 8002a02:	d90c      	bls.n	8002a1e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2220      	movs	r2, #32
 8002a08:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2203      	movs	r2, #3
 8002a0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e12d      	b.n	8002c7a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1e5      	bne.n	80029f6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a2f      	ldr	r2, [pc, #188]	@ (8002aec <HAL_DMA_Abort+0x444>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d04a      	beq.n	8002aca <HAL_DMA_Abort+0x422>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a2d      	ldr	r2, [pc, #180]	@ (8002af0 <HAL_DMA_Abort+0x448>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d045      	beq.n	8002aca <HAL_DMA_Abort+0x422>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a2c      	ldr	r2, [pc, #176]	@ (8002af4 <HAL_DMA_Abort+0x44c>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d040      	beq.n	8002aca <HAL_DMA_Abort+0x422>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a2a      	ldr	r2, [pc, #168]	@ (8002af8 <HAL_DMA_Abort+0x450>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d03b      	beq.n	8002aca <HAL_DMA_Abort+0x422>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a29      	ldr	r2, [pc, #164]	@ (8002afc <HAL_DMA_Abort+0x454>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d036      	beq.n	8002aca <HAL_DMA_Abort+0x422>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a27      	ldr	r2, [pc, #156]	@ (8002b00 <HAL_DMA_Abort+0x458>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d031      	beq.n	8002aca <HAL_DMA_Abort+0x422>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a26      	ldr	r2, [pc, #152]	@ (8002b04 <HAL_DMA_Abort+0x45c>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d02c      	beq.n	8002aca <HAL_DMA_Abort+0x422>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a24      	ldr	r2, [pc, #144]	@ (8002b08 <HAL_DMA_Abort+0x460>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d027      	beq.n	8002aca <HAL_DMA_Abort+0x422>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a23      	ldr	r2, [pc, #140]	@ (8002b0c <HAL_DMA_Abort+0x464>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d022      	beq.n	8002aca <HAL_DMA_Abort+0x422>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a21      	ldr	r2, [pc, #132]	@ (8002b10 <HAL_DMA_Abort+0x468>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d01d      	beq.n	8002aca <HAL_DMA_Abort+0x422>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a20      	ldr	r2, [pc, #128]	@ (8002b14 <HAL_DMA_Abort+0x46c>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d018      	beq.n	8002aca <HAL_DMA_Abort+0x422>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a1e      	ldr	r2, [pc, #120]	@ (8002b18 <HAL_DMA_Abort+0x470>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d013      	beq.n	8002aca <HAL_DMA_Abort+0x422>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a1d      	ldr	r2, [pc, #116]	@ (8002b1c <HAL_DMA_Abort+0x474>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d00e      	beq.n	8002aca <HAL_DMA_Abort+0x422>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a1b      	ldr	r2, [pc, #108]	@ (8002b20 <HAL_DMA_Abort+0x478>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d009      	beq.n	8002aca <HAL_DMA_Abort+0x422>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a1a      	ldr	r2, [pc, #104]	@ (8002b24 <HAL_DMA_Abort+0x47c>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d004      	beq.n	8002aca <HAL_DMA_Abort+0x422>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a18      	ldr	r2, [pc, #96]	@ (8002b28 <HAL_DMA_Abort+0x480>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d101      	bne.n	8002ace <HAL_DMA_Abort+0x426>
 8002aca:	2301      	movs	r3, #1
 8002acc:	e000      	b.n	8002ad0 <HAL_DMA_Abort+0x428>
 8002ace:	2300      	movs	r3, #0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d02b      	beq.n	8002b2c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ad8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ade:	f003 031f 	and.w	r3, r3, #31
 8002ae2:	223f      	movs	r2, #63	@ 0x3f
 8002ae4:	409a      	lsls	r2, r3
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	609a      	str	r2, [r3, #8]
 8002aea:	e02a      	b.n	8002b42 <HAL_DMA_Abort+0x49a>
 8002aec:	40020010 	.word	0x40020010
 8002af0:	40020028 	.word	0x40020028
 8002af4:	40020040 	.word	0x40020040
 8002af8:	40020058 	.word	0x40020058
 8002afc:	40020070 	.word	0x40020070
 8002b00:	40020088 	.word	0x40020088
 8002b04:	400200a0 	.word	0x400200a0
 8002b08:	400200b8 	.word	0x400200b8
 8002b0c:	40020410 	.word	0x40020410
 8002b10:	40020428 	.word	0x40020428
 8002b14:	40020440 	.word	0x40020440
 8002b18:	40020458 	.word	0x40020458
 8002b1c:	40020470 	.word	0x40020470
 8002b20:	40020488 	.word	0x40020488
 8002b24:	400204a0 	.word	0x400204a0
 8002b28:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b30:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b36:	f003 031f 	and.w	r3, r3, #31
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	409a      	lsls	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a4f      	ldr	r2, [pc, #316]	@ (8002c84 <HAL_DMA_Abort+0x5dc>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d072      	beq.n	8002c32 <HAL_DMA_Abort+0x58a>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a4d      	ldr	r2, [pc, #308]	@ (8002c88 <HAL_DMA_Abort+0x5e0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d06d      	beq.n	8002c32 <HAL_DMA_Abort+0x58a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a4c      	ldr	r2, [pc, #304]	@ (8002c8c <HAL_DMA_Abort+0x5e4>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d068      	beq.n	8002c32 <HAL_DMA_Abort+0x58a>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a4a      	ldr	r2, [pc, #296]	@ (8002c90 <HAL_DMA_Abort+0x5e8>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d063      	beq.n	8002c32 <HAL_DMA_Abort+0x58a>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a49      	ldr	r2, [pc, #292]	@ (8002c94 <HAL_DMA_Abort+0x5ec>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d05e      	beq.n	8002c32 <HAL_DMA_Abort+0x58a>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a47      	ldr	r2, [pc, #284]	@ (8002c98 <HAL_DMA_Abort+0x5f0>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d059      	beq.n	8002c32 <HAL_DMA_Abort+0x58a>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a46      	ldr	r2, [pc, #280]	@ (8002c9c <HAL_DMA_Abort+0x5f4>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d054      	beq.n	8002c32 <HAL_DMA_Abort+0x58a>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a44      	ldr	r2, [pc, #272]	@ (8002ca0 <HAL_DMA_Abort+0x5f8>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d04f      	beq.n	8002c32 <HAL_DMA_Abort+0x58a>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a43      	ldr	r2, [pc, #268]	@ (8002ca4 <HAL_DMA_Abort+0x5fc>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d04a      	beq.n	8002c32 <HAL_DMA_Abort+0x58a>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a41      	ldr	r2, [pc, #260]	@ (8002ca8 <HAL_DMA_Abort+0x600>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d045      	beq.n	8002c32 <HAL_DMA_Abort+0x58a>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a40      	ldr	r2, [pc, #256]	@ (8002cac <HAL_DMA_Abort+0x604>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d040      	beq.n	8002c32 <HAL_DMA_Abort+0x58a>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a3e      	ldr	r2, [pc, #248]	@ (8002cb0 <HAL_DMA_Abort+0x608>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d03b      	beq.n	8002c32 <HAL_DMA_Abort+0x58a>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a3d      	ldr	r2, [pc, #244]	@ (8002cb4 <HAL_DMA_Abort+0x60c>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d036      	beq.n	8002c32 <HAL_DMA_Abort+0x58a>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a3b      	ldr	r2, [pc, #236]	@ (8002cb8 <HAL_DMA_Abort+0x610>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d031      	beq.n	8002c32 <HAL_DMA_Abort+0x58a>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a3a      	ldr	r2, [pc, #232]	@ (8002cbc <HAL_DMA_Abort+0x614>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d02c      	beq.n	8002c32 <HAL_DMA_Abort+0x58a>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a38      	ldr	r2, [pc, #224]	@ (8002cc0 <HAL_DMA_Abort+0x618>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d027      	beq.n	8002c32 <HAL_DMA_Abort+0x58a>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a37      	ldr	r2, [pc, #220]	@ (8002cc4 <HAL_DMA_Abort+0x61c>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d022      	beq.n	8002c32 <HAL_DMA_Abort+0x58a>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a35      	ldr	r2, [pc, #212]	@ (8002cc8 <HAL_DMA_Abort+0x620>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d01d      	beq.n	8002c32 <HAL_DMA_Abort+0x58a>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a34      	ldr	r2, [pc, #208]	@ (8002ccc <HAL_DMA_Abort+0x624>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d018      	beq.n	8002c32 <HAL_DMA_Abort+0x58a>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a32      	ldr	r2, [pc, #200]	@ (8002cd0 <HAL_DMA_Abort+0x628>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d013      	beq.n	8002c32 <HAL_DMA_Abort+0x58a>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a31      	ldr	r2, [pc, #196]	@ (8002cd4 <HAL_DMA_Abort+0x62c>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d00e      	beq.n	8002c32 <HAL_DMA_Abort+0x58a>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a2f      	ldr	r2, [pc, #188]	@ (8002cd8 <HAL_DMA_Abort+0x630>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d009      	beq.n	8002c32 <HAL_DMA_Abort+0x58a>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a2e      	ldr	r2, [pc, #184]	@ (8002cdc <HAL_DMA_Abort+0x634>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d004      	beq.n	8002c32 <HAL_DMA_Abort+0x58a>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a2c      	ldr	r2, [pc, #176]	@ (8002ce0 <HAL_DMA_Abort+0x638>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d101      	bne.n	8002c36 <HAL_DMA_Abort+0x58e>
 8002c32:	2301      	movs	r3, #1
 8002c34:	e000      	b.n	8002c38 <HAL_DMA_Abort+0x590>
 8002c36:	2300      	movs	r3, #0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d015      	beq.n	8002c68 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002c44:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00c      	beq.n	8002c68 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c5c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002c66:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3718      	adds	r7, #24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40020010 	.word	0x40020010
 8002c88:	40020028 	.word	0x40020028
 8002c8c:	40020040 	.word	0x40020040
 8002c90:	40020058 	.word	0x40020058
 8002c94:	40020070 	.word	0x40020070
 8002c98:	40020088 	.word	0x40020088
 8002c9c:	400200a0 	.word	0x400200a0
 8002ca0:	400200b8 	.word	0x400200b8
 8002ca4:	40020410 	.word	0x40020410
 8002ca8:	40020428 	.word	0x40020428
 8002cac:	40020440 	.word	0x40020440
 8002cb0:	40020458 	.word	0x40020458
 8002cb4:	40020470 	.word	0x40020470
 8002cb8:	40020488 	.word	0x40020488
 8002cbc:	400204a0 	.word	0x400204a0
 8002cc0:	400204b8 	.word	0x400204b8
 8002cc4:	58025408 	.word	0x58025408
 8002cc8:	5802541c 	.word	0x5802541c
 8002ccc:	58025430 	.word	0x58025430
 8002cd0:	58025444 	.word	0x58025444
 8002cd4:	58025458 	.word	0x58025458
 8002cd8:	5802546c 	.word	0x5802546c
 8002cdc:	58025480 	.word	0x58025480
 8002ce0:	58025494 	.word	0x58025494

08002ce4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e237      	b.n	8003166 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d004      	beq.n	8002d0c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2280      	movs	r2, #128	@ 0x80
 8002d06:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e22c      	b.n	8003166 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a5c      	ldr	r2, [pc, #368]	@ (8002e84 <HAL_DMA_Abort_IT+0x1a0>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d04a      	beq.n	8002dac <HAL_DMA_Abort_IT+0xc8>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a5b      	ldr	r2, [pc, #364]	@ (8002e88 <HAL_DMA_Abort_IT+0x1a4>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d045      	beq.n	8002dac <HAL_DMA_Abort_IT+0xc8>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a59      	ldr	r2, [pc, #356]	@ (8002e8c <HAL_DMA_Abort_IT+0x1a8>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d040      	beq.n	8002dac <HAL_DMA_Abort_IT+0xc8>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a58      	ldr	r2, [pc, #352]	@ (8002e90 <HAL_DMA_Abort_IT+0x1ac>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d03b      	beq.n	8002dac <HAL_DMA_Abort_IT+0xc8>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a56      	ldr	r2, [pc, #344]	@ (8002e94 <HAL_DMA_Abort_IT+0x1b0>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d036      	beq.n	8002dac <HAL_DMA_Abort_IT+0xc8>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a55      	ldr	r2, [pc, #340]	@ (8002e98 <HAL_DMA_Abort_IT+0x1b4>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d031      	beq.n	8002dac <HAL_DMA_Abort_IT+0xc8>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a53      	ldr	r2, [pc, #332]	@ (8002e9c <HAL_DMA_Abort_IT+0x1b8>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d02c      	beq.n	8002dac <HAL_DMA_Abort_IT+0xc8>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a52      	ldr	r2, [pc, #328]	@ (8002ea0 <HAL_DMA_Abort_IT+0x1bc>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d027      	beq.n	8002dac <HAL_DMA_Abort_IT+0xc8>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a50      	ldr	r2, [pc, #320]	@ (8002ea4 <HAL_DMA_Abort_IT+0x1c0>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d022      	beq.n	8002dac <HAL_DMA_Abort_IT+0xc8>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a4f      	ldr	r2, [pc, #316]	@ (8002ea8 <HAL_DMA_Abort_IT+0x1c4>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d01d      	beq.n	8002dac <HAL_DMA_Abort_IT+0xc8>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a4d      	ldr	r2, [pc, #308]	@ (8002eac <HAL_DMA_Abort_IT+0x1c8>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d018      	beq.n	8002dac <HAL_DMA_Abort_IT+0xc8>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a4c      	ldr	r2, [pc, #304]	@ (8002eb0 <HAL_DMA_Abort_IT+0x1cc>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d013      	beq.n	8002dac <HAL_DMA_Abort_IT+0xc8>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a4a      	ldr	r2, [pc, #296]	@ (8002eb4 <HAL_DMA_Abort_IT+0x1d0>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d00e      	beq.n	8002dac <HAL_DMA_Abort_IT+0xc8>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a49      	ldr	r2, [pc, #292]	@ (8002eb8 <HAL_DMA_Abort_IT+0x1d4>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d009      	beq.n	8002dac <HAL_DMA_Abort_IT+0xc8>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a47      	ldr	r2, [pc, #284]	@ (8002ebc <HAL_DMA_Abort_IT+0x1d8>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d004      	beq.n	8002dac <HAL_DMA_Abort_IT+0xc8>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a46      	ldr	r2, [pc, #280]	@ (8002ec0 <HAL_DMA_Abort_IT+0x1dc>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d101      	bne.n	8002db0 <HAL_DMA_Abort_IT+0xcc>
 8002dac:	2301      	movs	r3, #1
 8002dae:	e000      	b.n	8002db2 <HAL_DMA_Abort_IT+0xce>
 8002db0:	2300      	movs	r3, #0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f000 8086 	beq.w	8002ec4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2204      	movs	r2, #4
 8002dbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a2f      	ldr	r2, [pc, #188]	@ (8002e84 <HAL_DMA_Abort_IT+0x1a0>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d04a      	beq.n	8002e60 <HAL_DMA_Abort_IT+0x17c>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a2e      	ldr	r2, [pc, #184]	@ (8002e88 <HAL_DMA_Abort_IT+0x1a4>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d045      	beq.n	8002e60 <HAL_DMA_Abort_IT+0x17c>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a2c      	ldr	r2, [pc, #176]	@ (8002e8c <HAL_DMA_Abort_IT+0x1a8>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d040      	beq.n	8002e60 <HAL_DMA_Abort_IT+0x17c>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a2b      	ldr	r2, [pc, #172]	@ (8002e90 <HAL_DMA_Abort_IT+0x1ac>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d03b      	beq.n	8002e60 <HAL_DMA_Abort_IT+0x17c>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a29      	ldr	r2, [pc, #164]	@ (8002e94 <HAL_DMA_Abort_IT+0x1b0>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d036      	beq.n	8002e60 <HAL_DMA_Abort_IT+0x17c>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a28      	ldr	r2, [pc, #160]	@ (8002e98 <HAL_DMA_Abort_IT+0x1b4>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d031      	beq.n	8002e60 <HAL_DMA_Abort_IT+0x17c>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a26      	ldr	r2, [pc, #152]	@ (8002e9c <HAL_DMA_Abort_IT+0x1b8>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d02c      	beq.n	8002e60 <HAL_DMA_Abort_IT+0x17c>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a25      	ldr	r2, [pc, #148]	@ (8002ea0 <HAL_DMA_Abort_IT+0x1bc>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d027      	beq.n	8002e60 <HAL_DMA_Abort_IT+0x17c>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a23      	ldr	r2, [pc, #140]	@ (8002ea4 <HAL_DMA_Abort_IT+0x1c0>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d022      	beq.n	8002e60 <HAL_DMA_Abort_IT+0x17c>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a22      	ldr	r2, [pc, #136]	@ (8002ea8 <HAL_DMA_Abort_IT+0x1c4>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d01d      	beq.n	8002e60 <HAL_DMA_Abort_IT+0x17c>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a20      	ldr	r2, [pc, #128]	@ (8002eac <HAL_DMA_Abort_IT+0x1c8>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d018      	beq.n	8002e60 <HAL_DMA_Abort_IT+0x17c>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a1f      	ldr	r2, [pc, #124]	@ (8002eb0 <HAL_DMA_Abort_IT+0x1cc>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d013      	beq.n	8002e60 <HAL_DMA_Abort_IT+0x17c>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a1d      	ldr	r2, [pc, #116]	@ (8002eb4 <HAL_DMA_Abort_IT+0x1d0>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d00e      	beq.n	8002e60 <HAL_DMA_Abort_IT+0x17c>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a1c      	ldr	r2, [pc, #112]	@ (8002eb8 <HAL_DMA_Abort_IT+0x1d4>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d009      	beq.n	8002e60 <HAL_DMA_Abort_IT+0x17c>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a1a      	ldr	r2, [pc, #104]	@ (8002ebc <HAL_DMA_Abort_IT+0x1d8>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d004      	beq.n	8002e60 <HAL_DMA_Abort_IT+0x17c>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a19      	ldr	r2, [pc, #100]	@ (8002ec0 <HAL_DMA_Abort_IT+0x1dc>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d108      	bne.n	8002e72 <HAL_DMA_Abort_IT+0x18e>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 0201 	bic.w	r2, r2, #1
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	e178      	b.n	8003164 <HAL_DMA_Abort_IT+0x480>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 0201 	bic.w	r2, r2, #1
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	e16f      	b.n	8003164 <HAL_DMA_Abort_IT+0x480>
 8002e84:	40020010 	.word	0x40020010
 8002e88:	40020028 	.word	0x40020028
 8002e8c:	40020040 	.word	0x40020040
 8002e90:	40020058 	.word	0x40020058
 8002e94:	40020070 	.word	0x40020070
 8002e98:	40020088 	.word	0x40020088
 8002e9c:	400200a0 	.word	0x400200a0
 8002ea0:	400200b8 	.word	0x400200b8
 8002ea4:	40020410 	.word	0x40020410
 8002ea8:	40020428 	.word	0x40020428
 8002eac:	40020440 	.word	0x40020440
 8002eb0:	40020458 	.word	0x40020458
 8002eb4:	40020470 	.word	0x40020470
 8002eb8:	40020488 	.word	0x40020488
 8002ebc:	400204a0 	.word	0x400204a0
 8002ec0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 020e 	bic.w	r2, r2, #14
 8002ed2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a6c      	ldr	r2, [pc, #432]	@ (800308c <HAL_DMA_Abort_IT+0x3a8>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d04a      	beq.n	8002f74 <HAL_DMA_Abort_IT+0x290>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a6b      	ldr	r2, [pc, #428]	@ (8003090 <HAL_DMA_Abort_IT+0x3ac>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d045      	beq.n	8002f74 <HAL_DMA_Abort_IT+0x290>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a69      	ldr	r2, [pc, #420]	@ (8003094 <HAL_DMA_Abort_IT+0x3b0>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d040      	beq.n	8002f74 <HAL_DMA_Abort_IT+0x290>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a68      	ldr	r2, [pc, #416]	@ (8003098 <HAL_DMA_Abort_IT+0x3b4>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d03b      	beq.n	8002f74 <HAL_DMA_Abort_IT+0x290>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a66      	ldr	r2, [pc, #408]	@ (800309c <HAL_DMA_Abort_IT+0x3b8>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d036      	beq.n	8002f74 <HAL_DMA_Abort_IT+0x290>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a65      	ldr	r2, [pc, #404]	@ (80030a0 <HAL_DMA_Abort_IT+0x3bc>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d031      	beq.n	8002f74 <HAL_DMA_Abort_IT+0x290>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a63      	ldr	r2, [pc, #396]	@ (80030a4 <HAL_DMA_Abort_IT+0x3c0>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d02c      	beq.n	8002f74 <HAL_DMA_Abort_IT+0x290>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a62      	ldr	r2, [pc, #392]	@ (80030a8 <HAL_DMA_Abort_IT+0x3c4>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d027      	beq.n	8002f74 <HAL_DMA_Abort_IT+0x290>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a60      	ldr	r2, [pc, #384]	@ (80030ac <HAL_DMA_Abort_IT+0x3c8>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d022      	beq.n	8002f74 <HAL_DMA_Abort_IT+0x290>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a5f      	ldr	r2, [pc, #380]	@ (80030b0 <HAL_DMA_Abort_IT+0x3cc>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d01d      	beq.n	8002f74 <HAL_DMA_Abort_IT+0x290>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a5d      	ldr	r2, [pc, #372]	@ (80030b4 <HAL_DMA_Abort_IT+0x3d0>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d018      	beq.n	8002f74 <HAL_DMA_Abort_IT+0x290>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a5c      	ldr	r2, [pc, #368]	@ (80030b8 <HAL_DMA_Abort_IT+0x3d4>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d013      	beq.n	8002f74 <HAL_DMA_Abort_IT+0x290>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a5a      	ldr	r2, [pc, #360]	@ (80030bc <HAL_DMA_Abort_IT+0x3d8>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d00e      	beq.n	8002f74 <HAL_DMA_Abort_IT+0x290>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a59      	ldr	r2, [pc, #356]	@ (80030c0 <HAL_DMA_Abort_IT+0x3dc>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d009      	beq.n	8002f74 <HAL_DMA_Abort_IT+0x290>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a57      	ldr	r2, [pc, #348]	@ (80030c4 <HAL_DMA_Abort_IT+0x3e0>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d004      	beq.n	8002f74 <HAL_DMA_Abort_IT+0x290>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a56      	ldr	r2, [pc, #344]	@ (80030c8 <HAL_DMA_Abort_IT+0x3e4>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d108      	bne.n	8002f86 <HAL_DMA_Abort_IT+0x2a2>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f022 0201 	bic.w	r2, r2, #1
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	e007      	b.n	8002f96 <HAL_DMA_Abort_IT+0x2b2>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 0201 	bic.w	r2, r2, #1
 8002f94:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a3c      	ldr	r2, [pc, #240]	@ (800308c <HAL_DMA_Abort_IT+0x3a8>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d072      	beq.n	8003086 <HAL_DMA_Abort_IT+0x3a2>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a3a      	ldr	r2, [pc, #232]	@ (8003090 <HAL_DMA_Abort_IT+0x3ac>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d06d      	beq.n	8003086 <HAL_DMA_Abort_IT+0x3a2>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a39      	ldr	r2, [pc, #228]	@ (8003094 <HAL_DMA_Abort_IT+0x3b0>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d068      	beq.n	8003086 <HAL_DMA_Abort_IT+0x3a2>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a37      	ldr	r2, [pc, #220]	@ (8003098 <HAL_DMA_Abort_IT+0x3b4>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d063      	beq.n	8003086 <HAL_DMA_Abort_IT+0x3a2>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a36      	ldr	r2, [pc, #216]	@ (800309c <HAL_DMA_Abort_IT+0x3b8>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d05e      	beq.n	8003086 <HAL_DMA_Abort_IT+0x3a2>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a34      	ldr	r2, [pc, #208]	@ (80030a0 <HAL_DMA_Abort_IT+0x3bc>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d059      	beq.n	8003086 <HAL_DMA_Abort_IT+0x3a2>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a33      	ldr	r2, [pc, #204]	@ (80030a4 <HAL_DMA_Abort_IT+0x3c0>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d054      	beq.n	8003086 <HAL_DMA_Abort_IT+0x3a2>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a31      	ldr	r2, [pc, #196]	@ (80030a8 <HAL_DMA_Abort_IT+0x3c4>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d04f      	beq.n	8003086 <HAL_DMA_Abort_IT+0x3a2>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a30      	ldr	r2, [pc, #192]	@ (80030ac <HAL_DMA_Abort_IT+0x3c8>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d04a      	beq.n	8003086 <HAL_DMA_Abort_IT+0x3a2>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a2e      	ldr	r2, [pc, #184]	@ (80030b0 <HAL_DMA_Abort_IT+0x3cc>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d045      	beq.n	8003086 <HAL_DMA_Abort_IT+0x3a2>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a2d      	ldr	r2, [pc, #180]	@ (80030b4 <HAL_DMA_Abort_IT+0x3d0>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d040      	beq.n	8003086 <HAL_DMA_Abort_IT+0x3a2>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a2b      	ldr	r2, [pc, #172]	@ (80030b8 <HAL_DMA_Abort_IT+0x3d4>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d03b      	beq.n	8003086 <HAL_DMA_Abort_IT+0x3a2>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a2a      	ldr	r2, [pc, #168]	@ (80030bc <HAL_DMA_Abort_IT+0x3d8>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d036      	beq.n	8003086 <HAL_DMA_Abort_IT+0x3a2>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a28      	ldr	r2, [pc, #160]	@ (80030c0 <HAL_DMA_Abort_IT+0x3dc>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d031      	beq.n	8003086 <HAL_DMA_Abort_IT+0x3a2>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a27      	ldr	r2, [pc, #156]	@ (80030c4 <HAL_DMA_Abort_IT+0x3e0>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d02c      	beq.n	8003086 <HAL_DMA_Abort_IT+0x3a2>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a25      	ldr	r2, [pc, #148]	@ (80030c8 <HAL_DMA_Abort_IT+0x3e4>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d027      	beq.n	8003086 <HAL_DMA_Abort_IT+0x3a2>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a24      	ldr	r2, [pc, #144]	@ (80030cc <HAL_DMA_Abort_IT+0x3e8>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d022      	beq.n	8003086 <HAL_DMA_Abort_IT+0x3a2>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a22      	ldr	r2, [pc, #136]	@ (80030d0 <HAL_DMA_Abort_IT+0x3ec>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d01d      	beq.n	8003086 <HAL_DMA_Abort_IT+0x3a2>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a21      	ldr	r2, [pc, #132]	@ (80030d4 <HAL_DMA_Abort_IT+0x3f0>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d018      	beq.n	8003086 <HAL_DMA_Abort_IT+0x3a2>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a1f      	ldr	r2, [pc, #124]	@ (80030d8 <HAL_DMA_Abort_IT+0x3f4>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d013      	beq.n	8003086 <HAL_DMA_Abort_IT+0x3a2>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a1e      	ldr	r2, [pc, #120]	@ (80030dc <HAL_DMA_Abort_IT+0x3f8>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d00e      	beq.n	8003086 <HAL_DMA_Abort_IT+0x3a2>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a1c      	ldr	r2, [pc, #112]	@ (80030e0 <HAL_DMA_Abort_IT+0x3fc>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d009      	beq.n	8003086 <HAL_DMA_Abort_IT+0x3a2>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a1b      	ldr	r2, [pc, #108]	@ (80030e4 <HAL_DMA_Abort_IT+0x400>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d004      	beq.n	8003086 <HAL_DMA_Abort_IT+0x3a2>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a19      	ldr	r2, [pc, #100]	@ (80030e8 <HAL_DMA_Abort_IT+0x404>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d132      	bne.n	80030ec <HAL_DMA_Abort_IT+0x408>
 8003086:	2301      	movs	r3, #1
 8003088:	e031      	b.n	80030ee <HAL_DMA_Abort_IT+0x40a>
 800308a:	bf00      	nop
 800308c:	40020010 	.word	0x40020010
 8003090:	40020028 	.word	0x40020028
 8003094:	40020040 	.word	0x40020040
 8003098:	40020058 	.word	0x40020058
 800309c:	40020070 	.word	0x40020070
 80030a0:	40020088 	.word	0x40020088
 80030a4:	400200a0 	.word	0x400200a0
 80030a8:	400200b8 	.word	0x400200b8
 80030ac:	40020410 	.word	0x40020410
 80030b0:	40020428 	.word	0x40020428
 80030b4:	40020440 	.word	0x40020440
 80030b8:	40020458 	.word	0x40020458
 80030bc:	40020470 	.word	0x40020470
 80030c0:	40020488 	.word	0x40020488
 80030c4:	400204a0 	.word	0x400204a0
 80030c8:	400204b8 	.word	0x400204b8
 80030cc:	58025408 	.word	0x58025408
 80030d0:	5802541c 	.word	0x5802541c
 80030d4:	58025430 	.word	0x58025430
 80030d8:	58025444 	.word	0x58025444
 80030dc:	58025458 	.word	0x58025458
 80030e0:	5802546c 	.word	0x5802546c
 80030e4:	58025480 	.word	0x58025480
 80030e8:	58025494 	.word	0x58025494
 80030ec:	2300      	movs	r3, #0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d028      	beq.n	8003144 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003100:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003106:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800310c:	f003 031f 	and.w	r3, r3, #31
 8003110:	2201      	movs	r2, #1
 8003112:	409a      	lsls	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003120:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00c      	beq.n	8003144 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003134:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003138:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003142:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003158:	2b00      	cmp	r3, #0
 800315a:	d003      	beq.n	8003164 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop

08003170 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b08a      	sub	sp, #40	@ 0x28
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003178:	2300      	movs	r3, #0
 800317a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800317c:	4b67      	ldr	r3, [pc, #412]	@ (800331c <HAL_DMA_IRQHandler+0x1ac>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a67      	ldr	r2, [pc, #412]	@ (8003320 <HAL_DMA_IRQHandler+0x1b0>)
 8003182:	fba2 2303 	umull	r2, r3, r2, r3
 8003186:	0a9b      	lsrs	r3, r3, #10
 8003188:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800318e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003194:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a5f      	ldr	r2, [pc, #380]	@ (8003324 <HAL_DMA_IRQHandler+0x1b4>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d04a      	beq.n	8003242 <HAL_DMA_IRQHandler+0xd2>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a5d      	ldr	r2, [pc, #372]	@ (8003328 <HAL_DMA_IRQHandler+0x1b8>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d045      	beq.n	8003242 <HAL_DMA_IRQHandler+0xd2>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a5c      	ldr	r2, [pc, #368]	@ (800332c <HAL_DMA_IRQHandler+0x1bc>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d040      	beq.n	8003242 <HAL_DMA_IRQHandler+0xd2>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a5a      	ldr	r2, [pc, #360]	@ (8003330 <HAL_DMA_IRQHandler+0x1c0>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d03b      	beq.n	8003242 <HAL_DMA_IRQHandler+0xd2>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a59      	ldr	r2, [pc, #356]	@ (8003334 <HAL_DMA_IRQHandler+0x1c4>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d036      	beq.n	8003242 <HAL_DMA_IRQHandler+0xd2>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a57      	ldr	r2, [pc, #348]	@ (8003338 <HAL_DMA_IRQHandler+0x1c8>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d031      	beq.n	8003242 <HAL_DMA_IRQHandler+0xd2>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a56      	ldr	r2, [pc, #344]	@ (800333c <HAL_DMA_IRQHandler+0x1cc>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d02c      	beq.n	8003242 <HAL_DMA_IRQHandler+0xd2>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a54      	ldr	r2, [pc, #336]	@ (8003340 <HAL_DMA_IRQHandler+0x1d0>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d027      	beq.n	8003242 <HAL_DMA_IRQHandler+0xd2>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a53      	ldr	r2, [pc, #332]	@ (8003344 <HAL_DMA_IRQHandler+0x1d4>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d022      	beq.n	8003242 <HAL_DMA_IRQHandler+0xd2>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a51      	ldr	r2, [pc, #324]	@ (8003348 <HAL_DMA_IRQHandler+0x1d8>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d01d      	beq.n	8003242 <HAL_DMA_IRQHandler+0xd2>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a50      	ldr	r2, [pc, #320]	@ (800334c <HAL_DMA_IRQHandler+0x1dc>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d018      	beq.n	8003242 <HAL_DMA_IRQHandler+0xd2>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a4e      	ldr	r2, [pc, #312]	@ (8003350 <HAL_DMA_IRQHandler+0x1e0>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d013      	beq.n	8003242 <HAL_DMA_IRQHandler+0xd2>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a4d      	ldr	r2, [pc, #308]	@ (8003354 <HAL_DMA_IRQHandler+0x1e4>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d00e      	beq.n	8003242 <HAL_DMA_IRQHandler+0xd2>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a4b      	ldr	r2, [pc, #300]	@ (8003358 <HAL_DMA_IRQHandler+0x1e8>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d009      	beq.n	8003242 <HAL_DMA_IRQHandler+0xd2>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a4a      	ldr	r2, [pc, #296]	@ (800335c <HAL_DMA_IRQHandler+0x1ec>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d004      	beq.n	8003242 <HAL_DMA_IRQHandler+0xd2>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a48      	ldr	r2, [pc, #288]	@ (8003360 <HAL_DMA_IRQHandler+0x1f0>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d101      	bne.n	8003246 <HAL_DMA_IRQHandler+0xd6>
 8003242:	2301      	movs	r3, #1
 8003244:	e000      	b.n	8003248 <HAL_DMA_IRQHandler+0xd8>
 8003246:	2300      	movs	r3, #0
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 842b 	beq.w	8003aa4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003252:	f003 031f 	and.w	r3, r3, #31
 8003256:	2208      	movs	r2, #8
 8003258:	409a      	lsls	r2, r3
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	4013      	ands	r3, r2
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 80a2 	beq.w	80033a8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a2e      	ldr	r2, [pc, #184]	@ (8003324 <HAL_DMA_IRQHandler+0x1b4>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d04a      	beq.n	8003304 <HAL_DMA_IRQHandler+0x194>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a2d      	ldr	r2, [pc, #180]	@ (8003328 <HAL_DMA_IRQHandler+0x1b8>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d045      	beq.n	8003304 <HAL_DMA_IRQHandler+0x194>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a2b      	ldr	r2, [pc, #172]	@ (800332c <HAL_DMA_IRQHandler+0x1bc>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d040      	beq.n	8003304 <HAL_DMA_IRQHandler+0x194>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a2a      	ldr	r2, [pc, #168]	@ (8003330 <HAL_DMA_IRQHandler+0x1c0>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d03b      	beq.n	8003304 <HAL_DMA_IRQHandler+0x194>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a28      	ldr	r2, [pc, #160]	@ (8003334 <HAL_DMA_IRQHandler+0x1c4>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d036      	beq.n	8003304 <HAL_DMA_IRQHandler+0x194>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a27      	ldr	r2, [pc, #156]	@ (8003338 <HAL_DMA_IRQHandler+0x1c8>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d031      	beq.n	8003304 <HAL_DMA_IRQHandler+0x194>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a25      	ldr	r2, [pc, #148]	@ (800333c <HAL_DMA_IRQHandler+0x1cc>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d02c      	beq.n	8003304 <HAL_DMA_IRQHandler+0x194>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a24      	ldr	r2, [pc, #144]	@ (8003340 <HAL_DMA_IRQHandler+0x1d0>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d027      	beq.n	8003304 <HAL_DMA_IRQHandler+0x194>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a22      	ldr	r2, [pc, #136]	@ (8003344 <HAL_DMA_IRQHandler+0x1d4>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d022      	beq.n	8003304 <HAL_DMA_IRQHandler+0x194>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a21      	ldr	r2, [pc, #132]	@ (8003348 <HAL_DMA_IRQHandler+0x1d8>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d01d      	beq.n	8003304 <HAL_DMA_IRQHandler+0x194>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a1f      	ldr	r2, [pc, #124]	@ (800334c <HAL_DMA_IRQHandler+0x1dc>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d018      	beq.n	8003304 <HAL_DMA_IRQHandler+0x194>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a1e      	ldr	r2, [pc, #120]	@ (8003350 <HAL_DMA_IRQHandler+0x1e0>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d013      	beq.n	8003304 <HAL_DMA_IRQHandler+0x194>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a1c      	ldr	r2, [pc, #112]	@ (8003354 <HAL_DMA_IRQHandler+0x1e4>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d00e      	beq.n	8003304 <HAL_DMA_IRQHandler+0x194>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a1b      	ldr	r2, [pc, #108]	@ (8003358 <HAL_DMA_IRQHandler+0x1e8>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d009      	beq.n	8003304 <HAL_DMA_IRQHandler+0x194>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a19      	ldr	r2, [pc, #100]	@ (800335c <HAL_DMA_IRQHandler+0x1ec>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d004      	beq.n	8003304 <HAL_DMA_IRQHandler+0x194>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a18      	ldr	r2, [pc, #96]	@ (8003360 <HAL_DMA_IRQHandler+0x1f0>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d12f      	bne.n	8003364 <HAL_DMA_IRQHandler+0x1f4>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0304 	and.w	r3, r3, #4
 800330e:	2b00      	cmp	r3, #0
 8003310:	bf14      	ite	ne
 8003312:	2301      	movne	r3, #1
 8003314:	2300      	moveq	r3, #0
 8003316:	b2db      	uxtb	r3, r3
 8003318:	e02e      	b.n	8003378 <HAL_DMA_IRQHandler+0x208>
 800331a:	bf00      	nop
 800331c:	24000004 	.word	0x24000004
 8003320:	1b4e81b5 	.word	0x1b4e81b5
 8003324:	40020010 	.word	0x40020010
 8003328:	40020028 	.word	0x40020028
 800332c:	40020040 	.word	0x40020040
 8003330:	40020058 	.word	0x40020058
 8003334:	40020070 	.word	0x40020070
 8003338:	40020088 	.word	0x40020088
 800333c:	400200a0 	.word	0x400200a0
 8003340:	400200b8 	.word	0x400200b8
 8003344:	40020410 	.word	0x40020410
 8003348:	40020428 	.word	0x40020428
 800334c:	40020440 	.word	0x40020440
 8003350:	40020458 	.word	0x40020458
 8003354:	40020470 	.word	0x40020470
 8003358:	40020488 	.word	0x40020488
 800335c:	400204a0 	.word	0x400204a0
 8003360:	400204b8 	.word	0x400204b8
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0308 	and.w	r3, r3, #8
 800336e:	2b00      	cmp	r3, #0
 8003370:	bf14      	ite	ne
 8003372:	2301      	movne	r3, #1
 8003374:	2300      	moveq	r3, #0
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b00      	cmp	r3, #0
 800337a:	d015      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0204 	bic.w	r2, r2, #4
 800338a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003390:	f003 031f 	and.w	r3, r3, #31
 8003394:	2208      	movs	r2, #8
 8003396:	409a      	lsls	r2, r3
 8003398:	6a3b      	ldr	r3, [r7, #32]
 800339a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033a0:	f043 0201 	orr.w	r2, r3, #1
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ac:	f003 031f 	and.w	r3, r3, #31
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	fa22 f303 	lsr.w	r3, r2, r3
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d06e      	beq.n	800349c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a69      	ldr	r2, [pc, #420]	@ (8003568 <HAL_DMA_IRQHandler+0x3f8>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d04a      	beq.n	800345e <HAL_DMA_IRQHandler+0x2ee>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a67      	ldr	r2, [pc, #412]	@ (800356c <HAL_DMA_IRQHandler+0x3fc>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d045      	beq.n	800345e <HAL_DMA_IRQHandler+0x2ee>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a66      	ldr	r2, [pc, #408]	@ (8003570 <HAL_DMA_IRQHandler+0x400>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d040      	beq.n	800345e <HAL_DMA_IRQHandler+0x2ee>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a64      	ldr	r2, [pc, #400]	@ (8003574 <HAL_DMA_IRQHandler+0x404>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d03b      	beq.n	800345e <HAL_DMA_IRQHandler+0x2ee>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a63      	ldr	r2, [pc, #396]	@ (8003578 <HAL_DMA_IRQHandler+0x408>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d036      	beq.n	800345e <HAL_DMA_IRQHandler+0x2ee>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a61      	ldr	r2, [pc, #388]	@ (800357c <HAL_DMA_IRQHandler+0x40c>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d031      	beq.n	800345e <HAL_DMA_IRQHandler+0x2ee>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a60      	ldr	r2, [pc, #384]	@ (8003580 <HAL_DMA_IRQHandler+0x410>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d02c      	beq.n	800345e <HAL_DMA_IRQHandler+0x2ee>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a5e      	ldr	r2, [pc, #376]	@ (8003584 <HAL_DMA_IRQHandler+0x414>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d027      	beq.n	800345e <HAL_DMA_IRQHandler+0x2ee>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a5d      	ldr	r2, [pc, #372]	@ (8003588 <HAL_DMA_IRQHandler+0x418>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d022      	beq.n	800345e <HAL_DMA_IRQHandler+0x2ee>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a5b      	ldr	r2, [pc, #364]	@ (800358c <HAL_DMA_IRQHandler+0x41c>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d01d      	beq.n	800345e <HAL_DMA_IRQHandler+0x2ee>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a5a      	ldr	r2, [pc, #360]	@ (8003590 <HAL_DMA_IRQHandler+0x420>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d018      	beq.n	800345e <HAL_DMA_IRQHandler+0x2ee>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a58      	ldr	r2, [pc, #352]	@ (8003594 <HAL_DMA_IRQHandler+0x424>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d013      	beq.n	800345e <HAL_DMA_IRQHandler+0x2ee>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a57      	ldr	r2, [pc, #348]	@ (8003598 <HAL_DMA_IRQHandler+0x428>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d00e      	beq.n	800345e <HAL_DMA_IRQHandler+0x2ee>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a55      	ldr	r2, [pc, #340]	@ (800359c <HAL_DMA_IRQHandler+0x42c>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d009      	beq.n	800345e <HAL_DMA_IRQHandler+0x2ee>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a54      	ldr	r2, [pc, #336]	@ (80035a0 <HAL_DMA_IRQHandler+0x430>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d004      	beq.n	800345e <HAL_DMA_IRQHandler+0x2ee>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a52      	ldr	r2, [pc, #328]	@ (80035a4 <HAL_DMA_IRQHandler+0x434>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d10a      	bne.n	8003474 <HAL_DMA_IRQHandler+0x304>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003468:	2b00      	cmp	r3, #0
 800346a:	bf14      	ite	ne
 800346c:	2301      	movne	r3, #1
 800346e:	2300      	moveq	r3, #0
 8003470:	b2db      	uxtb	r3, r3
 8003472:	e003      	b.n	800347c <HAL_DMA_IRQHandler+0x30c>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2300      	movs	r3, #0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00d      	beq.n	800349c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003484:	f003 031f 	and.w	r3, r3, #31
 8003488:	2201      	movs	r2, #1
 800348a:	409a      	lsls	r2, r3
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003494:	f043 0202 	orr.w	r2, r3, #2
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a0:	f003 031f 	and.w	r3, r3, #31
 80034a4:	2204      	movs	r2, #4
 80034a6:	409a      	lsls	r2, r3
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 808f 	beq.w	80035d0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a2c      	ldr	r2, [pc, #176]	@ (8003568 <HAL_DMA_IRQHandler+0x3f8>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d04a      	beq.n	8003552 <HAL_DMA_IRQHandler+0x3e2>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a2a      	ldr	r2, [pc, #168]	@ (800356c <HAL_DMA_IRQHandler+0x3fc>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d045      	beq.n	8003552 <HAL_DMA_IRQHandler+0x3e2>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a29      	ldr	r2, [pc, #164]	@ (8003570 <HAL_DMA_IRQHandler+0x400>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d040      	beq.n	8003552 <HAL_DMA_IRQHandler+0x3e2>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a27      	ldr	r2, [pc, #156]	@ (8003574 <HAL_DMA_IRQHandler+0x404>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d03b      	beq.n	8003552 <HAL_DMA_IRQHandler+0x3e2>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a26      	ldr	r2, [pc, #152]	@ (8003578 <HAL_DMA_IRQHandler+0x408>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d036      	beq.n	8003552 <HAL_DMA_IRQHandler+0x3e2>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a24      	ldr	r2, [pc, #144]	@ (800357c <HAL_DMA_IRQHandler+0x40c>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d031      	beq.n	8003552 <HAL_DMA_IRQHandler+0x3e2>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a23      	ldr	r2, [pc, #140]	@ (8003580 <HAL_DMA_IRQHandler+0x410>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d02c      	beq.n	8003552 <HAL_DMA_IRQHandler+0x3e2>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a21      	ldr	r2, [pc, #132]	@ (8003584 <HAL_DMA_IRQHandler+0x414>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d027      	beq.n	8003552 <HAL_DMA_IRQHandler+0x3e2>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a20      	ldr	r2, [pc, #128]	@ (8003588 <HAL_DMA_IRQHandler+0x418>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d022      	beq.n	8003552 <HAL_DMA_IRQHandler+0x3e2>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a1e      	ldr	r2, [pc, #120]	@ (800358c <HAL_DMA_IRQHandler+0x41c>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d01d      	beq.n	8003552 <HAL_DMA_IRQHandler+0x3e2>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a1d      	ldr	r2, [pc, #116]	@ (8003590 <HAL_DMA_IRQHandler+0x420>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d018      	beq.n	8003552 <HAL_DMA_IRQHandler+0x3e2>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a1b      	ldr	r2, [pc, #108]	@ (8003594 <HAL_DMA_IRQHandler+0x424>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d013      	beq.n	8003552 <HAL_DMA_IRQHandler+0x3e2>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a1a      	ldr	r2, [pc, #104]	@ (8003598 <HAL_DMA_IRQHandler+0x428>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d00e      	beq.n	8003552 <HAL_DMA_IRQHandler+0x3e2>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a18      	ldr	r2, [pc, #96]	@ (800359c <HAL_DMA_IRQHandler+0x42c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d009      	beq.n	8003552 <HAL_DMA_IRQHandler+0x3e2>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a17      	ldr	r2, [pc, #92]	@ (80035a0 <HAL_DMA_IRQHandler+0x430>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d004      	beq.n	8003552 <HAL_DMA_IRQHandler+0x3e2>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a15      	ldr	r2, [pc, #84]	@ (80035a4 <HAL_DMA_IRQHandler+0x434>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d12a      	bne.n	80035a8 <HAL_DMA_IRQHandler+0x438>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	bf14      	ite	ne
 8003560:	2301      	movne	r3, #1
 8003562:	2300      	moveq	r3, #0
 8003564:	b2db      	uxtb	r3, r3
 8003566:	e023      	b.n	80035b0 <HAL_DMA_IRQHandler+0x440>
 8003568:	40020010 	.word	0x40020010
 800356c:	40020028 	.word	0x40020028
 8003570:	40020040 	.word	0x40020040
 8003574:	40020058 	.word	0x40020058
 8003578:	40020070 	.word	0x40020070
 800357c:	40020088 	.word	0x40020088
 8003580:	400200a0 	.word	0x400200a0
 8003584:	400200b8 	.word	0x400200b8
 8003588:	40020410 	.word	0x40020410
 800358c:	40020428 	.word	0x40020428
 8003590:	40020440 	.word	0x40020440
 8003594:	40020458 	.word	0x40020458
 8003598:	40020470 	.word	0x40020470
 800359c:	40020488 	.word	0x40020488
 80035a0:	400204a0 	.word	0x400204a0
 80035a4:	400204b8 	.word	0x400204b8
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2300      	movs	r3, #0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00d      	beq.n	80035d0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b8:	f003 031f 	and.w	r3, r3, #31
 80035bc:	2204      	movs	r2, #4
 80035be:	409a      	lsls	r2, r3
 80035c0:	6a3b      	ldr	r3, [r7, #32]
 80035c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035c8:	f043 0204 	orr.w	r2, r3, #4
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035d4:	f003 031f 	and.w	r3, r3, #31
 80035d8:	2210      	movs	r2, #16
 80035da:	409a      	lsls	r2, r3
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	4013      	ands	r3, r2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f000 80a6 	beq.w	8003732 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a85      	ldr	r2, [pc, #532]	@ (8003800 <HAL_DMA_IRQHandler+0x690>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d04a      	beq.n	8003686 <HAL_DMA_IRQHandler+0x516>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a83      	ldr	r2, [pc, #524]	@ (8003804 <HAL_DMA_IRQHandler+0x694>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d045      	beq.n	8003686 <HAL_DMA_IRQHandler+0x516>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a82      	ldr	r2, [pc, #520]	@ (8003808 <HAL_DMA_IRQHandler+0x698>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d040      	beq.n	8003686 <HAL_DMA_IRQHandler+0x516>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a80      	ldr	r2, [pc, #512]	@ (800380c <HAL_DMA_IRQHandler+0x69c>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d03b      	beq.n	8003686 <HAL_DMA_IRQHandler+0x516>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a7f      	ldr	r2, [pc, #508]	@ (8003810 <HAL_DMA_IRQHandler+0x6a0>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d036      	beq.n	8003686 <HAL_DMA_IRQHandler+0x516>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a7d      	ldr	r2, [pc, #500]	@ (8003814 <HAL_DMA_IRQHandler+0x6a4>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d031      	beq.n	8003686 <HAL_DMA_IRQHandler+0x516>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a7c      	ldr	r2, [pc, #496]	@ (8003818 <HAL_DMA_IRQHandler+0x6a8>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d02c      	beq.n	8003686 <HAL_DMA_IRQHandler+0x516>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a7a      	ldr	r2, [pc, #488]	@ (800381c <HAL_DMA_IRQHandler+0x6ac>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d027      	beq.n	8003686 <HAL_DMA_IRQHandler+0x516>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a79      	ldr	r2, [pc, #484]	@ (8003820 <HAL_DMA_IRQHandler+0x6b0>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d022      	beq.n	8003686 <HAL_DMA_IRQHandler+0x516>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a77      	ldr	r2, [pc, #476]	@ (8003824 <HAL_DMA_IRQHandler+0x6b4>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d01d      	beq.n	8003686 <HAL_DMA_IRQHandler+0x516>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a76      	ldr	r2, [pc, #472]	@ (8003828 <HAL_DMA_IRQHandler+0x6b8>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d018      	beq.n	8003686 <HAL_DMA_IRQHandler+0x516>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a74      	ldr	r2, [pc, #464]	@ (800382c <HAL_DMA_IRQHandler+0x6bc>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d013      	beq.n	8003686 <HAL_DMA_IRQHandler+0x516>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a73      	ldr	r2, [pc, #460]	@ (8003830 <HAL_DMA_IRQHandler+0x6c0>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d00e      	beq.n	8003686 <HAL_DMA_IRQHandler+0x516>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a71      	ldr	r2, [pc, #452]	@ (8003834 <HAL_DMA_IRQHandler+0x6c4>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d009      	beq.n	8003686 <HAL_DMA_IRQHandler+0x516>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a70      	ldr	r2, [pc, #448]	@ (8003838 <HAL_DMA_IRQHandler+0x6c8>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d004      	beq.n	8003686 <HAL_DMA_IRQHandler+0x516>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a6e      	ldr	r2, [pc, #440]	@ (800383c <HAL_DMA_IRQHandler+0x6cc>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d10a      	bne.n	800369c <HAL_DMA_IRQHandler+0x52c>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0308 	and.w	r3, r3, #8
 8003690:	2b00      	cmp	r3, #0
 8003692:	bf14      	ite	ne
 8003694:	2301      	movne	r3, #1
 8003696:	2300      	moveq	r3, #0
 8003698:	b2db      	uxtb	r3, r3
 800369a:	e009      	b.n	80036b0 <HAL_DMA_IRQHandler+0x540>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0304 	and.w	r3, r3, #4
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	bf14      	ite	ne
 80036aa:	2301      	movne	r3, #1
 80036ac:	2300      	moveq	r3, #0
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d03e      	beq.n	8003732 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b8:	f003 031f 	and.w	r3, r3, #31
 80036bc:	2210      	movs	r2, #16
 80036be:	409a      	lsls	r2, r3
 80036c0:	6a3b      	ldr	r3, [r7, #32]
 80036c2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d018      	beq.n	8003704 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d108      	bne.n	80036f2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d024      	beq.n	8003732 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	4798      	blx	r3
 80036f0:	e01f      	b.n	8003732 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d01b      	beq.n	8003732 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	4798      	blx	r3
 8003702:	e016      	b.n	8003732 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800370e:	2b00      	cmp	r3, #0
 8003710:	d107      	bne.n	8003722 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0208 	bic.w	r2, r2, #8
 8003720:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003736:	f003 031f 	and.w	r3, r3, #31
 800373a:	2220      	movs	r2, #32
 800373c:	409a      	lsls	r2, r3
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	4013      	ands	r3, r2
 8003742:	2b00      	cmp	r3, #0
 8003744:	f000 8110 	beq.w	8003968 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a2c      	ldr	r2, [pc, #176]	@ (8003800 <HAL_DMA_IRQHandler+0x690>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d04a      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x678>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a2b      	ldr	r2, [pc, #172]	@ (8003804 <HAL_DMA_IRQHandler+0x694>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d045      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x678>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a29      	ldr	r2, [pc, #164]	@ (8003808 <HAL_DMA_IRQHandler+0x698>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d040      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x678>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a28      	ldr	r2, [pc, #160]	@ (800380c <HAL_DMA_IRQHandler+0x69c>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d03b      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x678>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a26      	ldr	r2, [pc, #152]	@ (8003810 <HAL_DMA_IRQHandler+0x6a0>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d036      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x678>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a25      	ldr	r2, [pc, #148]	@ (8003814 <HAL_DMA_IRQHandler+0x6a4>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d031      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x678>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a23      	ldr	r2, [pc, #140]	@ (8003818 <HAL_DMA_IRQHandler+0x6a8>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d02c      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x678>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a22      	ldr	r2, [pc, #136]	@ (800381c <HAL_DMA_IRQHandler+0x6ac>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d027      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x678>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a20      	ldr	r2, [pc, #128]	@ (8003820 <HAL_DMA_IRQHandler+0x6b0>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d022      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x678>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a1f      	ldr	r2, [pc, #124]	@ (8003824 <HAL_DMA_IRQHandler+0x6b4>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d01d      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x678>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a1d      	ldr	r2, [pc, #116]	@ (8003828 <HAL_DMA_IRQHandler+0x6b8>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d018      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x678>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a1c      	ldr	r2, [pc, #112]	@ (800382c <HAL_DMA_IRQHandler+0x6bc>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d013      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x678>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a1a      	ldr	r2, [pc, #104]	@ (8003830 <HAL_DMA_IRQHandler+0x6c0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d00e      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x678>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a19      	ldr	r2, [pc, #100]	@ (8003834 <HAL_DMA_IRQHandler+0x6c4>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d009      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x678>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a17      	ldr	r2, [pc, #92]	@ (8003838 <HAL_DMA_IRQHandler+0x6c8>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d004      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x678>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a16      	ldr	r2, [pc, #88]	@ (800383c <HAL_DMA_IRQHandler+0x6cc>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d12b      	bne.n	8003840 <HAL_DMA_IRQHandler+0x6d0>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0310 	and.w	r3, r3, #16
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	bf14      	ite	ne
 80037f6:	2301      	movne	r3, #1
 80037f8:	2300      	moveq	r3, #0
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	e02a      	b.n	8003854 <HAL_DMA_IRQHandler+0x6e4>
 80037fe:	bf00      	nop
 8003800:	40020010 	.word	0x40020010
 8003804:	40020028 	.word	0x40020028
 8003808:	40020040 	.word	0x40020040
 800380c:	40020058 	.word	0x40020058
 8003810:	40020070 	.word	0x40020070
 8003814:	40020088 	.word	0x40020088
 8003818:	400200a0 	.word	0x400200a0
 800381c:	400200b8 	.word	0x400200b8
 8003820:	40020410 	.word	0x40020410
 8003824:	40020428 	.word	0x40020428
 8003828:	40020440 	.word	0x40020440
 800382c:	40020458 	.word	0x40020458
 8003830:	40020470 	.word	0x40020470
 8003834:	40020488 	.word	0x40020488
 8003838:	400204a0 	.word	0x400204a0
 800383c:	400204b8 	.word	0x400204b8
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	bf14      	ite	ne
 800384e:	2301      	movne	r3, #1
 8003850:	2300      	moveq	r3, #0
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b00      	cmp	r3, #0
 8003856:	f000 8087 	beq.w	8003968 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800385e:	f003 031f 	and.w	r3, r3, #31
 8003862:	2220      	movs	r2, #32
 8003864:	409a      	lsls	r2, r3
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b04      	cmp	r3, #4
 8003874:	d139      	bne.n	80038ea <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 0216 	bic.w	r2, r2, #22
 8003884:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695a      	ldr	r2, [r3, #20]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003894:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389a:	2b00      	cmp	r3, #0
 800389c:	d103      	bne.n	80038a6 <HAL_DMA_IRQHandler+0x736>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d007      	beq.n	80038b6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 0208 	bic.w	r2, r2, #8
 80038b4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ba:	f003 031f 	and.w	r3, r3, #31
 80038be:	223f      	movs	r2, #63	@ 0x3f
 80038c0:	409a      	lsls	r2, r3
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 834a 	beq.w	8003f74 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	4798      	blx	r3
          }
          return;
 80038e8:	e344      	b.n	8003f74 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d018      	beq.n	800392a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d108      	bne.n	8003918 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800390a:	2b00      	cmp	r3, #0
 800390c:	d02c      	beq.n	8003968 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	4798      	blx	r3
 8003916:	e027      	b.n	8003968 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800391c:	2b00      	cmp	r3, #0
 800391e:	d023      	beq.n	8003968 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	4798      	blx	r3
 8003928:	e01e      	b.n	8003968 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10f      	bne.n	8003958 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0210 	bic.w	r2, r2, #16
 8003946:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800395c:	2b00      	cmp	r3, #0
 800395e:	d003      	beq.n	8003968 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 8306 	beq.w	8003f7e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	f000 8088 	beq.w	8003a90 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2204      	movs	r2, #4
 8003984:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a7a      	ldr	r2, [pc, #488]	@ (8003b78 <HAL_DMA_IRQHandler+0xa08>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d04a      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x8b8>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a79      	ldr	r2, [pc, #484]	@ (8003b7c <HAL_DMA_IRQHandler+0xa0c>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d045      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x8b8>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a77      	ldr	r2, [pc, #476]	@ (8003b80 <HAL_DMA_IRQHandler+0xa10>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d040      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x8b8>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a76      	ldr	r2, [pc, #472]	@ (8003b84 <HAL_DMA_IRQHandler+0xa14>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d03b      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x8b8>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a74      	ldr	r2, [pc, #464]	@ (8003b88 <HAL_DMA_IRQHandler+0xa18>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d036      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x8b8>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a73      	ldr	r2, [pc, #460]	@ (8003b8c <HAL_DMA_IRQHandler+0xa1c>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d031      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x8b8>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a71      	ldr	r2, [pc, #452]	@ (8003b90 <HAL_DMA_IRQHandler+0xa20>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d02c      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x8b8>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a70      	ldr	r2, [pc, #448]	@ (8003b94 <HAL_DMA_IRQHandler+0xa24>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d027      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x8b8>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a6e      	ldr	r2, [pc, #440]	@ (8003b98 <HAL_DMA_IRQHandler+0xa28>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d022      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x8b8>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a6d      	ldr	r2, [pc, #436]	@ (8003b9c <HAL_DMA_IRQHandler+0xa2c>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d01d      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x8b8>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a6b      	ldr	r2, [pc, #428]	@ (8003ba0 <HAL_DMA_IRQHandler+0xa30>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d018      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x8b8>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a6a      	ldr	r2, [pc, #424]	@ (8003ba4 <HAL_DMA_IRQHandler+0xa34>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d013      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x8b8>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a68      	ldr	r2, [pc, #416]	@ (8003ba8 <HAL_DMA_IRQHandler+0xa38>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d00e      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x8b8>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a67      	ldr	r2, [pc, #412]	@ (8003bac <HAL_DMA_IRQHandler+0xa3c>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d009      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x8b8>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a65      	ldr	r2, [pc, #404]	@ (8003bb0 <HAL_DMA_IRQHandler+0xa40>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d004      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x8b8>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a64      	ldr	r2, [pc, #400]	@ (8003bb4 <HAL_DMA_IRQHandler+0xa44>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d108      	bne.n	8003a3a <HAL_DMA_IRQHandler+0x8ca>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0201 	bic.w	r2, r2, #1
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	e007      	b.n	8003a4a <HAL_DMA_IRQHandler+0x8da>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 0201 	bic.w	r2, r2, #1
 8003a48:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	60fb      	str	r3, [r7, #12]
 8003a50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d307      	bcc.n	8003a66 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1f2      	bne.n	8003a4a <HAL_DMA_IRQHandler+0x8da>
 8003a64:	e000      	b.n	8003a68 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003a66:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d004      	beq.n	8003a80 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2203      	movs	r2, #3
 8003a7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003a7e:	e003      	b.n	8003a88 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 8272 	beq.w	8003f7e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	4798      	blx	r3
 8003aa2:	e26c      	b.n	8003f7e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a43      	ldr	r2, [pc, #268]	@ (8003bb8 <HAL_DMA_IRQHandler+0xa48>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d022      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x984>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a42      	ldr	r2, [pc, #264]	@ (8003bbc <HAL_DMA_IRQHandler+0xa4c>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d01d      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x984>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a40      	ldr	r2, [pc, #256]	@ (8003bc0 <HAL_DMA_IRQHandler+0xa50>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d018      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x984>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a3f      	ldr	r2, [pc, #252]	@ (8003bc4 <HAL_DMA_IRQHandler+0xa54>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d013      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x984>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a3d      	ldr	r2, [pc, #244]	@ (8003bc8 <HAL_DMA_IRQHandler+0xa58>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d00e      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x984>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a3c      	ldr	r2, [pc, #240]	@ (8003bcc <HAL_DMA_IRQHandler+0xa5c>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d009      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x984>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a3a      	ldr	r2, [pc, #232]	@ (8003bd0 <HAL_DMA_IRQHandler+0xa60>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d004      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x984>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a39      	ldr	r2, [pc, #228]	@ (8003bd4 <HAL_DMA_IRQHandler+0xa64>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d101      	bne.n	8003af8 <HAL_DMA_IRQHandler+0x988>
 8003af4:	2301      	movs	r3, #1
 8003af6:	e000      	b.n	8003afa <HAL_DMA_IRQHandler+0x98a>
 8003af8:	2300      	movs	r3, #0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f000 823f 	beq.w	8003f7e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b0c:	f003 031f 	and.w	r3, r3, #31
 8003b10:	2204      	movs	r2, #4
 8003b12:	409a      	lsls	r2, r3
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	4013      	ands	r3, r2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 80cd 	beq.w	8003cb8 <HAL_DMA_IRQHandler+0xb48>
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 80c7 	beq.w	8003cb8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b2e:	f003 031f 	and.w	r3, r3, #31
 8003b32:	2204      	movs	r2, #4
 8003b34:	409a      	lsls	r2, r3
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d049      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d109      	bne.n	8003b62 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f000 8210 	beq.w	8003f78 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b60:	e20a      	b.n	8003f78 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 8206 	beq.w	8003f78 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b74:	e200      	b.n	8003f78 <HAL_DMA_IRQHandler+0xe08>
 8003b76:	bf00      	nop
 8003b78:	40020010 	.word	0x40020010
 8003b7c:	40020028 	.word	0x40020028
 8003b80:	40020040 	.word	0x40020040
 8003b84:	40020058 	.word	0x40020058
 8003b88:	40020070 	.word	0x40020070
 8003b8c:	40020088 	.word	0x40020088
 8003b90:	400200a0 	.word	0x400200a0
 8003b94:	400200b8 	.word	0x400200b8
 8003b98:	40020410 	.word	0x40020410
 8003b9c:	40020428 	.word	0x40020428
 8003ba0:	40020440 	.word	0x40020440
 8003ba4:	40020458 	.word	0x40020458
 8003ba8:	40020470 	.word	0x40020470
 8003bac:	40020488 	.word	0x40020488
 8003bb0:	400204a0 	.word	0x400204a0
 8003bb4:	400204b8 	.word	0x400204b8
 8003bb8:	58025408 	.word	0x58025408
 8003bbc:	5802541c 	.word	0x5802541c
 8003bc0:	58025430 	.word	0x58025430
 8003bc4:	58025444 	.word	0x58025444
 8003bc8:	58025458 	.word	0x58025458
 8003bcc:	5802546c 	.word	0x5802546c
 8003bd0:	58025480 	.word	0x58025480
 8003bd4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	f003 0320 	and.w	r3, r3, #32
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d160      	bne.n	8003ca4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a7f      	ldr	r2, [pc, #508]	@ (8003de4 <HAL_DMA_IRQHandler+0xc74>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d04a      	beq.n	8003c82 <HAL_DMA_IRQHandler+0xb12>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a7d      	ldr	r2, [pc, #500]	@ (8003de8 <HAL_DMA_IRQHandler+0xc78>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d045      	beq.n	8003c82 <HAL_DMA_IRQHandler+0xb12>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a7c      	ldr	r2, [pc, #496]	@ (8003dec <HAL_DMA_IRQHandler+0xc7c>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d040      	beq.n	8003c82 <HAL_DMA_IRQHandler+0xb12>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a7a      	ldr	r2, [pc, #488]	@ (8003df0 <HAL_DMA_IRQHandler+0xc80>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d03b      	beq.n	8003c82 <HAL_DMA_IRQHandler+0xb12>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a79      	ldr	r2, [pc, #484]	@ (8003df4 <HAL_DMA_IRQHandler+0xc84>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d036      	beq.n	8003c82 <HAL_DMA_IRQHandler+0xb12>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a77      	ldr	r2, [pc, #476]	@ (8003df8 <HAL_DMA_IRQHandler+0xc88>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d031      	beq.n	8003c82 <HAL_DMA_IRQHandler+0xb12>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a76      	ldr	r2, [pc, #472]	@ (8003dfc <HAL_DMA_IRQHandler+0xc8c>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d02c      	beq.n	8003c82 <HAL_DMA_IRQHandler+0xb12>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a74      	ldr	r2, [pc, #464]	@ (8003e00 <HAL_DMA_IRQHandler+0xc90>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d027      	beq.n	8003c82 <HAL_DMA_IRQHandler+0xb12>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a73      	ldr	r2, [pc, #460]	@ (8003e04 <HAL_DMA_IRQHandler+0xc94>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d022      	beq.n	8003c82 <HAL_DMA_IRQHandler+0xb12>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a71      	ldr	r2, [pc, #452]	@ (8003e08 <HAL_DMA_IRQHandler+0xc98>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d01d      	beq.n	8003c82 <HAL_DMA_IRQHandler+0xb12>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a70      	ldr	r2, [pc, #448]	@ (8003e0c <HAL_DMA_IRQHandler+0xc9c>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d018      	beq.n	8003c82 <HAL_DMA_IRQHandler+0xb12>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a6e      	ldr	r2, [pc, #440]	@ (8003e10 <HAL_DMA_IRQHandler+0xca0>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d013      	beq.n	8003c82 <HAL_DMA_IRQHandler+0xb12>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a6d      	ldr	r2, [pc, #436]	@ (8003e14 <HAL_DMA_IRQHandler+0xca4>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d00e      	beq.n	8003c82 <HAL_DMA_IRQHandler+0xb12>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a6b      	ldr	r2, [pc, #428]	@ (8003e18 <HAL_DMA_IRQHandler+0xca8>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d009      	beq.n	8003c82 <HAL_DMA_IRQHandler+0xb12>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a6a      	ldr	r2, [pc, #424]	@ (8003e1c <HAL_DMA_IRQHandler+0xcac>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d004      	beq.n	8003c82 <HAL_DMA_IRQHandler+0xb12>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a68      	ldr	r2, [pc, #416]	@ (8003e20 <HAL_DMA_IRQHandler+0xcb0>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d108      	bne.n	8003c94 <HAL_DMA_IRQHandler+0xb24>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 0208 	bic.w	r2, r2, #8
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	e007      	b.n	8003ca4 <HAL_DMA_IRQHandler+0xb34>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0204 	bic.w	r2, r2, #4
 8003ca2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 8165 	beq.w	8003f78 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cb6:	e15f      	b.n	8003f78 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cbc:	f003 031f 	and.w	r3, r3, #31
 8003cc0:	2202      	movs	r2, #2
 8003cc2:	409a      	lsls	r2, r3
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 80c5 	beq.w	8003e58 <HAL_DMA_IRQHandler+0xce8>
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 80bf 	beq.w	8003e58 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cde:	f003 031f 	and.w	r3, r3, #31
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	409a      	lsls	r2, r3
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d018      	beq.n	8003d26 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d109      	bne.n	8003d12 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 813a 	beq.w	8003f7c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d10:	e134      	b.n	8003f7c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 8130 	beq.w	8003f7c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d24:	e12a      	b.n	8003f7c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	f003 0320 	and.w	r3, r3, #32
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f040 8089 	bne.w	8003e44 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a2b      	ldr	r2, [pc, #172]	@ (8003de4 <HAL_DMA_IRQHandler+0xc74>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d04a      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0xc62>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a29      	ldr	r2, [pc, #164]	@ (8003de8 <HAL_DMA_IRQHandler+0xc78>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d045      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0xc62>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a28      	ldr	r2, [pc, #160]	@ (8003dec <HAL_DMA_IRQHandler+0xc7c>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d040      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0xc62>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a26      	ldr	r2, [pc, #152]	@ (8003df0 <HAL_DMA_IRQHandler+0xc80>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d03b      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0xc62>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a25      	ldr	r2, [pc, #148]	@ (8003df4 <HAL_DMA_IRQHandler+0xc84>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d036      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0xc62>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a23      	ldr	r2, [pc, #140]	@ (8003df8 <HAL_DMA_IRQHandler+0xc88>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d031      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0xc62>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a22      	ldr	r2, [pc, #136]	@ (8003dfc <HAL_DMA_IRQHandler+0xc8c>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d02c      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0xc62>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a20      	ldr	r2, [pc, #128]	@ (8003e00 <HAL_DMA_IRQHandler+0xc90>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d027      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0xc62>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a1f      	ldr	r2, [pc, #124]	@ (8003e04 <HAL_DMA_IRQHandler+0xc94>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d022      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0xc62>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a1d      	ldr	r2, [pc, #116]	@ (8003e08 <HAL_DMA_IRQHandler+0xc98>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d01d      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0xc62>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a1c      	ldr	r2, [pc, #112]	@ (8003e0c <HAL_DMA_IRQHandler+0xc9c>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d018      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0xc62>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a1a      	ldr	r2, [pc, #104]	@ (8003e10 <HAL_DMA_IRQHandler+0xca0>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d013      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0xc62>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a19      	ldr	r2, [pc, #100]	@ (8003e14 <HAL_DMA_IRQHandler+0xca4>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d00e      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0xc62>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a17      	ldr	r2, [pc, #92]	@ (8003e18 <HAL_DMA_IRQHandler+0xca8>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d009      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0xc62>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a16      	ldr	r2, [pc, #88]	@ (8003e1c <HAL_DMA_IRQHandler+0xcac>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d004      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0xc62>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a14      	ldr	r2, [pc, #80]	@ (8003e20 <HAL_DMA_IRQHandler+0xcb0>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d128      	bne.n	8003e24 <HAL_DMA_IRQHandler+0xcb4>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 0214 	bic.w	r2, r2, #20
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	e027      	b.n	8003e34 <HAL_DMA_IRQHandler+0xcc4>
 8003de4:	40020010 	.word	0x40020010
 8003de8:	40020028 	.word	0x40020028
 8003dec:	40020040 	.word	0x40020040
 8003df0:	40020058 	.word	0x40020058
 8003df4:	40020070 	.word	0x40020070
 8003df8:	40020088 	.word	0x40020088
 8003dfc:	400200a0 	.word	0x400200a0
 8003e00:	400200b8 	.word	0x400200b8
 8003e04:	40020410 	.word	0x40020410
 8003e08:	40020428 	.word	0x40020428
 8003e0c:	40020440 	.word	0x40020440
 8003e10:	40020458 	.word	0x40020458
 8003e14:	40020470 	.word	0x40020470
 8003e18:	40020488 	.word	0x40020488
 8003e1c:	400204a0 	.word	0x400204a0
 8003e20:	400204b8 	.word	0x400204b8
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 020a 	bic.w	r2, r2, #10
 8003e32:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 8097 	beq.w	8003f7c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e56:	e091      	b.n	8003f7c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e5c:	f003 031f 	and.w	r3, r3, #31
 8003e60:	2208      	movs	r2, #8
 8003e62:	409a      	lsls	r2, r3
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	4013      	ands	r3, r2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f000 8088 	beq.w	8003f7e <HAL_DMA_IRQHandler+0xe0e>
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	f003 0308 	and.w	r3, r3, #8
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f000 8082 	beq.w	8003f7e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a41      	ldr	r2, [pc, #260]	@ (8003f84 <HAL_DMA_IRQHandler+0xe14>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d04a      	beq.n	8003f1a <HAL_DMA_IRQHandler+0xdaa>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a3f      	ldr	r2, [pc, #252]	@ (8003f88 <HAL_DMA_IRQHandler+0xe18>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d045      	beq.n	8003f1a <HAL_DMA_IRQHandler+0xdaa>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a3e      	ldr	r2, [pc, #248]	@ (8003f8c <HAL_DMA_IRQHandler+0xe1c>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d040      	beq.n	8003f1a <HAL_DMA_IRQHandler+0xdaa>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a3c      	ldr	r2, [pc, #240]	@ (8003f90 <HAL_DMA_IRQHandler+0xe20>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d03b      	beq.n	8003f1a <HAL_DMA_IRQHandler+0xdaa>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a3b      	ldr	r2, [pc, #236]	@ (8003f94 <HAL_DMA_IRQHandler+0xe24>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d036      	beq.n	8003f1a <HAL_DMA_IRQHandler+0xdaa>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a39      	ldr	r2, [pc, #228]	@ (8003f98 <HAL_DMA_IRQHandler+0xe28>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d031      	beq.n	8003f1a <HAL_DMA_IRQHandler+0xdaa>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a38      	ldr	r2, [pc, #224]	@ (8003f9c <HAL_DMA_IRQHandler+0xe2c>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d02c      	beq.n	8003f1a <HAL_DMA_IRQHandler+0xdaa>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a36      	ldr	r2, [pc, #216]	@ (8003fa0 <HAL_DMA_IRQHandler+0xe30>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d027      	beq.n	8003f1a <HAL_DMA_IRQHandler+0xdaa>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a35      	ldr	r2, [pc, #212]	@ (8003fa4 <HAL_DMA_IRQHandler+0xe34>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d022      	beq.n	8003f1a <HAL_DMA_IRQHandler+0xdaa>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a33      	ldr	r2, [pc, #204]	@ (8003fa8 <HAL_DMA_IRQHandler+0xe38>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d01d      	beq.n	8003f1a <HAL_DMA_IRQHandler+0xdaa>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a32      	ldr	r2, [pc, #200]	@ (8003fac <HAL_DMA_IRQHandler+0xe3c>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d018      	beq.n	8003f1a <HAL_DMA_IRQHandler+0xdaa>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a30      	ldr	r2, [pc, #192]	@ (8003fb0 <HAL_DMA_IRQHandler+0xe40>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d013      	beq.n	8003f1a <HAL_DMA_IRQHandler+0xdaa>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a2f      	ldr	r2, [pc, #188]	@ (8003fb4 <HAL_DMA_IRQHandler+0xe44>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d00e      	beq.n	8003f1a <HAL_DMA_IRQHandler+0xdaa>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a2d      	ldr	r2, [pc, #180]	@ (8003fb8 <HAL_DMA_IRQHandler+0xe48>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d009      	beq.n	8003f1a <HAL_DMA_IRQHandler+0xdaa>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a2c      	ldr	r2, [pc, #176]	@ (8003fbc <HAL_DMA_IRQHandler+0xe4c>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d004      	beq.n	8003f1a <HAL_DMA_IRQHandler+0xdaa>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a2a      	ldr	r2, [pc, #168]	@ (8003fc0 <HAL_DMA_IRQHandler+0xe50>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d108      	bne.n	8003f2c <HAL_DMA_IRQHandler+0xdbc>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 021c 	bic.w	r2, r2, #28
 8003f28:	601a      	str	r2, [r3, #0]
 8003f2a:	e007      	b.n	8003f3c <HAL_DMA_IRQHandler+0xdcc>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 020e 	bic.w	r2, r2, #14
 8003f3a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f40:	f003 031f 	and.w	r3, r3, #31
 8003f44:	2201      	movs	r2, #1
 8003f46:	409a      	lsls	r2, r3
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d009      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	4798      	blx	r3
 8003f72:	e004      	b.n	8003f7e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003f74:	bf00      	nop
 8003f76:	e002      	b.n	8003f7e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f78:	bf00      	nop
 8003f7a:	e000      	b.n	8003f7e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f7c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003f7e:	3728      	adds	r7, #40	@ 0x28
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	40020010 	.word	0x40020010
 8003f88:	40020028 	.word	0x40020028
 8003f8c:	40020040 	.word	0x40020040
 8003f90:	40020058 	.word	0x40020058
 8003f94:	40020070 	.word	0x40020070
 8003f98:	40020088 	.word	0x40020088
 8003f9c:	400200a0 	.word	0x400200a0
 8003fa0:	400200b8 	.word	0x400200b8
 8003fa4:	40020410 	.word	0x40020410
 8003fa8:	40020428 	.word	0x40020428
 8003fac:	40020440 	.word	0x40020440
 8003fb0:	40020458 	.word	0x40020458
 8003fb4:	40020470 	.word	0x40020470
 8003fb8:	40020488 	.word	0x40020488
 8003fbc:	400204a0 	.word	0x400204a0
 8003fc0:	400204b8 	.word	0x400204b8

08003fc4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b087      	sub	sp, #28
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
 8003fd0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fd6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fdc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a7f      	ldr	r2, [pc, #508]	@ (80041e0 <DMA_SetConfig+0x21c>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d072      	beq.n	80040ce <DMA_SetConfig+0x10a>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a7d      	ldr	r2, [pc, #500]	@ (80041e4 <DMA_SetConfig+0x220>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d06d      	beq.n	80040ce <DMA_SetConfig+0x10a>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a7c      	ldr	r2, [pc, #496]	@ (80041e8 <DMA_SetConfig+0x224>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d068      	beq.n	80040ce <DMA_SetConfig+0x10a>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a7a      	ldr	r2, [pc, #488]	@ (80041ec <DMA_SetConfig+0x228>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d063      	beq.n	80040ce <DMA_SetConfig+0x10a>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a79      	ldr	r2, [pc, #484]	@ (80041f0 <DMA_SetConfig+0x22c>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d05e      	beq.n	80040ce <DMA_SetConfig+0x10a>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a77      	ldr	r2, [pc, #476]	@ (80041f4 <DMA_SetConfig+0x230>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d059      	beq.n	80040ce <DMA_SetConfig+0x10a>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a76      	ldr	r2, [pc, #472]	@ (80041f8 <DMA_SetConfig+0x234>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d054      	beq.n	80040ce <DMA_SetConfig+0x10a>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a74      	ldr	r2, [pc, #464]	@ (80041fc <DMA_SetConfig+0x238>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d04f      	beq.n	80040ce <DMA_SetConfig+0x10a>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a73      	ldr	r2, [pc, #460]	@ (8004200 <DMA_SetConfig+0x23c>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d04a      	beq.n	80040ce <DMA_SetConfig+0x10a>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a71      	ldr	r2, [pc, #452]	@ (8004204 <DMA_SetConfig+0x240>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d045      	beq.n	80040ce <DMA_SetConfig+0x10a>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a70      	ldr	r2, [pc, #448]	@ (8004208 <DMA_SetConfig+0x244>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d040      	beq.n	80040ce <DMA_SetConfig+0x10a>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a6e      	ldr	r2, [pc, #440]	@ (800420c <DMA_SetConfig+0x248>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d03b      	beq.n	80040ce <DMA_SetConfig+0x10a>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a6d      	ldr	r2, [pc, #436]	@ (8004210 <DMA_SetConfig+0x24c>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d036      	beq.n	80040ce <DMA_SetConfig+0x10a>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a6b      	ldr	r2, [pc, #428]	@ (8004214 <DMA_SetConfig+0x250>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d031      	beq.n	80040ce <DMA_SetConfig+0x10a>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a6a      	ldr	r2, [pc, #424]	@ (8004218 <DMA_SetConfig+0x254>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d02c      	beq.n	80040ce <DMA_SetConfig+0x10a>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a68      	ldr	r2, [pc, #416]	@ (800421c <DMA_SetConfig+0x258>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d027      	beq.n	80040ce <DMA_SetConfig+0x10a>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a67      	ldr	r2, [pc, #412]	@ (8004220 <DMA_SetConfig+0x25c>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d022      	beq.n	80040ce <DMA_SetConfig+0x10a>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a65      	ldr	r2, [pc, #404]	@ (8004224 <DMA_SetConfig+0x260>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d01d      	beq.n	80040ce <DMA_SetConfig+0x10a>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a64      	ldr	r2, [pc, #400]	@ (8004228 <DMA_SetConfig+0x264>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d018      	beq.n	80040ce <DMA_SetConfig+0x10a>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a62      	ldr	r2, [pc, #392]	@ (800422c <DMA_SetConfig+0x268>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d013      	beq.n	80040ce <DMA_SetConfig+0x10a>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a61      	ldr	r2, [pc, #388]	@ (8004230 <DMA_SetConfig+0x26c>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d00e      	beq.n	80040ce <DMA_SetConfig+0x10a>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a5f      	ldr	r2, [pc, #380]	@ (8004234 <DMA_SetConfig+0x270>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d009      	beq.n	80040ce <DMA_SetConfig+0x10a>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a5e      	ldr	r2, [pc, #376]	@ (8004238 <DMA_SetConfig+0x274>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d004      	beq.n	80040ce <DMA_SetConfig+0x10a>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a5c      	ldr	r2, [pc, #368]	@ (800423c <DMA_SetConfig+0x278>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d101      	bne.n	80040d2 <DMA_SetConfig+0x10e>
 80040ce:	2301      	movs	r3, #1
 80040d0:	e000      	b.n	80040d4 <DMA_SetConfig+0x110>
 80040d2:	2300      	movs	r3, #0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00d      	beq.n	80040f4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80040e0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d004      	beq.n	80040f4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80040f2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a39      	ldr	r2, [pc, #228]	@ (80041e0 <DMA_SetConfig+0x21c>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d04a      	beq.n	8004194 <DMA_SetConfig+0x1d0>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a38      	ldr	r2, [pc, #224]	@ (80041e4 <DMA_SetConfig+0x220>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d045      	beq.n	8004194 <DMA_SetConfig+0x1d0>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a36      	ldr	r2, [pc, #216]	@ (80041e8 <DMA_SetConfig+0x224>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d040      	beq.n	8004194 <DMA_SetConfig+0x1d0>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a35      	ldr	r2, [pc, #212]	@ (80041ec <DMA_SetConfig+0x228>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d03b      	beq.n	8004194 <DMA_SetConfig+0x1d0>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a33      	ldr	r2, [pc, #204]	@ (80041f0 <DMA_SetConfig+0x22c>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d036      	beq.n	8004194 <DMA_SetConfig+0x1d0>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a32      	ldr	r2, [pc, #200]	@ (80041f4 <DMA_SetConfig+0x230>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d031      	beq.n	8004194 <DMA_SetConfig+0x1d0>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a30      	ldr	r2, [pc, #192]	@ (80041f8 <DMA_SetConfig+0x234>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d02c      	beq.n	8004194 <DMA_SetConfig+0x1d0>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a2f      	ldr	r2, [pc, #188]	@ (80041fc <DMA_SetConfig+0x238>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d027      	beq.n	8004194 <DMA_SetConfig+0x1d0>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a2d      	ldr	r2, [pc, #180]	@ (8004200 <DMA_SetConfig+0x23c>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d022      	beq.n	8004194 <DMA_SetConfig+0x1d0>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a2c      	ldr	r2, [pc, #176]	@ (8004204 <DMA_SetConfig+0x240>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d01d      	beq.n	8004194 <DMA_SetConfig+0x1d0>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a2a      	ldr	r2, [pc, #168]	@ (8004208 <DMA_SetConfig+0x244>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d018      	beq.n	8004194 <DMA_SetConfig+0x1d0>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a29      	ldr	r2, [pc, #164]	@ (800420c <DMA_SetConfig+0x248>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d013      	beq.n	8004194 <DMA_SetConfig+0x1d0>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a27      	ldr	r2, [pc, #156]	@ (8004210 <DMA_SetConfig+0x24c>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d00e      	beq.n	8004194 <DMA_SetConfig+0x1d0>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a26      	ldr	r2, [pc, #152]	@ (8004214 <DMA_SetConfig+0x250>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d009      	beq.n	8004194 <DMA_SetConfig+0x1d0>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a24      	ldr	r2, [pc, #144]	@ (8004218 <DMA_SetConfig+0x254>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d004      	beq.n	8004194 <DMA_SetConfig+0x1d0>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a23      	ldr	r2, [pc, #140]	@ (800421c <DMA_SetConfig+0x258>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d101      	bne.n	8004198 <DMA_SetConfig+0x1d4>
 8004194:	2301      	movs	r3, #1
 8004196:	e000      	b.n	800419a <DMA_SetConfig+0x1d6>
 8004198:	2300      	movs	r3, #0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d059      	beq.n	8004252 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041a2:	f003 031f 	and.w	r3, r3, #31
 80041a6:	223f      	movs	r2, #63	@ 0x3f
 80041a8:	409a      	lsls	r2, r3
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80041bc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	2b40      	cmp	r3, #64	@ 0x40
 80041cc:	d138      	bne.n	8004240 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68ba      	ldr	r2, [r7, #8]
 80041dc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80041de:	e086      	b.n	80042ee <DMA_SetConfig+0x32a>
 80041e0:	40020010 	.word	0x40020010
 80041e4:	40020028 	.word	0x40020028
 80041e8:	40020040 	.word	0x40020040
 80041ec:	40020058 	.word	0x40020058
 80041f0:	40020070 	.word	0x40020070
 80041f4:	40020088 	.word	0x40020088
 80041f8:	400200a0 	.word	0x400200a0
 80041fc:	400200b8 	.word	0x400200b8
 8004200:	40020410 	.word	0x40020410
 8004204:	40020428 	.word	0x40020428
 8004208:	40020440 	.word	0x40020440
 800420c:	40020458 	.word	0x40020458
 8004210:	40020470 	.word	0x40020470
 8004214:	40020488 	.word	0x40020488
 8004218:	400204a0 	.word	0x400204a0
 800421c:	400204b8 	.word	0x400204b8
 8004220:	58025408 	.word	0x58025408
 8004224:	5802541c 	.word	0x5802541c
 8004228:	58025430 	.word	0x58025430
 800422c:	58025444 	.word	0x58025444
 8004230:	58025458 	.word	0x58025458
 8004234:	5802546c 	.word	0x5802546c
 8004238:	58025480 	.word	0x58025480
 800423c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	60da      	str	r2, [r3, #12]
}
 8004250:	e04d      	b.n	80042ee <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a29      	ldr	r2, [pc, #164]	@ (80042fc <DMA_SetConfig+0x338>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d022      	beq.n	80042a2 <DMA_SetConfig+0x2de>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a27      	ldr	r2, [pc, #156]	@ (8004300 <DMA_SetConfig+0x33c>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d01d      	beq.n	80042a2 <DMA_SetConfig+0x2de>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a26      	ldr	r2, [pc, #152]	@ (8004304 <DMA_SetConfig+0x340>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d018      	beq.n	80042a2 <DMA_SetConfig+0x2de>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a24      	ldr	r2, [pc, #144]	@ (8004308 <DMA_SetConfig+0x344>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d013      	beq.n	80042a2 <DMA_SetConfig+0x2de>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a23      	ldr	r2, [pc, #140]	@ (800430c <DMA_SetConfig+0x348>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d00e      	beq.n	80042a2 <DMA_SetConfig+0x2de>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a21      	ldr	r2, [pc, #132]	@ (8004310 <DMA_SetConfig+0x34c>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d009      	beq.n	80042a2 <DMA_SetConfig+0x2de>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a20      	ldr	r2, [pc, #128]	@ (8004314 <DMA_SetConfig+0x350>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d004      	beq.n	80042a2 <DMA_SetConfig+0x2de>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a1e      	ldr	r2, [pc, #120]	@ (8004318 <DMA_SetConfig+0x354>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d101      	bne.n	80042a6 <DMA_SetConfig+0x2e2>
 80042a2:	2301      	movs	r3, #1
 80042a4:	e000      	b.n	80042a8 <DMA_SetConfig+0x2e4>
 80042a6:	2300      	movs	r3, #0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d020      	beq.n	80042ee <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b0:	f003 031f 	and.w	r3, r3, #31
 80042b4:	2201      	movs	r2, #1
 80042b6:	409a      	lsls	r2, r3
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	683a      	ldr	r2, [r7, #0]
 80042c2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	2b40      	cmp	r3, #64	@ 0x40
 80042ca:	d108      	bne.n	80042de <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	60da      	str	r2, [r3, #12]
}
 80042dc:	e007      	b.n	80042ee <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68ba      	ldr	r2, [r7, #8]
 80042e4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	60da      	str	r2, [r3, #12]
}
 80042ee:	bf00      	nop
 80042f0:	371c      	adds	r7, #28
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	58025408 	.word	0x58025408
 8004300:	5802541c 	.word	0x5802541c
 8004304:	58025430 	.word	0x58025430
 8004308:	58025444 	.word	0x58025444
 800430c:	58025458 	.word	0x58025458
 8004310:	5802546c 	.word	0x5802546c
 8004314:	58025480 	.word	0x58025480
 8004318:	58025494 	.word	0x58025494

0800431c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a42      	ldr	r2, [pc, #264]	@ (8004434 <DMA_CalcBaseAndBitshift+0x118>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d04a      	beq.n	80043c4 <DMA_CalcBaseAndBitshift+0xa8>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a41      	ldr	r2, [pc, #260]	@ (8004438 <DMA_CalcBaseAndBitshift+0x11c>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d045      	beq.n	80043c4 <DMA_CalcBaseAndBitshift+0xa8>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a3f      	ldr	r2, [pc, #252]	@ (800443c <DMA_CalcBaseAndBitshift+0x120>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d040      	beq.n	80043c4 <DMA_CalcBaseAndBitshift+0xa8>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a3e      	ldr	r2, [pc, #248]	@ (8004440 <DMA_CalcBaseAndBitshift+0x124>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d03b      	beq.n	80043c4 <DMA_CalcBaseAndBitshift+0xa8>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a3c      	ldr	r2, [pc, #240]	@ (8004444 <DMA_CalcBaseAndBitshift+0x128>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d036      	beq.n	80043c4 <DMA_CalcBaseAndBitshift+0xa8>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a3b      	ldr	r2, [pc, #236]	@ (8004448 <DMA_CalcBaseAndBitshift+0x12c>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d031      	beq.n	80043c4 <DMA_CalcBaseAndBitshift+0xa8>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a39      	ldr	r2, [pc, #228]	@ (800444c <DMA_CalcBaseAndBitshift+0x130>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d02c      	beq.n	80043c4 <DMA_CalcBaseAndBitshift+0xa8>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a38      	ldr	r2, [pc, #224]	@ (8004450 <DMA_CalcBaseAndBitshift+0x134>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d027      	beq.n	80043c4 <DMA_CalcBaseAndBitshift+0xa8>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a36      	ldr	r2, [pc, #216]	@ (8004454 <DMA_CalcBaseAndBitshift+0x138>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d022      	beq.n	80043c4 <DMA_CalcBaseAndBitshift+0xa8>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a35      	ldr	r2, [pc, #212]	@ (8004458 <DMA_CalcBaseAndBitshift+0x13c>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d01d      	beq.n	80043c4 <DMA_CalcBaseAndBitshift+0xa8>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a33      	ldr	r2, [pc, #204]	@ (800445c <DMA_CalcBaseAndBitshift+0x140>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d018      	beq.n	80043c4 <DMA_CalcBaseAndBitshift+0xa8>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a32      	ldr	r2, [pc, #200]	@ (8004460 <DMA_CalcBaseAndBitshift+0x144>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d013      	beq.n	80043c4 <DMA_CalcBaseAndBitshift+0xa8>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a30      	ldr	r2, [pc, #192]	@ (8004464 <DMA_CalcBaseAndBitshift+0x148>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d00e      	beq.n	80043c4 <DMA_CalcBaseAndBitshift+0xa8>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a2f      	ldr	r2, [pc, #188]	@ (8004468 <DMA_CalcBaseAndBitshift+0x14c>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d009      	beq.n	80043c4 <DMA_CalcBaseAndBitshift+0xa8>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a2d      	ldr	r2, [pc, #180]	@ (800446c <DMA_CalcBaseAndBitshift+0x150>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d004      	beq.n	80043c4 <DMA_CalcBaseAndBitshift+0xa8>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a2c      	ldr	r2, [pc, #176]	@ (8004470 <DMA_CalcBaseAndBitshift+0x154>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d101      	bne.n	80043c8 <DMA_CalcBaseAndBitshift+0xac>
 80043c4:	2301      	movs	r3, #1
 80043c6:	e000      	b.n	80043ca <DMA_CalcBaseAndBitshift+0xae>
 80043c8:	2300      	movs	r3, #0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d024      	beq.n	8004418 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	3b10      	subs	r3, #16
 80043d6:	4a27      	ldr	r2, [pc, #156]	@ (8004474 <DMA_CalcBaseAndBitshift+0x158>)
 80043d8:	fba2 2303 	umull	r2, r3, r2, r3
 80043dc:	091b      	lsrs	r3, r3, #4
 80043de:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f003 0307 	and.w	r3, r3, #7
 80043e6:	4a24      	ldr	r2, [pc, #144]	@ (8004478 <DMA_CalcBaseAndBitshift+0x15c>)
 80043e8:	5cd3      	ldrb	r3, [r2, r3]
 80043ea:	461a      	mov	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2b03      	cmp	r3, #3
 80043f4:	d908      	bls.n	8004408 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	461a      	mov	r2, r3
 80043fc:	4b1f      	ldr	r3, [pc, #124]	@ (800447c <DMA_CalcBaseAndBitshift+0x160>)
 80043fe:	4013      	ands	r3, r2
 8004400:	1d1a      	adds	r2, r3, #4
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	659a      	str	r2, [r3, #88]	@ 0x58
 8004406:	e00d      	b.n	8004424 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	461a      	mov	r2, r3
 800440e:	4b1b      	ldr	r3, [pc, #108]	@ (800447c <DMA_CalcBaseAndBitshift+0x160>)
 8004410:	4013      	ands	r3, r2
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	6593      	str	r3, [r2, #88]	@ 0x58
 8004416:	e005      	b.n	8004424 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004428:	4618      	mov	r0, r3
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr
 8004434:	40020010 	.word	0x40020010
 8004438:	40020028 	.word	0x40020028
 800443c:	40020040 	.word	0x40020040
 8004440:	40020058 	.word	0x40020058
 8004444:	40020070 	.word	0x40020070
 8004448:	40020088 	.word	0x40020088
 800444c:	400200a0 	.word	0x400200a0
 8004450:	400200b8 	.word	0x400200b8
 8004454:	40020410 	.word	0x40020410
 8004458:	40020428 	.word	0x40020428
 800445c:	40020440 	.word	0x40020440
 8004460:	40020458 	.word	0x40020458
 8004464:	40020470 	.word	0x40020470
 8004468:	40020488 	.word	0x40020488
 800446c:	400204a0 	.word	0x400204a0
 8004470:	400204b8 	.word	0x400204b8
 8004474:	aaaaaaab 	.word	0xaaaaaaab
 8004478:	0800a8c4 	.word	0x0800a8c4
 800447c:	fffffc00 	.word	0xfffffc00

08004480 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004488:	2300      	movs	r3, #0
 800448a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d120      	bne.n	80044d6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004498:	2b03      	cmp	r3, #3
 800449a:	d858      	bhi.n	800454e <DMA_CheckFifoParam+0xce>
 800449c:	a201      	add	r2, pc, #4	@ (adr r2, 80044a4 <DMA_CheckFifoParam+0x24>)
 800449e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a2:	bf00      	nop
 80044a4:	080044b5 	.word	0x080044b5
 80044a8:	080044c7 	.word	0x080044c7
 80044ac:	080044b5 	.word	0x080044b5
 80044b0:	0800454f 	.word	0x0800454f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d048      	beq.n	8004552 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80044c4:	e045      	b.n	8004552 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80044ce:	d142      	bne.n	8004556 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80044d4:	e03f      	b.n	8004556 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044de:	d123      	bne.n	8004528 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e4:	2b03      	cmp	r3, #3
 80044e6:	d838      	bhi.n	800455a <DMA_CheckFifoParam+0xda>
 80044e8:	a201      	add	r2, pc, #4	@ (adr r2, 80044f0 <DMA_CheckFifoParam+0x70>)
 80044ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ee:	bf00      	nop
 80044f0:	08004501 	.word	0x08004501
 80044f4:	08004507 	.word	0x08004507
 80044f8:	08004501 	.word	0x08004501
 80044fc:	08004519 	.word	0x08004519
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	73fb      	strb	r3, [r7, #15]
        break;
 8004504:	e030      	b.n	8004568 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800450a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d025      	beq.n	800455e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004516:	e022      	b.n	800455e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800451c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004520:	d11f      	bne.n	8004562 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004526:	e01c      	b.n	8004562 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800452c:	2b02      	cmp	r3, #2
 800452e:	d902      	bls.n	8004536 <DMA_CheckFifoParam+0xb6>
 8004530:	2b03      	cmp	r3, #3
 8004532:	d003      	beq.n	800453c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004534:	e018      	b.n	8004568 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	73fb      	strb	r3, [r7, #15]
        break;
 800453a:	e015      	b.n	8004568 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004540:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00e      	beq.n	8004566 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	73fb      	strb	r3, [r7, #15]
    break;
 800454c:	e00b      	b.n	8004566 <DMA_CheckFifoParam+0xe6>
        break;
 800454e:	bf00      	nop
 8004550:	e00a      	b.n	8004568 <DMA_CheckFifoParam+0xe8>
        break;
 8004552:	bf00      	nop
 8004554:	e008      	b.n	8004568 <DMA_CheckFifoParam+0xe8>
        break;
 8004556:	bf00      	nop
 8004558:	e006      	b.n	8004568 <DMA_CheckFifoParam+0xe8>
        break;
 800455a:	bf00      	nop
 800455c:	e004      	b.n	8004568 <DMA_CheckFifoParam+0xe8>
        break;
 800455e:	bf00      	nop
 8004560:	e002      	b.n	8004568 <DMA_CheckFifoParam+0xe8>
        break;
 8004562:	bf00      	nop
 8004564:	e000      	b.n	8004568 <DMA_CheckFifoParam+0xe8>
    break;
 8004566:	bf00      	nop
    }
  }

  return status;
 8004568:	7bfb      	ldrb	r3, [r7, #15]
}
 800456a:	4618      	mov	r0, r3
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop

08004578 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a38      	ldr	r2, [pc, #224]	@ (800466c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d022      	beq.n	80045d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a36      	ldr	r2, [pc, #216]	@ (8004670 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d01d      	beq.n	80045d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a35      	ldr	r2, [pc, #212]	@ (8004674 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d018      	beq.n	80045d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a33      	ldr	r2, [pc, #204]	@ (8004678 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d013      	beq.n	80045d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a32      	ldr	r2, [pc, #200]	@ (800467c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d00e      	beq.n	80045d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a30      	ldr	r2, [pc, #192]	@ (8004680 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d009      	beq.n	80045d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a2f      	ldr	r2, [pc, #188]	@ (8004684 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d004      	beq.n	80045d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a2d      	ldr	r2, [pc, #180]	@ (8004688 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d101      	bne.n	80045da <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80045d6:	2301      	movs	r3, #1
 80045d8:	e000      	b.n	80045dc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80045da:	2300      	movs	r3, #0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d01a      	beq.n	8004616 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	3b08      	subs	r3, #8
 80045e8:	4a28      	ldr	r2, [pc, #160]	@ (800468c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80045ea:	fba2 2303 	umull	r2, r3, r2, r3
 80045ee:	091b      	lsrs	r3, r3, #4
 80045f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	4b26      	ldr	r3, [pc, #152]	@ (8004690 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80045f6:	4413      	add	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	461a      	mov	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a24      	ldr	r2, [pc, #144]	@ (8004694 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004604:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f003 031f 	and.w	r3, r3, #31
 800460c:	2201      	movs	r2, #1
 800460e:	409a      	lsls	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004614:	e024      	b.n	8004660 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	b2db      	uxtb	r3, r3
 800461c:	3b10      	subs	r3, #16
 800461e:	4a1e      	ldr	r2, [pc, #120]	@ (8004698 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004620:	fba2 2303 	umull	r2, r3, r2, r3
 8004624:	091b      	lsrs	r3, r3, #4
 8004626:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	4a1c      	ldr	r2, [pc, #112]	@ (800469c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d806      	bhi.n	800463e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	4a1b      	ldr	r2, [pc, #108]	@ (80046a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d902      	bls.n	800463e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	3308      	adds	r3, #8
 800463c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	4b18      	ldr	r3, [pc, #96]	@ (80046a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004642:	4413      	add	r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	461a      	mov	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a16      	ldr	r2, [pc, #88]	@ (80046a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004650:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f003 031f 	and.w	r3, r3, #31
 8004658:	2201      	movs	r2, #1
 800465a:	409a      	lsls	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004660:	bf00      	nop
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	58025408 	.word	0x58025408
 8004670:	5802541c 	.word	0x5802541c
 8004674:	58025430 	.word	0x58025430
 8004678:	58025444 	.word	0x58025444
 800467c:	58025458 	.word	0x58025458
 8004680:	5802546c 	.word	0x5802546c
 8004684:	58025480 	.word	0x58025480
 8004688:	58025494 	.word	0x58025494
 800468c:	cccccccd 	.word	0xcccccccd
 8004690:	16009600 	.word	0x16009600
 8004694:	58025880 	.word	0x58025880
 8004698:	aaaaaaab 	.word	0xaaaaaaab
 800469c:	400204b8 	.word	0x400204b8
 80046a0:	4002040f 	.word	0x4002040f
 80046a4:	10008200 	.word	0x10008200
 80046a8:	40020880 	.word	0x40020880

080046ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d04a      	beq.n	8004758 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2b08      	cmp	r3, #8
 80046c6:	d847      	bhi.n	8004758 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a25      	ldr	r2, [pc, #148]	@ (8004764 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d022      	beq.n	8004718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a24      	ldr	r2, [pc, #144]	@ (8004768 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d01d      	beq.n	8004718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a22      	ldr	r2, [pc, #136]	@ (800476c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d018      	beq.n	8004718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a21      	ldr	r2, [pc, #132]	@ (8004770 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d013      	beq.n	8004718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a1f      	ldr	r2, [pc, #124]	@ (8004774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d00e      	beq.n	8004718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a1e      	ldr	r2, [pc, #120]	@ (8004778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d009      	beq.n	8004718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a1c      	ldr	r2, [pc, #112]	@ (800477c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d004      	beq.n	8004718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a1b      	ldr	r2, [pc, #108]	@ (8004780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d101      	bne.n	800471c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004718:	2301      	movs	r3, #1
 800471a:	e000      	b.n	800471e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800471c:	2300      	movs	r3, #0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00a      	beq.n	8004738 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	4b17      	ldr	r3, [pc, #92]	@ (8004784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004726:	4413      	add	r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	461a      	mov	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a15      	ldr	r2, [pc, #84]	@ (8004788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004734:	671a      	str	r2, [r3, #112]	@ 0x70
 8004736:	e009      	b.n	800474c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	4b14      	ldr	r3, [pc, #80]	@ (800478c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800473c:	4413      	add	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	461a      	mov	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a11      	ldr	r2, [pc, #68]	@ (8004790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800474a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	3b01      	subs	r3, #1
 8004750:	2201      	movs	r2, #1
 8004752:	409a      	lsls	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004758:	bf00      	nop
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr
 8004764:	58025408 	.word	0x58025408
 8004768:	5802541c 	.word	0x5802541c
 800476c:	58025430 	.word	0x58025430
 8004770:	58025444 	.word	0x58025444
 8004774:	58025458 	.word	0x58025458
 8004778:	5802546c 	.word	0x5802546c
 800477c:	58025480 	.word	0x58025480
 8004780:	58025494 	.word	0x58025494
 8004784:	1600963f 	.word	0x1600963f
 8004788:	58025940 	.word	0x58025940
 800478c:	1000823f 	.word	0x1000823f
 8004790:	40020940 	.word	0x40020940

08004794 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004794:	b480      	push	{r7}
 8004796:	b089      	sub	sp, #36	@ 0x24
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800479e:	2300      	movs	r3, #0
 80047a0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80047a2:	4b89      	ldr	r3, [pc, #548]	@ (80049c8 <HAL_GPIO_Init+0x234>)
 80047a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80047a6:	e194      	b.n	8004ad2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	2101      	movs	r1, #1
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	fa01 f303 	lsl.w	r3, r1, r3
 80047b4:	4013      	ands	r3, r2
 80047b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f000 8186 	beq.w	8004acc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f003 0303 	and.w	r3, r3, #3
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d005      	beq.n	80047d8 <HAL_GPIO_Init+0x44>
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f003 0303 	and.w	r3, r3, #3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d130      	bne.n	800483a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	2203      	movs	r2, #3
 80047e4:	fa02 f303 	lsl.w	r3, r2, r3
 80047e8:	43db      	mvns	r3, r3
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	4013      	ands	r3, r2
 80047ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	68da      	ldr	r2, [r3, #12]
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	fa02 f303 	lsl.w	r3, r2, r3
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	4313      	orrs	r3, r2
 8004800:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800480e:	2201      	movs	r2, #1
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	fa02 f303 	lsl.w	r3, r2, r3
 8004816:	43db      	mvns	r3, r3
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	4013      	ands	r3, r2
 800481c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	091b      	lsrs	r3, r3, #4
 8004824:	f003 0201 	and.w	r2, r3, #1
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	fa02 f303 	lsl.w	r3, r2, r3
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	4313      	orrs	r3, r2
 8004832:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f003 0303 	and.w	r3, r3, #3
 8004842:	2b03      	cmp	r3, #3
 8004844:	d017      	beq.n	8004876 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	2203      	movs	r2, #3
 8004852:	fa02 f303 	lsl.w	r3, r2, r3
 8004856:	43db      	mvns	r3, r3
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	4013      	ands	r3, r2
 800485c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	689a      	ldr	r2, [r3, #8]
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	fa02 f303 	lsl.w	r3, r2, r3
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	4313      	orrs	r3, r2
 800486e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	69ba      	ldr	r2, [r7, #24]
 8004874:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f003 0303 	and.w	r3, r3, #3
 800487e:	2b02      	cmp	r3, #2
 8004880:	d123      	bne.n	80048ca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	08da      	lsrs	r2, r3, #3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	3208      	adds	r2, #8
 800488a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800488e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	f003 0307 	and.w	r3, r3, #7
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	220f      	movs	r2, #15
 800489a:	fa02 f303 	lsl.w	r3, r2, r3
 800489e:	43db      	mvns	r3, r3
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	4013      	ands	r3, r2
 80048a4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	691a      	ldr	r2, [r3, #16]
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	f003 0307 	and.w	r3, r3, #7
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	fa02 f303 	lsl.w	r3, r2, r3
 80048b6:	69ba      	ldr	r2, [r7, #24]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	08da      	lsrs	r2, r3, #3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	3208      	adds	r2, #8
 80048c4:	69b9      	ldr	r1, [r7, #24]
 80048c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	2203      	movs	r2, #3
 80048d6:	fa02 f303 	lsl.w	r3, r2, r3
 80048da:	43db      	mvns	r3, r3
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	4013      	ands	r3, r2
 80048e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f003 0203 	and.w	r2, r3, #3
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	005b      	lsls	r3, r3, #1
 80048ee:	fa02 f303 	lsl.w	r3, r2, r3
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	69ba      	ldr	r2, [r7, #24]
 80048fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004906:	2b00      	cmp	r3, #0
 8004908:	f000 80e0 	beq.w	8004acc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800490c:	4b2f      	ldr	r3, [pc, #188]	@ (80049cc <HAL_GPIO_Init+0x238>)
 800490e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004912:	4a2e      	ldr	r2, [pc, #184]	@ (80049cc <HAL_GPIO_Init+0x238>)
 8004914:	f043 0302 	orr.w	r3, r3, #2
 8004918:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800491c:	4b2b      	ldr	r3, [pc, #172]	@ (80049cc <HAL_GPIO_Init+0x238>)
 800491e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	60fb      	str	r3, [r7, #12]
 8004928:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800492a:	4a29      	ldr	r2, [pc, #164]	@ (80049d0 <HAL_GPIO_Init+0x23c>)
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	089b      	lsrs	r3, r3, #2
 8004930:	3302      	adds	r3, #2
 8004932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004936:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	f003 0303 	and.w	r3, r3, #3
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	220f      	movs	r2, #15
 8004942:	fa02 f303 	lsl.w	r3, r2, r3
 8004946:	43db      	mvns	r3, r3
 8004948:	69ba      	ldr	r2, [r7, #24]
 800494a:	4013      	ands	r3, r2
 800494c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a20      	ldr	r2, [pc, #128]	@ (80049d4 <HAL_GPIO_Init+0x240>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d052      	beq.n	80049fc <HAL_GPIO_Init+0x268>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a1f      	ldr	r2, [pc, #124]	@ (80049d8 <HAL_GPIO_Init+0x244>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d031      	beq.n	80049c2 <HAL_GPIO_Init+0x22e>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a1e      	ldr	r2, [pc, #120]	@ (80049dc <HAL_GPIO_Init+0x248>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d02b      	beq.n	80049be <HAL_GPIO_Init+0x22a>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a1d      	ldr	r2, [pc, #116]	@ (80049e0 <HAL_GPIO_Init+0x24c>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d025      	beq.n	80049ba <HAL_GPIO_Init+0x226>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a1c      	ldr	r2, [pc, #112]	@ (80049e4 <HAL_GPIO_Init+0x250>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d01f      	beq.n	80049b6 <HAL_GPIO_Init+0x222>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a1b      	ldr	r2, [pc, #108]	@ (80049e8 <HAL_GPIO_Init+0x254>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d019      	beq.n	80049b2 <HAL_GPIO_Init+0x21e>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a1a      	ldr	r2, [pc, #104]	@ (80049ec <HAL_GPIO_Init+0x258>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d013      	beq.n	80049ae <HAL_GPIO_Init+0x21a>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a19      	ldr	r2, [pc, #100]	@ (80049f0 <HAL_GPIO_Init+0x25c>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d00d      	beq.n	80049aa <HAL_GPIO_Init+0x216>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a18      	ldr	r2, [pc, #96]	@ (80049f4 <HAL_GPIO_Init+0x260>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d007      	beq.n	80049a6 <HAL_GPIO_Init+0x212>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a17      	ldr	r2, [pc, #92]	@ (80049f8 <HAL_GPIO_Init+0x264>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d101      	bne.n	80049a2 <HAL_GPIO_Init+0x20e>
 800499e:	2309      	movs	r3, #9
 80049a0:	e02d      	b.n	80049fe <HAL_GPIO_Init+0x26a>
 80049a2:	230a      	movs	r3, #10
 80049a4:	e02b      	b.n	80049fe <HAL_GPIO_Init+0x26a>
 80049a6:	2308      	movs	r3, #8
 80049a8:	e029      	b.n	80049fe <HAL_GPIO_Init+0x26a>
 80049aa:	2307      	movs	r3, #7
 80049ac:	e027      	b.n	80049fe <HAL_GPIO_Init+0x26a>
 80049ae:	2306      	movs	r3, #6
 80049b0:	e025      	b.n	80049fe <HAL_GPIO_Init+0x26a>
 80049b2:	2305      	movs	r3, #5
 80049b4:	e023      	b.n	80049fe <HAL_GPIO_Init+0x26a>
 80049b6:	2304      	movs	r3, #4
 80049b8:	e021      	b.n	80049fe <HAL_GPIO_Init+0x26a>
 80049ba:	2303      	movs	r3, #3
 80049bc:	e01f      	b.n	80049fe <HAL_GPIO_Init+0x26a>
 80049be:	2302      	movs	r3, #2
 80049c0:	e01d      	b.n	80049fe <HAL_GPIO_Init+0x26a>
 80049c2:	2301      	movs	r3, #1
 80049c4:	e01b      	b.n	80049fe <HAL_GPIO_Init+0x26a>
 80049c6:	bf00      	nop
 80049c8:	58000080 	.word	0x58000080
 80049cc:	58024400 	.word	0x58024400
 80049d0:	58000400 	.word	0x58000400
 80049d4:	58020000 	.word	0x58020000
 80049d8:	58020400 	.word	0x58020400
 80049dc:	58020800 	.word	0x58020800
 80049e0:	58020c00 	.word	0x58020c00
 80049e4:	58021000 	.word	0x58021000
 80049e8:	58021400 	.word	0x58021400
 80049ec:	58021800 	.word	0x58021800
 80049f0:	58021c00 	.word	0x58021c00
 80049f4:	58022000 	.word	0x58022000
 80049f8:	58022400 	.word	0x58022400
 80049fc:	2300      	movs	r3, #0
 80049fe:	69fa      	ldr	r2, [r7, #28]
 8004a00:	f002 0203 	and.w	r2, r2, #3
 8004a04:	0092      	lsls	r2, r2, #2
 8004a06:	4093      	lsls	r3, r2
 8004a08:	69ba      	ldr	r2, [r7, #24]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a0e:	4938      	ldr	r1, [pc, #224]	@ (8004af0 <HAL_GPIO_Init+0x35c>)
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	089b      	lsrs	r3, r3, #2
 8004a14:	3302      	adds	r3, #2
 8004a16:	69ba      	ldr	r2, [r7, #24]
 8004a18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	43db      	mvns	r3, r3
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d003      	beq.n	8004a42 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004a3a:	69ba      	ldr	r2, [r7, #24]
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004a42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004a4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	43db      	mvns	r3, r3
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d003      	beq.n	8004a70 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004a68:	69ba      	ldr	r2, [r7, #24]
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004a70:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	43db      	mvns	r3, r3
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	4013      	ands	r3, r2
 8004a86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d003      	beq.n	8004a9c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004a94:	69ba      	ldr	r2, [r7, #24]
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	43db      	mvns	r3, r3
 8004aac:	69ba      	ldr	r2, [r7, #24]
 8004aae:	4013      	ands	r3, r2
 8004ab0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004abe:	69ba      	ldr	r2, [r7, #24]
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	3301      	adds	r3, #1
 8004ad0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f47f ae63 	bne.w	80047a8 <HAL_GPIO_Init+0x14>
  }
}
 8004ae2:	bf00      	nop
 8004ae4:	bf00      	nop
 8004ae6:	3724      	adds	r7, #36	@ 0x24
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr
 8004af0:	58000400 	.word	0x58000400

08004af4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004afc:	4b19      	ldr	r3, [pc, #100]	@ (8004b64 <HAL_PWREx_ConfigSupply+0x70>)
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	f003 0304 	and.w	r3, r3, #4
 8004b04:	2b04      	cmp	r3, #4
 8004b06:	d00a      	beq.n	8004b1e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004b08:	4b16      	ldr	r3, [pc, #88]	@ (8004b64 <HAL_PWREx_ConfigSupply+0x70>)
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	f003 0307 	and.w	r3, r3, #7
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d001      	beq.n	8004b1a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e01f      	b.n	8004b5a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	e01d      	b.n	8004b5a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004b1e:	4b11      	ldr	r3, [pc, #68]	@ (8004b64 <HAL_PWREx_ConfigSupply+0x70>)
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	f023 0207 	bic.w	r2, r3, #7
 8004b26:	490f      	ldr	r1, [pc, #60]	@ (8004b64 <HAL_PWREx_ConfigSupply+0x70>)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004b2e:	f7fc fe55 	bl	80017dc <HAL_GetTick>
 8004b32:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004b34:	e009      	b.n	8004b4a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004b36:	f7fc fe51 	bl	80017dc <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004b44:	d901      	bls.n	8004b4a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e007      	b.n	8004b5a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004b4a:	4b06      	ldr	r3, [pc, #24]	@ (8004b64 <HAL_PWREx_ConfigSupply+0x70>)
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b56:	d1ee      	bne.n	8004b36 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	58024800 	.word	0x58024800

08004b68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b08c      	sub	sp, #48	@ 0x30
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d102      	bne.n	8004b7c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	f000 bc48 	b.w	800540c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f000 8088 	beq.w	8004c9a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b8a:	4b99      	ldr	r3, [pc, #612]	@ (8004df0 <HAL_RCC_OscConfig+0x288>)
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b94:	4b96      	ldr	r3, [pc, #600]	@ (8004df0 <HAL_RCC_OscConfig+0x288>)
 8004b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b98:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b9c:	2b10      	cmp	r3, #16
 8004b9e:	d007      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x48>
 8004ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ba2:	2b18      	cmp	r3, #24
 8004ba4:	d111      	bne.n	8004bca <HAL_RCC_OscConfig+0x62>
 8004ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ba8:	f003 0303 	and.w	r3, r3, #3
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d10c      	bne.n	8004bca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bb0:	4b8f      	ldr	r3, [pc, #572]	@ (8004df0 <HAL_RCC_OscConfig+0x288>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d06d      	beq.n	8004c98 <HAL_RCC_OscConfig+0x130>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d169      	bne.n	8004c98 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	f000 bc21 	b.w	800540c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bd2:	d106      	bne.n	8004be2 <HAL_RCC_OscConfig+0x7a>
 8004bd4:	4b86      	ldr	r3, [pc, #536]	@ (8004df0 <HAL_RCC_OscConfig+0x288>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a85      	ldr	r2, [pc, #532]	@ (8004df0 <HAL_RCC_OscConfig+0x288>)
 8004bda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bde:	6013      	str	r3, [r2, #0]
 8004be0:	e02e      	b.n	8004c40 <HAL_RCC_OscConfig+0xd8>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d10c      	bne.n	8004c04 <HAL_RCC_OscConfig+0x9c>
 8004bea:	4b81      	ldr	r3, [pc, #516]	@ (8004df0 <HAL_RCC_OscConfig+0x288>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a80      	ldr	r2, [pc, #512]	@ (8004df0 <HAL_RCC_OscConfig+0x288>)
 8004bf0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bf4:	6013      	str	r3, [r2, #0]
 8004bf6:	4b7e      	ldr	r3, [pc, #504]	@ (8004df0 <HAL_RCC_OscConfig+0x288>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a7d      	ldr	r2, [pc, #500]	@ (8004df0 <HAL_RCC_OscConfig+0x288>)
 8004bfc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c00:	6013      	str	r3, [r2, #0]
 8004c02:	e01d      	b.n	8004c40 <HAL_RCC_OscConfig+0xd8>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c0c:	d10c      	bne.n	8004c28 <HAL_RCC_OscConfig+0xc0>
 8004c0e:	4b78      	ldr	r3, [pc, #480]	@ (8004df0 <HAL_RCC_OscConfig+0x288>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a77      	ldr	r2, [pc, #476]	@ (8004df0 <HAL_RCC_OscConfig+0x288>)
 8004c14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c18:	6013      	str	r3, [r2, #0]
 8004c1a:	4b75      	ldr	r3, [pc, #468]	@ (8004df0 <HAL_RCC_OscConfig+0x288>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a74      	ldr	r2, [pc, #464]	@ (8004df0 <HAL_RCC_OscConfig+0x288>)
 8004c20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c24:	6013      	str	r3, [r2, #0]
 8004c26:	e00b      	b.n	8004c40 <HAL_RCC_OscConfig+0xd8>
 8004c28:	4b71      	ldr	r3, [pc, #452]	@ (8004df0 <HAL_RCC_OscConfig+0x288>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a70      	ldr	r2, [pc, #448]	@ (8004df0 <HAL_RCC_OscConfig+0x288>)
 8004c2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c32:	6013      	str	r3, [r2, #0]
 8004c34:	4b6e      	ldr	r3, [pc, #440]	@ (8004df0 <HAL_RCC_OscConfig+0x288>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a6d      	ldr	r2, [pc, #436]	@ (8004df0 <HAL_RCC_OscConfig+0x288>)
 8004c3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d013      	beq.n	8004c70 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c48:	f7fc fdc8 	bl	80017dc <HAL_GetTick>
 8004c4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c50:	f7fc fdc4 	bl	80017dc <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b64      	cmp	r3, #100	@ 0x64
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e3d4      	b.n	800540c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c62:	4b63      	ldr	r3, [pc, #396]	@ (8004df0 <HAL_RCC_OscConfig+0x288>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d0f0      	beq.n	8004c50 <HAL_RCC_OscConfig+0xe8>
 8004c6e:	e014      	b.n	8004c9a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c70:	f7fc fdb4 	bl	80017dc <HAL_GetTick>
 8004c74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004c76:	e008      	b.n	8004c8a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c78:	f7fc fdb0 	bl	80017dc <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b64      	cmp	r3, #100	@ 0x64
 8004c84:	d901      	bls.n	8004c8a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e3c0      	b.n	800540c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004c8a:	4b59      	ldr	r3, [pc, #356]	@ (8004df0 <HAL_RCC_OscConfig+0x288>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1f0      	bne.n	8004c78 <HAL_RCC_OscConfig+0x110>
 8004c96:	e000      	b.n	8004c9a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f000 80ca 	beq.w	8004e3c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ca8:	4b51      	ldr	r3, [pc, #324]	@ (8004df0 <HAL_RCC_OscConfig+0x288>)
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cb0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004cb2:	4b4f      	ldr	r3, [pc, #316]	@ (8004df0 <HAL_RCC_OscConfig+0x288>)
 8004cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004cb8:	6a3b      	ldr	r3, [r7, #32]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d007      	beq.n	8004cce <HAL_RCC_OscConfig+0x166>
 8004cbe:	6a3b      	ldr	r3, [r7, #32]
 8004cc0:	2b18      	cmp	r3, #24
 8004cc2:	d156      	bne.n	8004d72 <HAL_RCC_OscConfig+0x20a>
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	f003 0303 	and.w	r3, r3, #3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d151      	bne.n	8004d72 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cce:	4b48      	ldr	r3, [pc, #288]	@ (8004df0 <HAL_RCC_OscConfig+0x288>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0304 	and.w	r3, r3, #4
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d005      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x17e>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d101      	bne.n	8004ce6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e392      	b.n	800540c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004ce6:	4b42      	ldr	r3, [pc, #264]	@ (8004df0 <HAL_RCC_OscConfig+0x288>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f023 0219 	bic.w	r2, r3, #25
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	493f      	ldr	r1, [pc, #252]	@ (8004df0 <HAL_RCC_OscConfig+0x288>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf8:	f7fc fd70 	bl	80017dc <HAL_GetTick>
 8004cfc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004cfe:	e008      	b.n	8004d12 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d00:	f7fc fd6c 	bl	80017dc <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e37c      	b.n	800540c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d12:	4b37      	ldr	r3, [pc, #220]	@ (8004df0 <HAL_RCC_OscConfig+0x288>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0304 	and.w	r3, r3, #4
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d0f0      	beq.n	8004d00 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d1e:	f7fc fd69 	bl	80017f4 <HAL_GetREVID>
 8004d22:	4603      	mov	r3, r0
 8004d24:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d817      	bhi.n	8004d5c <HAL_RCC_OscConfig+0x1f4>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	2b40      	cmp	r3, #64	@ 0x40
 8004d32:	d108      	bne.n	8004d46 <HAL_RCC_OscConfig+0x1de>
 8004d34:	4b2e      	ldr	r3, [pc, #184]	@ (8004df0 <HAL_RCC_OscConfig+0x288>)
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004d3c:	4a2c      	ldr	r2, [pc, #176]	@ (8004df0 <HAL_RCC_OscConfig+0x288>)
 8004d3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d42:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d44:	e07a      	b.n	8004e3c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d46:	4b2a      	ldr	r3, [pc, #168]	@ (8004df0 <HAL_RCC_OscConfig+0x288>)
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	031b      	lsls	r3, r3, #12
 8004d54:	4926      	ldr	r1, [pc, #152]	@ (8004df0 <HAL_RCC_OscConfig+0x288>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d5a:	e06f      	b.n	8004e3c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d5c:	4b24      	ldr	r3, [pc, #144]	@ (8004df0 <HAL_RCC_OscConfig+0x288>)
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	061b      	lsls	r3, r3, #24
 8004d6a:	4921      	ldr	r1, [pc, #132]	@ (8004df0 <HAL_RCC_OscConfig+0x288>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d70:	e064      	b.n	8004e3c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d047      	beq.n	8004e0a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004d7a:	4b1d      	ldr	r3, [pc, #116]	@ (8004df0 <HAL_RCC_OscConfig+0x288>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f023 0219 	bic.w	r2, r3, #25
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	491a      	ldr	r1, [pc, #104]	@ (8004df0 <HAL_RCC_OscConfig+0x288>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8c:	f7fc fd26 	bl	80017dc <HAL_GetTick>
 8004d90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d92:	e008      	b.n	8004da6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d94:	f7fc fd22 	bl	80017dc <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e332      	b.n	800540c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004da6:	4b12      	ldr	r3, [pc, #72]	@ (8004df0 <HAL_RCC_OscConfig+0x288>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0304 	and.w	r3, r3, #4
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d0f0      	beq.n	8004d94 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004db2:	f7fc fd1f 	bl	80017f4 <HAL_GetREVID>
 8004db6:	4603      	mov	r3, r0
 8004db8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d819      	bhi.n	8004df4 <HAL_RCC_OscConfig+0x28c>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	2b40      	cmp	r3, #64	@ 0x40
 8004dc6:	d108      	bne.n	8004dda <HAL_RCC_OscConfig+0x272>
 8004dc8:	4b09      	ldr	r3, [pc, #36]	@ (8004df0 <HAL_RCC_OscConfig+0x288>)
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004dd0:	4a07      	ldr	r2, [pc, #28]	@ (8004df0 <HAL_RCC_OscConfig+0x288>)
 8004dd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dd6:	6053      	str	r3, [r2, #4]
 8004dd8:	e030      	b.n	8004e3c <HAL_RCC_OscConfig+0x2d4>
 8004dda:	4b05      	ldr	r3, [pc, #20]	@ (8004df0 <HAL_RCC_OscConfig+0x288>)
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	031b      	lsls	r3, r3, #12
 8004de8:	4901      	ldr	r1, [pc, #4]	@ (8004df0 <HAL_RCC_OscConfig+0x288>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	604b      	str	r3, [r1, #4]
 8004dee:	e025      	b.n	8004e3c <HAL_RCC_OscConfig+0x2d4>
 8004df0:	58024400 	.word	0x58024400
 8004df4:	4b9a      	ldr	r3, [pc, #616]	@ (8005060 <HAL_RCC_OscConfig+0x4f8>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	061b      	lsls	r3, r3, #24
 8004e02:	4997      	ldr	r1, [pc, #604]	@ (8005060 <HAL_RCC_OscConfig+0x4f8>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	604b      	str	r3, [r1, #4]
 8004e08:	e018      	b.n	8004e3c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e0a:	4b95      	ldr	r3, [pc, #596]	@ (8005060 <HAL_RCC_OscConfig+0x4f8>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a94      	ldr	r2, [pc, #592]	@ (8005060 <HAL_RCC_OscConfig+0x4f8>)
 8004e10:	f023 0301 	bic.w	r3, r3, #1
 8004e14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e16:	f7fc fce1 	bl	80017dc <HAL_GetTick>
 8004e1a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e1c:	e008      	b.n	8004e30 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e1e:	f7fc fcdd 	bl	80017dc <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d901      	bls.n	8004e30 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e2ed      	b.n	800540c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e30:	4b8b      	ldr	r3, [pc, #556]	@ (8005060 <HAL_RCC_OscConfig+0x4f8>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0304 	and.w	r3, r3, #4
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1f0      	bne.n	8004e1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0310 	and.w	r3, r3, #16
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f000 80a9 	beq.w	8004f9c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e4a:	4b85      	ldr	r3, [pc, #532]	@ (8005060 <HAL_RCC_OscConfig+0x4f8>)
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e52:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e54:	4b82      	ldr	r3, [pc, #520]	@ (8005060 <HAL_RCC_OscConfig+0x4f8>)
 8004e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e58:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	2b08      	cmp	r3, #8
 8004e5e:	d007      	beq.n	8004e70 <HAL_RCC_OscConfig+0x308>
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	2b18      	cmp	r3, #24
 8004e64:	d13a      	bne.n	8004edc <HAL_RCC_OscConfig+0x374>
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f003 0303 	and.w	r3, r3, #3
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d135      	bne.n	8004edc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e70:	4b7b      	ldr	r3, [pc, #492]	@ (8005060 <HAL_RCC_OscConfig+0x4f8>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d005      	beq.n	8004e88 <HAL_RCC_OscConfig+0x320>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	69db      	ldr	r3, [r3, #28]
 8004e80:	2b80      	cmp	r3, #128	@ 0x80
 8004e82:	d001      	beq.n	8004e88 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e2c1      	b.n	800540c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e88:	f7fc fcb4 	bl	80017f4 <HAL_GetREVID>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d817      	bhi.n	8004ec6 <HAL_RCC_OscConfig+0x35e>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	2b20      	cmp	r3, #32
 8004e9c:	d108      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x348>
 8004e9e:	4b70      	ldr	r3, [pc, #448]	@ (8005060 <HAL_RCC_OscConfig+0x4f8>)
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004ea6:	4a6e      	ldr	r2, [pc, #440]	@ (8005060 <HAL_RCC_OscConfig+0x4f8>)
 8004ea8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004eac:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004eae:	e075      	b.n	8004f9c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004eb0:	4b6b      	ldr	r3, [pc, #428]	@ (8005060 <HAL_RCC_OscConfig+0x4f8>)
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a1b      	ldr	r3, [r3, #32]
 8004ebc:	069b      	lsls	r3, r3, #26
 8004ebe:	4968      	ldr	r1, [pc, #416]	@ (8005060 <HAL_RCC_OscConfig+0x4f8>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ec4:	e06a      	b.n	8004f9c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ec6:	4b66      	ldr	r3, [pc, #408]	@ (8005060 <HAL_RCC_OscConfig+0x4f8>)
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	061b      	lsls	r3, r3, #24
 8004ed4:	4962      	ldr	r1, [pc, #392]	@ (8005060 <HAL_RCC_OscConfig+0x4f8>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004eda:	e05f      	b.n	8004f9c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	69db      	ldr	r3, [r3, #28]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d042      	beq.n	8004f6a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004ee4:	4b5e      	ldr	r3, [pc, #376]	@ (8005060 <HAL_RCC_OscConfig+0x4f8>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a5d      	ldr	r2, [pc, #372]	@ (8005060 <HAL_RCC_OscConfig+0x4f8>)
 8004eea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004eee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef0:	f7fc fc74 	bl	80017dc <HAL_GetTick>
 8004ef4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ef6:	e008      	b.n	8004f0a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004ef8:	f7fc fc70 	bl	80017dc <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e280      	b.n	800540c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f0a:	4b55      	ldr	r3, [pc, #340]	@ (8005060 <HAL_RCC_OscConfig+0x4f8>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d0f0      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f16:	f7fc fc6d 	bl	80017f4 <HAL_GetREVID>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d817      	bhi.n	8004f54 <HAL_RCC_OscConfig+0x3ec>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	2b20      	cmp	r3, #32
 8004f2a:	d108      	bne.n	8004f3e <HAL_RCC_OscConfig+0x3d6>
 8004f2c:	4b4c      	ldr	r3, [pc, #304]	@ (8005060 <HAL_RCC_OscConfig+0x4f8>)
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004f34:	4a4a      	ldr	r2, [pc, #296]	@ (8005060 <HAL_RCC_OscConfig+0x4f8>)
 8004f36:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004f3a:	6053      	str	r3, [r2, #4]
 8004f3c:	e02e      	b.n	8004f9c <HAL_RCC_OscConfig+0x434>
 8004f3e:	4b48      	ldr	r3, [pc, #288]	@ (8005060 <HAL_RCC_OscConfig+0x4f8>)
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	069b      	lsls	r3, r3, #26
 8004f4c:	4944      	ldr	r1, [pc, #272]	@ (8005060 <HAL_RCC_OscConfig+0x4f8>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	604b      	str	r3, [r1, #4]
 8004f52:	e023      	b.n	8004f9c <HAL_RCC_OscConfig+0x434>
 8004f54:	4b42      	ldr	r3, [pc, #264]	@ (8005060 <HAL_RCC_OscConfig+0x4f8>)
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	061b      	lsls	r3, r3, #24
 8004f62:	493f      	ldr	r1, [pc, #252]	@ (8005060 <HAL_RCC_OscConfig+0x4f8>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	60cb      	str	r3, [r1, #12]
 8004f68:	e018      	b.n	8004f9c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004f6a:	4b3d      	ldr	r3, [pc, #244]	@ (8005060 <HAL_RCC_OscConfig+0x4f8>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a3c      	ldr	r2, [pc, #240]	@ (8005060 <HAL_RCC_OscConfig+0x4f8>)
 8004f70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f76:	f7fc fc31 	bl	80017dc <HAL_GetTick>
 8004f7a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004f7c:	e008      	b.n	8004f90 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004f7e:	f7fc fc2d 	bl	80017dc <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d901      	bls.n	8004f90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e23d      	b.n	800540c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004f90:	4b33      	ldr	r3, [pc, #204]	@ (8005060 <HAL_RCC_OscConfig+0x4f8>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1f0      	bne.n	8004f7e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0308 	and.w	r3, r3, #8
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d036      	beq.n	8005016 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	695b      	ldr	r3, [r3, #20]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d019      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fb0:	4b2b      	ldr	r3, [pc, #172]	@ (8005060 <HAL_RCC_OscConfig+0x4f8>)
 8004fb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fb4:	4a2a      	ldr	r2, [pc, #168]	@ (8005060 <HAL_RCC_OscConfig+0x4f8>)
 8004fb6:	f043 0301 	orr.w	r3, r3, #1
 8004fba:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fbc:	f7fc fc0e 	bl	80017dc <HAL_GetTick>
 8004fc0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004fc2:	e008      	b.n	8004fd6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fc4:	f7fc fc0a 	bl	80017dc <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e21a      	b.n	800540c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004fd6:	4b22      	ldr	r3, [pc, #136]	@ (8005060 <HAL_RCC_OscConfig+0x4f8>)
 8004fd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d0f0      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x45c>
 8004fe2:	e018      	b.n	8005016 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fe4:	4b1e      	ldr	r3, [pc, #120]	@ (8005060 <HAL_RCC_OscConfig+0x4f8>)
 8004fe6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fe8:	4a1d      	ldr	r2, [pc, #116]	@ (8005060 <HAL_RCC_OscConfig+0x4f8>)
 8004fea:	f023 0301 	bic.w	r3, r3, #1
 8004fee:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ff0:	f7fc fbf4 	bl	80017dc <HAL_GetTick>
 8004ff4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004ff6:	e008      	b.n	800500a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ff8:	f7fc fbf0 	bl	80017dc <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b02      	cmp	r3, #2
 8005004:	d901      	bls.n	800500a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e200      	b.n	800540c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800500a:	4b15      	ldr	r3, [pc, #84]	@ (8005060 <HAL_RCC_OscConfig+0x4f8>)
 800500c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1f0      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0320 	and.w	r3, r3, #32
 800501e:	2b00      	cmp	r3, #0
 8005020:	d039      	beq.n	8005096 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d01c      	beq.n	8005064 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800502a:	4b0d      	ldr	r3, [pc, #52]	@ (8005060 <HAL_RCC_OscConfig+0x4f8>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a0c      	ldr	r2, [pc, #48]	@ (8005060 <HAL_RCC_OscConfig+0x4f8>)
 8005030:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005034:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005036:	f7fc fbd1 	bl	80017dc <HAL_GetTick>
 800503a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800503c:	e008      	b.n	8005050 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800503e:	f7fc fbcd 	bl	80017dc <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	2b02      	cmp	r3, #2
 800504a:	d901      	bls.n	8005050 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e1dd      	b.n	800540c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005050:	4b03      	ldr	r3, [pc, #12]	@ (8005060 <HAL_RCC_OscConfig+0x4f8>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d0f0      	beq.n	800503e <HAL_RCC_OscConfig+0x4d6>
 800505c:	e01b      	b.n	8005096 <HAL_RCC_OscConfig+0x52e>
 800505e:	bf00      	nop
 8005060:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005064:	4b9b      	ldr	r3, [pc, #620]	@ (80052d4 <HAL_RCC_OscConfig+0x76c>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a9a      	ldr	r2, [pc, #616]	@ (80052d4 <HAL_RCC_OscConfig+0x76c>)
 800506a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800506e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005070:	f7fc fbb4 	bl	80017dc <HAL_GetTick>
 8005074:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005076:	e008      	b.n	800508a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005078:	f7fc fbb0 	bl	80017dc <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b02      	cmp	r3, #2
 8005084:	d901      	bls.n	800508a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e1c0      	b.n	800540c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800508a:	4b92      	ldr	r3, [pc, #584]	@ (80052d4 <HAL_RCC_OscConfig+0x76c>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1f0      	bne.n	8005078 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0304 	and.w	r3, r3, #4
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f000 8081 	beq.w	80051a6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80050a4:	4b8c      	ldr	r3, [pc, #560]	@ (80052d8 <HAL_RCC_OscConfig+0x770>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a8b      	ldr	r2, [pc, #556]	@ (80052d8 <HAL_RCC_OscConfig+0x770>)
 80050aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050b0:	f7fc fb94 	bl	80017dc <HAL_GetTick>
 80050b4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050b6:	e008      	b.n	80050ca <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050b8:	f7fc fb90 	bl	80017dc <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	2b64      	cmp	r3, #100	@ 0x64
 80050c4:	d901      	bls.n	80050ca <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e1a0      	b.n	800540c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050ca:	4b83      	ldr	r3, [pc, #524]	@ (80052d8 <HAL_RCC_OscConfig+0x770>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d0f0      	beq.n	80050b8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d106      	bne.n	80050ec <HAL_RCC_OscConfig+0x584>
 80050de:	4b7d      	ldr	r3, [pc, #500]	@ (80052d4 <HAL_RCC_OscConfig+0x76c>)
 80050e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050e2:	4a7c      	ldr	r2, [pc, #496]	@ (80052d4 <HAL_RCC_OscConfig+0x76c>)
 80050e4:	f043 0301 	orr.w	r3, r3, #1
 80050e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80050ea:	e02d      	b.n	8005148 <HAL_RCC_OscConfig+0x5e0>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10c      	bne.n	800510e <HAL_RCC_OscConfig+0x5a6>
 80050f4:	4b77      	ldr	r3, [pc, #476]	@ (80052d4 <HAL_RCC_OscConfig+0x76c>)
 80050f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050f8:	4a76      	ldr	r2, [pc, #472]	@ (80052d4 <HAL_RCC_OscConfig+0x76c>)
 80050fa:	f023 0301 	bic.w	r3, r3, #1
 80050fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8005100:	4b74      	ldr	r3, [pc, #464]	@ (80052d4 <HAL_RCC_OscConfig+0x76c>)
 8005102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005104:	4a73      	ldr	r2, [pc, #460]	@ (80052d4 <HAL_RCC_OscConfig+0x76c>)
 8005106:	f023 0304 	bic.w	r3, r3, #4
 800510a:	6713      	str	r3, [r2, #112]	@ 0x70
 800510c:	e01c      	b.n	8005148 <HAL_RCC_OscConfig+0x5e0>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	2b05      	cmp	r3, #5
 8005114:	d10c      	bne.n	8005130 <HAL_RCC_OscConfig+0x5c8>
 8005116:	4b6f      	ldr	r3, [pc, #444]	@ (80052d4 <HAL_RCC_OscConfig+0x76c>)
 8005118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800511a:	4a6e      	ldr	r2, [pc, #440]	@ (80052d4 <HAL_RCC_OscConfig+0x76c>)
 800511c:	f043 0304 	orr.w	r3, r3, #4
 8005120:	6713      	str	r3, [r2, #112]	@ 0x70
 8005122:	4b6c      	ldr	r3, [pc, #432]	@ (80052d4 <HAL_RCC_OscConfig+0x76c>)
 8005124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005126:	4a6b      	ldr	r2, [pc, #428]	@ (80052d4 <HAL_RCC_OscConfig+0x76c>)
 8005128:	f043 0301 	orr.w	r3, r3, #1
 800512c:	6713      	str	r3, [r2, #112]	@ 0x70
 800512e:	e00b      	b.n	8005148 <HAL_RCC_OscConfig+0x5e0>
 8005130:	4b68      	ldr	r3, [pc, #416]	@ (80052d4 <HAL_RCC_OscConfig+0x76c>)
 8005132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005134:	4a67      	ldr	r2, [pc, #412]	@ (80052d4 <HAL_RCC_OscConfig+0x76c>)
 8005136:	f023 0301 	bic.w	r3, r3, #1
 800513a:	6713      	str	r3, [r2, #112]	@ 0x70
 800513c:	4b65      	ldr	r3, [pc, #404]	@ (80052d4 <HAL_RCC_OscConfig+0x76c>)
 800513e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005140:	4a64      	ldr	r2, [pc, #400]	@ (80052d4 <HAL_RCC_OscConfig+0x76c>)
 8005142:	f023 0304 	bic.w	r3, r3, #4
 8005146:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d015      	beq.n	800517c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005150:	f7fc fb44 	bl	80017dc <HAL_GetTick>
 8005154:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005156:	e00a      	b.n	800516e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005158:	f7fc fb40 	bl	80017dc <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005166:	4293      	cmp	r3, r2
 8005168:	d901      	bls.n	800516e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e14e      	b.n	800540c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800516e:	4b59      	ldr	r3, [pc, #356]	@ (80052d4 <HAL_RCC_OscConfig+0x76c>)
 8005170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b00      	cmp	r3, #0
 8005178:	d0ee      	beq.n	8005158 <HAL_RCC_OscConfig+0x5f0>
 800517a:	e014      	b.n	80051a6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800517c:	f7fc fb2e 	bl	80017dc <HAL_GetTick>
 8005180:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005182:	e00a      	b.n	800519a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005184:	f7fc fb2a 	bl	80017dc <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005192:	4293      	cmp	r3, r2
 8005194:	d901      	bls.n	800519a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e138      	b.n	800540c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800519a:	4b4e      	ldr	r3, [pc, #312]	@ (80052d4 <HAL_RCC_OscConfig+0x76c>)
 800519c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800519e:	f003 0302 	and.w	r3, r3, #2
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1ee      	bne.n	8005184 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f000 812d 	beq.w	800540a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80051b0:	4b48      	ldr	r3, [pc, #288]	@ (80052d4 <HAL_RCC_OscConfig+0x76c>)
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051b8:	2b18      	cmp	r3, #24
 80051ba:	f000 80bd 	beq.w	8005338 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	f040 809e 	bne.w	8005304 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051c8:	4b42      	ldr	r3, [pc, #264]	@ (80052d4 <HAL_RCC_OscConfig+0x76c>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a41      	ldr	r2, [pc, #260]	@ (80052d4 <HAL_RCC_OscConfig+0x76c>)
 80051ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d4:	f7fc fb02 	bl	80017dc <HAL_GetTick>
 80051d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051da:	e008      	b.n	80051ee <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051dc:	f7fc fafe 	bl	80017dc <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e10e      	b.n	800540c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051ee:	4b39      	ldr	r3, [pc, #228]	@ (80052d4 <HAL_RCC_OscConfig+0x76c>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1f0      	bne.n	80051dc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051fa:	4b36      	ldr	r3, [pc, #216]	@ (80052d4 <HAL_RCC_OscConfig+0x76c>)
 80051fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80051fe:	4b37      	ldr	r3, [pc, #220]	@ (80052dc <HAL_RCC_OscConfig+0x774>)
 8005200:	4013      	ands	r3, r2
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800520a:	0112      	lsls	r2, r2, #4
 800520c:	430a      	orrs	r2, r1
 800520e:	4931      	ldr	r1, [pc, #196]	@ (80052d4 <HAL_RCC_OscConfig+0x76c>)
 8005210:	4313      	orrs	r3, r2
 8005212:	628b      	str	r3, [r1, #40]	@ 0x28
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005218:	3b01      	subs	r3, #1
 800521a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005222:	3b01      	subs	r3, #1
 8005224:	025b      	lsls	r3, r3, #9
 8005226:	b29b      	uxth	r3, r3
 8005228:	431a      	orrs	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800522e:	3b01      	subs	r3, #1
 8005230:	041b      	lsls	r3, r3, #16
 8005232:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005236:	431a      	orrs	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800523c:	3b01      	subs	r3, #1
 800523e:	061b      	lsls	r3, r3, #24
 8005240:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005244:	4923      	ldr	r1, [pc, #140]	@ (80052d4 <HAL_RCC_OscConfig+0x76c>)
 8005246:	4313      	orrs	r3, r2
 8005248:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800524a:	4b22      	ldr	r3, [pc, #136]	@ (80052d4 <HAL_RCC_OscConfig+0x76c>)
 800524c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800524e:	4a21      	ldr	r2, [pc, #132]	@ (80052d4 <HAL_RCC_OscConfig+0x76c>)
 8005250:	f023 0301 	bic.w	r3, r3, #1
 8005254:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005256:	4b1f      	ldr	r3, [pc, #124]	@ (80052d4 <HAL_RCC_OscConfig+0x76c>)
 8005258:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800525a:	4b21      	ldr	r3, [pc, #132]	@ (80052e0 <HAL_RCC_OscConfig+0x778>)
 800525c:	4013      	ands	r3, r2
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005262:	00d2      	lsls	r2, r2, #3
 8005264:	491b      	ldr	r1, [pc, #108]	@ (80052d4 <HAL_RCC_OscConfig+0x76c>)
 8005266:	4313      	orrs	r3, r2
 8005268:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800526a:	4b1a      	ldr	r3, [pc, #104]	@ (80052d4 <HAL_RCC_OscConfig+0x76c>)
 800526c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800526e:	f023 020c 	bic.w	r2, r3, #12
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005276:	4917      	ldr	r1, [pc, #92]	@ (80052d4 <HAL_RCC_OscConfig+0x76c>)
 8005278:	4313      	orrs	r3, r2
 800527a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800527c:	4b15      	ldr	r3, [pc, #84]	@ (80052d4 <HAL_RCC_OscConfig+0x76c>)
 800527e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005280:	f023 0202 	bic.w	r2, r3, #2
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005288:	4912      	ldr	r1, [pc, #72]	@ (80052d4 <HAL_RCC_OscConfig+0x76c>)
 800528a:	4313      	orrs	r3, r2
 800528c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800528e:	4b11      	ldr	r3, [pc, #68]	@ (80052d4 <HAL_RCC_OscConfig+0x76c>)
 8005290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005292:	4a10      	ldr	r2, [pc, #64]	@ (80052d4 <HAL_RCC_OscConfig+0x76c>)
 8005294:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005298:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800529a:	4b0e      	ldr	r3, [pc, #56]	@ (80052d4 <HAL_RCC_OscConfig+0x76c>)
 800529c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800529e:	4a0d      	ldr	r2, [pc, #52]	@ (80052d4 <HAL_RCC_OscConfig+0x76c>)
 80052a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80052a6:	4b0b      	ldr	r3, [pc, #44]	@ (80052d4 <HAL_RCC_OscConfig+0x76c>)
 80052a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052aa:	4a0a      	ldr	r2, [pc, #40]	@ (80052d4 <HAL_RCC_OscConfig+0x76c>)
 80052ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80052b2:	4b08      	ldr	r3, [pc, #32]	@ (80052d4 <HAL_RCC_OscConfig+0x76c>)
 80052b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b6:	4a07      	ldr	r2, [pc, #28]	@ (80052d4 <HAL_RCC_OscConfig+0x76c>)
 80052b8:	f043 0301 	orr.w	r3, r3, #1
 80052bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052be:	4b05      	ldr	r3, [pc, #20]	@ (80052d4 <HAL_RCC_OscConfig+0x76c>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a04      	ldr	r2, [pc, #16]	@ (80052d4 <HAL_RCC_OscConfig+0x76c>)
 80052c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ca:	f7fc fa87 	bl	80017dc <HAL_GetTick>
 80052ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052d0:	e011      	b.n	80052f6 <HAL_RCC_OscConfig+0x78e>
 80052d2:	bf00      	nop
 80052d4:	58024400 	.word	0x58024400
 80052d8:	58024800 	.word	0x58024800
 80052dc:	fffffc0c 	.word	0xfffffc0c
 80052e0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052e4:	f7fc fa7a 	bl	80017dc <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d901      	bls.n	80052f6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e08a      	b.n	800540c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052f6:	4b47      	ldr	r3, [pc, #284]	@ (8005414 <HAL_RCC_OscConfig+0x8ac>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d0f0      	beq.n	80052e4 <HAL_RCC_OscConfig+0x77c>
 8005302:	e082      	b.n	800540a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005304:	4b43      	ldr	r3, [pc, #268]	@ (8005414 <HAL_RCC_OscConfig+0x8ac>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a42      	ldr	r2, [pc, #264]	@ (8005414 <HAL_RCC_OscConfig+0x8ac>)
 800530a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800530e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005310:	f7fc fa64 	bl	80017dc <HAL_GetTick>
 8005314:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005316:	e008      	b.n	800532a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005318:	f7fc fa60 	bl	80017dc <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	2b02      	cmp	r3, #2
 8005324:	d901      	bls.n	800532a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e070      	b.n	800540c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800532a:	4b3a      	ldr	r3, [pc, #232]	@ (8005414 <HAL_RCC_OscConfig+0x8ac>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1f0      	bne.n	8005318 <HAL_RCC_OscConfig+0x7b0>
 8005336:	e068      	b.n	800540a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005338:	4b36      	ldr	r3, [pc, #216]	@ (8005414 <HAL_RCC_OscConfig+0x8ac>)
 800533a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800533c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800533e:	4b35      	ldr	r3, [pc, #212]	@ (8005414 <HAL_RCC_OscConfig+0x8ac>)
 8005340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005342:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005348:	2b01      	cmp	r3, #1
 800534a:	d031      	beq.n	80053b0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	f003 0203 	and.w	r2, r3, #3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005356:	429a      	cmp	r2, r3
 8005358:	d12a      	bne.n	80053b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	091b      	lsrs	r3, r3, #4
 800535e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005366:	429a      	cmp	r2, r3
 8005368:	d122      	bne.n	80053b0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005374:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005376:	429a      	cmp	r2, r3
 8005378:	d11a      	bne.n	80053b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	0a5b      	lsrs	r3, r3, #9
 800537e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005386:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005388:	429a      	cmp	r2, r3
 800538a:	d111      	bne.n	80053b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	0c1b      	lsrs	r3, r3, #16
 8005390:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005398:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800539a:	429a      	cmp	r2, r3
 800539c:	d108      	bne.n	80053b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	0e1b      	lsrs	r3, r3, #24
 80053a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053aa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d001      	beq.n	80053b4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e02b      	b.n	800540c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80053b4:	4b17      	ldr	r3, [pc, #92]	@ (8005414 <HAL_RCC_OscConfig+0x8ac>)
 80053b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053b8:	08db      	lsrs	r3, r3, #3
 80053ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80053be:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d01f      	beq.n	800540a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80053ca:	4b12      	ldr	r3, [pc, #72]	@ (8005414 <HAL_RCC_OscConfig+0x8ac>)
 80053cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ce:	4a11      	ldr	r2, [pc, #68]	@ (8005414 <HAL_RCC_OscConfig+0x8ac>)
 80053d0:	f023 0301 	bic.w	r3, r3, #1
 80053d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80053d6:	f7fc fa01 	bl	80017dc <HAL_GetTick>
 80053da:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80053dc:	bf00      	nop
 80053de:	f7fc f9fd 	bl	80017dc <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d0f9      	beq.n	80053de <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80053ea:	4b0a      	ldr	r3, [pc, #40]	@ (8005414 <HAL_RCC_OscConfig+0x8ac>)
 80053ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053ee:	4b0a      	ldr	r3, [pc, #40]	@ (8005418 <HAL_RCC_OscConfig+0x8b0>)
 80053f0:	4013      	ands	r3, r2
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80053f6:	00d2      	lsls	r2, r2, #3
 80053f8:	4906      	ldr	r1, [pc, #24]	@ (8005414 <HAL_RCC_OscConfig+0x8ac>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80053fe:	4b05      	ldr	r3, [pc, #20]	@ (8005414 <HAL_RCC_OscConfig+0x8ac>)
 8005400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005402:	4a04      	ldr	r2, [pc, #16]	@ (8005414 <HAL_RCC_OscConfig+0x8ac>)
 8005404:	f043 0301 	orr.w	r3, r3, #1
 8005408:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3730      	adds	r7, #48	@ 0x30
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	58024400 	.word	0x58024400
 8005418:	ffff0007 	.word	0xffff0007

0800541c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b086      	sub	sp, #24
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d101      	bne.n	8005430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e19c      	b.n	800576a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005430:	4b8a      	ldr	r3, [pc, #552]	@ (800565c <HAL_RCC_ClockConfig+0x240>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 030f 	and.w	r3, r3, #15
 8005438:	683a      	ldr	r2, [r7, #0]
 800543a:	429a      	cmp	r2, r3
 800543c:	d910      	bls.n	8005460 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800543e:	4b87      	ldr	r3, [pc, #540]	@ (800565c <HAL_RCC_ClockConfig+0x240>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f023 020f 	bic.w	r2, r3, #15
 8005446:	4985      	ldr	r1, [pc, #532]	@ (800565c <HAL_RCC_ClockConfig+0x240>)
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	4313      	orrs	r3, r2
 800544c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800544e:	4b83      	ldr	r3, [pc, #524]	@ (800565c <HAL_RCC_ClockConfig+0x240>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 030f 	and.w	r3, r3, #15
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	429a      	cmp	r2, r3
 800545a:	d001      	beq.n	8005460 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e184      	b.n	800576a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0304 	and.w	r3, r3, #4
 8005468:	2b00      	cmp	r3, #0
 800546a:	d010      	beq.n	800548e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691a      	ldr	r2, [r3, #16]
 8005470:	4b7b      	ldr	r3, [pc, #492]	@ (8005660 <HAL_RCC_ClockConfig+0x244>)
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005478:	429a      	cmp	r2, r3
 800547a:	d908      	bls.n	800548e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800547c:	4b78      	ldr	r3, [pc, #480]	@ (8005660 <HAL_RCC_ClockConfig+0x244>)
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	4975      	ldr	r1, [pc, #468]	@ (8005660 <HAL_RCC_ClockConfig+0x244>)
 800548a:	4313      	orrs	r3, r2
 800548c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0308 	and.w	r3, r3, #8
 8005496:	2b00      	cmp	r3, #0
 8005498:	d010      	beq.n	80054bc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	695a      	ldr	r2, [r3, #20]
 800549e:	4b70      	ldr	r3, [pc, #448]	@ (8005660 <HAL_RCC_ClockConfig+0x244>)
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d908      	bls.n	80054bc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80054aa:	4b6d      	ldr	r3, [pc, #436]	@ (8005660 <HAL_RCC_ClockConfig+0x244>)
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	496a      	ldr	r1, [pc, #424]	@ (8005660 <HAL_RCC_ClockConfig+0x244>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0310 	and.w	r3, r3, #16
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d010      	beq.n	80054ea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	699a      	ldr	r2, [r3, #24]
 80054cc:	4b64      	ldr	r3, [pc, #400]	@ (8005660 <HAL_RCC_ClockConfig+0x244>)
 80054ce:	69db      	ldr	r3, [r3, #28]
 80054d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d908      	bls.n	80054ea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80054d8:	4b61      	ldr	r3, [pc, #388]	@ (8005660 <HAL_RCC_ClockConfig+0x244>)
 80054da:	69db      	ldr	r3, [r3, #28]
 80054dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	495e      	ldr	r1, [pc, #376]	@ (8005660 <HAL_RCC_ClockConfig+0x244>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0320 	and.w	r3, r3, #32
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d010      	beq.n	8005518 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	69da      	ldr	r2, [r3, #28]
 80054fa:	4b59      	ldr	r3, [pc, #356]	@ (8005660 <HAL_RCC_ClockConfig+0x244>)
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005502:	429a      	cmp	r2, r3
 8005504:	d908      	bls.n	8005518 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005506:	4b56      	ldr	r3, [pc, #344]	@ (8005660 <HAL_RCC_ClockConfig+0x244>)
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	69db      	ldr	r3, [r3, #28]
 8005512:	4953      	ldr	r1, [pc, #332]	@ (8005660 <HAL_RCC_ClockConfig+0x244>)
 8005514:	4313      	orrs	r3, r2
 8005516:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0302 	and.w	r3, r3, #2
 8005520:	2b00      	cmp	r3, #0
 8005522:	d010      	beq.n	8005546 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	68da      	ldr	r2, [r3, #12]
 8005528:	4b4d      	ldr	r3, [pc, #308]	@ (8005660 <HAL_RCC_ClockConfig+0x244>)
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	f003 030f 	and.w	r3, r3, #15
 8005530:	429a      	cmp	r2, r3
 8005532:	d908      	bls.n	8005546 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005534:	4b4a      	ldr	r3, [pc, #296]	@ (8005660 <HAL_RCC_ClockConfig+0x244>)
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	f023 020f 	bic.w	r2, r3, #15
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	4947      	ldr	r1, [pc, #284]	@ (8005660 <HAL_RCC_ClockConfig+0x244>)
 8005542:	4313      	orrs	r3, r2
 8005544:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	2b00      	cmp	r3, #0
 8005550:	d055      	beq.n	80055fe <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005552:	4b43      	ldr	r3, [pc, #268]	@ (8005660 <HAL_RCC_ClockConfig+0x244>)
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	4940      	ldr	r1, [pc, #256]	@ (8005660 <HAL_RCC_ClockConfig+0x244>)
 8005560:	4313      	orrs	r3, r2
 8005562:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	2b02      	cmp	r3, #2
 800556a:	d107      	bne.n	800557c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800556c:	4b3c      	ldr	r3, [pc, #240]	@ (8005660 <HAL_RCC_ClockConfig+0x244>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d121      	bne.n	80055bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e0f6      	b.n	800576a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	2b03      	cmp	r3, #3
 8005582:	d107      	bne.n	8005594 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005584:	4b36      	ldr	r3, [pc, #216]	@ (8005660 <HAL_RCC_ClockConfig+0x244>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d115      	bne.n	80055bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e0ea      	b.n	800576a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d107      	bne.n	80055ac <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800559c:	4b30      	ldr	r3, [pc, #192]	@ (8005660 <HAL_RCC_ClockConfig+0x244>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d109      	bne.n	80055bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e0de      	b.n	800576a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055ac:	4b2c      	ldr	r3, [pc, #176]	@ (8005660 <HAL_RCC_ClockConfig+0x244>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0304 	and.w	r3, r3, #4
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d101      	bne.n	80055bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e0d6      	b.n	800576a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80055bc:	4b28      	ldr	r3, [pc, #160]	@ (8005660 <HAL_RCC_ClockConfig+0x244>)
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	f023 0207 	bic.w	r2, r3, #7
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	4925      	ldr	r1, [pc, #148]	@ (8005660 <HAL_RCC_ClockConfig+0x244>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055ce:	f7fc f905 	bl	80017dc <HAL_GetTick>
 80055d2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055d4:	e00a      	b.n	80055ec <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055d6:	f7fc f901 	bl	80017dc <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d901      	bls.n	80055ec <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e0be      	b.n	800576a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055ec:	4b1c      	ldr	r3, [pc, #112]	@ (8005660 <HAL_RCC_ClockConfig+0x244>)
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	00db      	lsls	r3, r3, #3
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d1eb      	bne.n	80055d6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d010      	beq.n	800562c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	68da      	ldr	r2, [r3, #12]
 800560e:	4b14      	ldr	r3, [pc, #80]	@ (8005660 <HAL_RCC_ClockConfig+0x244>)
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	f003 030f 	and.w	r3, r3, #15
 8005616:	429a      	cmp	r2, r3
 8005618:	d208      	bcs.n	800562c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800561a:	4b11      	ldr	r3, [pc, #68]	@ (8005660 <HAL_RCC_ClockConfig+0x244>)
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	f023 020f 	bic.w	r2, r3, #15
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	490e      	ldr	r1, [pc, #56]	@ (8005660 <HAL_RCC_ClockConfig+0x244>)
 8005628:	4313      	orrs	r3, r2
 800562a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800562c:	4b0b      	ldr	r3, [pc, #44]	@ (800565c <HAL_RCC_ClockConfig+0x240>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 030f 	and.w	r3, r3, #15
 8005634:	683a      	ldr	r2, [r7, #0]
 8005636:	429a      	cmp	r2, r3
 8005638:	d214      	bcs.n	8005664 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800563a:	4b08      	ldr	r3, [pc, #32]	@ (800565c <HAL_RCC_ClockConfig+0x240>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f023 020f 	bic.w	r2, r3, #15
 8005642:	4906      	ldr	r1, [pc, #24]	@ (800565c <HAL_RCC_ClockConfig+0x240>)
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	4313      	orrs	r3, r2
 8005648:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800564a:	4b04      	ldr	r3, [pc, #16]	@ (800565c <HAL_RCC_ClockConfig+0x240>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 030f 	and.w	r3, r3, #15
 8005652:	683a      	ldr	r2, [r7, #0]
 8005654:	429a      	cmp	r2, r3
 8005656:	d005      	beq.n	8005664 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e086      	b.n	800576a <HAL_RCC_ClockConfig+0x34e>
 800565c:	52002000 	.word	0x52002000
 8005660:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0304 	and.w	r3, r3, #4
 800566c:	2b00      	cmp	r3, #0
 800566e:	d010      	beq.n	8005692 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	691a      	ldr	r2, [r3, #16]
 8005674:	4b3f      	ldr	r3, [pc, #252]	@ (8005774 <HAL_RCC_ClockConfig+0x358>)
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800567c:	429a      	cmp	r2, r3
 800567e:	d208      	bcs.n	8005692 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005680:	4b3c      	ldr	r3, [pc, #240]	@ (8005774 <HAL_RCC_ClockConfig+0x358>)
 8005682:	699b      	ldr	r3, [r3, #24]
 8005684:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	4939      	ldr	r1, [pc, #228]	@ (8005774 <HAL_RCC_ClockConfig+0x358>)
 800568e:	4313      	orrs	r3, r2
 8005690:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0308 	and.w	r3, r3, #8
 800569a:	2b00      	cmp	r3, #0
 800569c:	d010      	beq.n	80056c0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	695a      	ldr	r2, [r3, #20]
 80056a2:	4b34      	ldr	r3, [pc, #208]	@ (8005774 <HAL_RCC_ClockConfig+0x358>)
 80056a4:	69db      	ldr	r3, [r3, #28]
 80056a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d208      	bcs.n	80056c0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80056ae:	4b31      	ldr	r3, [pc, #196]	@ (8005774 <HAL_RCC_ClockConfig+0x358>)
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	492e      	ldr	r1, [pc, #184]	@ (8005774 <HAL_RCC_ClockConfig+0x358>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0310 	and.w	r3, r3, #16
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d010      	beq.n	80056ee <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	699a      	ldr	r2, [r3, #24]
 80056d0:	4b28      	ldr	r3, [pc, #160]	@ (8005774 <HAL_RCC_ClockConfig+0x358>)
 80056d2:	69db      	ldr	r3, [r3, #28]
 80056d4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80056d8:	429a      	cmp	r2, r3
 80056da:	d208      	bcs.n	80056ee <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80056dc:	4b25      	ldr	r3, [pc, #148]	@ (8005774 <HAL_RCC_ClockConfig+0x358>)
 80056de:	69db      	ldr	r3, [r3, #28]
 80056e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	4922      	ldr	r1, [pc, #136]	@ (8005774 <HAL_RCC_ClockConfig+0x358>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0320 	and.w	r3, r3, #32
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d010      	beq.n	800571c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	69da      	ldr	r2, [r3, #28]
 80056fe:	4b1d      	ldr	r3, [pc, #116]	@ (8005774 <HAL_RCC_ClockConfig+0x358>)
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005706:	429a      	cmp	r2, r3
 8005708:	d208      	bcs.n	800571c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800570a:	4b1a      	ldr	r3, [pc, #104]	@ (8005774 <HAL_RCC_ClockConfig+0x358>)
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	4917      	ldr	r1, [pc, #92]	@ (8005774 <HAL_RCC_ClockConfig+0x358>)
 8005718:	4313      	orrs	r3, r2
 800571a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800571c:	f000 f834 	bl	8005788 <HAL_RCC_GetSysClockFreq>
 8005720:	4602      	mov	r2, r0
 8005722:	4b14      	ldr	r3, [pc, #80]	@ (8005774 <HAL_RCC_ClockConfig+0x358>)
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	0a1b      	lsrs	r3, r3, #8
 8005728:	f003 030f 	and.w	r3, r3, #15
 800572c:	4912      	ldr	r1, [pc, #72]	@ (8005778 <HAL_RCC_ClockConfig+0x35c>)
 800572e:	5ccb      	ldrb	r3, [r1, r3]
 8005730:	f003 031f 	and.w	r3, r3, #31
 8005734:	fa22 f303 	lsr.w	r3, r2, r3
 8005738:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800573a:	4b0e      	ldr	r3, [pc, #56]	@ (8005774 <HAL_RCC_ClockConfig+0x358>)
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	f003 030f 	and.w	r3, r3, #15
 8005742:	4a0d      	ldr	r2, [pc, #52]	@ (8005778 <HAL_RCC_ClockConfig+0x35c>)
 8005744:	5cd3      	ldrb	r3, [r2, r3]
 8005746:	f003 031f 	and.w	r3, r3, #31
 800574a:	693a      	ldr	r2, [r7, #16]
 800574c:	fa22 f303 	lsr.w	r3, r2, r3
 8005750:	4a0a      	ldr	r2, [pc, #40]	@ (800577c <HAL_RCC_ClockConfig+0x360>)
 8005752:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005754:	4a0a      	ldr	r2, [pc, #40]	@ (8005780 <HAL_RCC_ClockConfig+0x364>)
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800575a:	4b0a      	ldr	r3, [pc, #40]	@ (8005784 <HAL_RCC_ClockConfig+0x368>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4618      	mov	r0, r3
 8005760:	f7fb fff2 	bl	8001748 <HAL_InitTick>
 8005764:	4603      	mov	r3, r0
 8005766:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005768:	7bfb      	ldrb	r3, [r7, #15]
}
 800576a:	4618      	mov	r0, r3
 800576c:	3718      	adds	r7, #24
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	58024400 	.word	0x58024400
 8005778:	0800a8b4 	.word	0x0800a8b4
 800577c:	24000008 	.word	0x24000008
 8005780:	24000004 	.word	0x24000004
 8005784:	2400000c 	.word	0x2400000c

08005788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005788:	b480      	push	{r7}
 800578a:	b089      	sub	sp, #36	@ 0x24
 800578c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800578e:	4bb3      	ldr	r3, [pc, #716]	@ (8005a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005796:	2b18      	cmp	r3, #24
 8005798:	f200 8155 	bhi.w	8005a46 <HAL_RCC_GetSysClockFreq+0x2be>
 800579c:	a201      	add	r2, pc, #4	@ (adr r2, 80057a4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800579e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a2:	bf00      	nop
 80057a4:	08005809 	.word	0x08005809
 80057a8:	08005a47 	.word	0x08005a47
 80057ac:	08005a47 	.word	0x08005a47
 80057b0:	08005a47 	.word	0x08005a47
 80057b4:	08005a47 	.word	0x08005a47
 80057b8:	08005a47 	.word	0x08005a47
 80057bc:	08005a47 	.word	0x08005a47
 80057c0:	08005a47 	.word	0x08005a47
 80057c4:	0800582f 	.word	0x0800582f
 80057c8:	08005a47 	.word	0x08005a47
 80057cc:	08005a47 	.word	0x08005a47
 80057d0:	08005a47 	.word	0x08005a47
 80057d4:	08005a47 	.word	0x08005a47
 80057d8:	08005a47 	.word	0x08005a47
 80057dc:	08005a47 	.word	0x08005a47
 80057e0:	08005a47 	.word	0x08005a47
 80057e4:	08005835 	.word	0x08005835
 80057e8:	08005a47 	.word	0x08005a47
 80057ec:	08005a47 	.word	0x08005a47
 80057f0:	08005a47 	.word	0x08005a47
 80057f4:	08005a47 	.word	0x08005a47
 80057f8:	08005a47 	.word	0x08005a47
 80057fc:	08005a47 	.word	0x08005a47
 8005800:	08005a47 	.word	0x08005a47
 8005804:	0800583b 	.word	0x0800583b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005808:	4b94      	ldr	r3, [pc, #592]	@ (8005a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0320 	and.w	r3, r3, #32
 8005810:	2b00      	cmp	r3, #0
 8005812:	d009      	beq.n	8005828 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005814:	4b91      	ldr	r3, [pc, #580]	@ (8005a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	08db      	lsrs	r3, r3, #3
 800581a:	f003 0303 	and.w	r3, r3, #3
 800581e:	4a90      	ldr	r2, [pc, #576]	@ (8005a60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005820:	fa22 f303 	lsr.w	r3, r2, r3
 8005824:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005826:	e111      	b.n	8005a4c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005828:	4b8d      	ldr	r3, [pc, #564]	@ (8005a60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800582a:	61bb      	str	r3, [r7, #24]
      break;
 800582c:	e10e      	b.n	8005a4c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800582e:	4b8d      	ldr	r3, [pc, #564]	@ (8005a64 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005830:	61bb      	str	r3, [r7, #24]
      break;
 8005832:	e10b      	b.n	8005a4c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005834:	4b8c      	ldr	r3, [pc, #560]	@ (8005a68 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005836:	61bb      	str	r3, [r7, #24]
      break;
 8005838:	e108      	b.n	8005a4c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800583a:	4b88      	ldr	r3, [pc, #544]	@ (8005a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800583c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800583e:	f003 0303 	and.w	r3, r3, #3
 8005842:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005844:	4b85      	ldr	r3, [pc, #532]	@ (8005a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005848:	091b      	lsrs	r3, r3, #4
 800584a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800584e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005850:	4b82      	ldr	r3, [pc, #520]	@ (8005a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005854:	f003 0301 	and.w	r3, r3, #1
 8005858:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800585a:	4b80      	ldr	r3, [pc, #512]	@ (8005a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800585c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800585e:	08db      	lsrs	r3, r3, #3
 8005860:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	fb02 f303 	mul.w	r3, r2, r3
 800586a:	ee07 3a90 	vmov	s15, r3
 800586e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005872:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	2b00      	cmp	r3, #0
 800587a:	f000 80e1 	beq.w	8005a40 <HAL_RCC_GetSysClockFreq+0x2b8>
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	2b02      	cmp	r3, #2
 8005882:	f000 8083 	beq.w	800598c <HAL_RCC_GetSysClockFreq+0x204>
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	2b02      	cmp	r3, #2
 800588a:	f200 80a1 	bhi.w	80059d0 <HAL_RCC_GetSysClockFreq+0x248>
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d003      	beq.n	800589c <HAL_RCC_GetSysClockFreq+0x114>
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d056      	beq.n	8005948 <HAL_RCC_GetSysClockFreq+0x1c0>
 800589a:	e099      	b.n	80059d0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800589c:	4b6f      	ldr	r3, [pc, #444]	@ (8005a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0320 	and.w	r3, r3, #32
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d02d      	beq.n	8005904 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80058a8:	4b6c      	ldr	r3, [pc, #432]	@ (8005a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	08db      	lsrs	r3, r3, #3
 80058ae:	f003 0303 	and.w	r3, r3, #3
 80058b2:	4a6b      	ldr	r2, [pc, #428]	@ (8005a60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80058b4:	fa22 f303 	lsr.w	r3, r2, r3
 80058b8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	ee07 3a90 	vmov	s15, r3
 80058c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	ee07 3a90 	vmov	s15, r3
 80058ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058d2:	4b62      	ldr	r3, [pc, #392]	@ (8005a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058da:	ee07 3a90 	vmov	s15, r3
 80058de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80058e6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005a6c <HAL_RCC_GetSysClockFreq+0x2e4>
 80058ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058fe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005902:	e087      	b.n	8005a14 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	ee07 3a90 	vmov	s15, r3
 800590a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800590e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005a70 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005916:	4b51      	ldr	r3, [pc, #324]	@ (8005a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800591a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800591e:	ee07 3a90 	vmov	s15, r3
 8005922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005926:	ed97 6a02 	vldr	s12, [r7, #8]
 800592a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005a6c <HAL_RCC_GetSysClockFreq+0x2e4>
 800592e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005936:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800593a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800593e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005942:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005946:	e065      	b.n	8005a14 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	ee07 3a90 	vmov	s15, r3
 800594e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005952:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005a74 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800595a:	4b40      	ldr	r3, [pc, #256]	@ (8005a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800595c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800595e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005962:	ee07 3a90 	vmov	s15, r3
 8005966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800596a:	ed97 6a02 	vldr	s12, [r7, #8]
 800596e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005a6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800597a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800597e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005986:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800598a:	e043      	b.n	8005a14 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	ee07 3a90 	vmov	s15, r3
 8005992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005996:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005a78 <HAL_RCC_GetSysClockFreq+0x2f0>
 800599a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800599e:	4b2f      	ldr	r3, [pc, #188]	@ (8005a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059a6:	ee07 3a90 	vmov	s15, r3
 80059aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80059b2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005a6c <HAL_RCC_GetSysClockFreq+0x2e4>
 80059b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80059ce:	e021      	b.n	8005a14 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	ee07 3a90 	vmov	s15, r3
 80059d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059da:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005a74 <HAL_RCC_GetSysClockFreq+0x2ec>
 80059de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059e2:	4b1e      	ldr	r3, [pc, #120]	@ (8005a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ea:	ee07 3a90 	vmov	s15, r3
 80059ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80059f6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005a6c <HAL_RCC_GetSysClockFreq+0x2e4>
 80059fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a0e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a12:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005a14:	4b11      	ldr	r3, [pc, #68]	@ (8005a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a18:	0a5b      	lsrs	r3, r3, #9
 8005a1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a1e:	3301      	adds	r3, #1
 8005a20:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	ee07 3a90 	vmov	s15, r3
 8005a28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a38:	ee17 3a90 	vmov	r3, s15
 8005a3c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005a3e:	e005      	b.n	8005a4c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005a40:	2300      	movs	r3, #0
 8005a42:	61bb      	str	r3, [r7, #24]
      break;
 8005a44:	e002      	b.n	8005a4c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005a46:	4b07      	ldr	r3, [pc, #28]	@ (8005a64 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005a48:	61bb      	str	r3, [r7, #24]
      break;
 8005a4a:	bf00      	nop
  }

  return sysclockfreq;
 8005a4c:	69bb      	ldr	r3, [r7, #24]
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3724      	adds	r7, #36	@ 0x24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	58024400 	.word	0x58024400
 8005a60:	03d09000 	.word	0x03d09000
 8005a64:	003d0900 	.word	0x003d0900
 8005a68:	017d7840 	.word	0x017d7840
 8005a6c:	46000000 	.word	0x46000000
 8005a70:	4c742400 	.word	0x4c742400
 8005a74:	4a742400 	.word	0x4a742400
 8005a78:	4bbebc20 	.word	0x4bbebc20

08005a7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005a82:	f7ff fe81 	bl	8005788 <HAL_RCC_GetSysClockFreq>
 8005a86:	4602      	mov	r2, r0
 8005a88:	4b10      	ldr	r3, [pc, #64]	@ (8005acc <HAL_RCC_GetHCLKFreq+0x50>)
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	0a1b      	lsrs	r3, r3, #8
 8005a8e:	f003 030f 	and.w	r3, r3, #15
 8005a92:	490f      	ldr	r1, [pc, #60]	@ (8005ad0 <HAL_RCC_GetHCLKFreq+0x54>)
 8005a94:	5ccb      	ldrb	r3, [r1, r3]
 8005a96:	f003 031f 	and.w	r3, r3, #31
 8005a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a9e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8005acc <HAL_RCC_GetHCLKFreq+0x50>)
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	f003 030f 	and.w	r3, r3, #15
 8005aa8:	4a09      	ldr	r2, [pc, #36]	@ (8005ad0 <HAL_RCC_GetHCLKFreq+0x54>)
 8005aaa:	5cd3      	ldrb	r3, [r2, r3]
 8005aac:	f003 031f 	and.w	r3, r3, #31
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ab6:	4a07      	ldr	r2, [pc, #28]	@ (8005ad4 <HAL_RCC_GetHCLKFreq+0x58>)
 8005ab8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005aba:	4a07      	ldr	r2, [pc, #28]	@ (8005ad8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005ac0:	4b04      	ldr	r3, [pc, #16]	@ (8005ad4 <HAL_RCC_GetHCLKFreq+0x58>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3708      	adds	r7, #8
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	58024400 	.word	0x58024400
 8005ad0:	0800a8b4 	.word	0x0800a8b4
 8005ad4:	24000008 	.word	0x24000008
 8005ad8:	24000004 	.word	0x24000004

08005adc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005ae0:	f7ff ffcc 	bl	8005a7c <HAL_RCC_GetHCLKFreq>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	4b06      	ldr	r3, [pc, #24]	@ (8005b00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	091b      	lsrs	r3, r3, #4
 8005aec:	f003 0307 	and.w	r3, r3, #7
 8005af0:	4904      	ldr	r1, [pc, #16]	@ (8005b04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005af2:	5ccb      	ldrb	r3, [r1, r3]
 8005af4:	f003 031f 	and.w	r3, r3, #31
 8005af8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	58024400 	.word	0x58024400
 8005b04:	0800a8b4 	.word	0x0800a8b4

08005b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005b0c:	f7ff ffb6 	bl	8005a7c <HAL_RCC_GetHCLKFreq>
 8005b10:	4602      	mov	r2, r0
 8005b12:	4b06      	ldr	r3, [pc, #24]	@ (8005b2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b14:	69db      	ldr	r3, [r3, #28]
 8005b16:	0a1b      	lsrs	r3, r3, #8
 8005b18:	f003 0307 	and.w	r3, r3, #7
 8005b1c:	4904      	ldr	r1, [pc, #16]	@ (8005b30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b1e:	5ccb      	ldrb	r3, [r1, r3]
 8005b20:	f003 031f 	and.w	r3, r3, #31
 8005b24:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	58024400 	.word	0x58024400
 8005b30:	0800a8b4 	.word	0x0800a8b4

08005b34 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b38:	b0ca      	sub	sp, #296	@ 0x128
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b40:	2300      	movs	r3, #0
 8005b42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b46:	2300      	movs	r3, #0
 8005b48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b54:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005b58:	2500      	movs	r5, #0
 8005b5a:	ea54 0305 	orrs.w	r3, r4, r5
 8005b5e:	d049      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b66:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b6a:	d02f      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005b6c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b70:	d828      	bhi.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005b72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b76:	d01a      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005b78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b7c:	d822      	bhi.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d003      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005b82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b86:	d007      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005b88:	e01c      	b.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b8a:	4bb8      	ldr	r3, [pc, #736]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b8e:	4ab7      	ldr	r2, [pc, #732]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b96:	e01a      	b.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b9c:	3308      	adds	r3, #8
 8005b9e:	2102      	movs	r1, #2
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f001 fc8f 	bl	80074c4 <RCCEx_PLL2_Config>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005bac:	e00f      	b.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bb2:	3328      	adds	r3, #40	@ 0x28
 8005bb4:	2102      	movs	r1, #2
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f001 fd36 	bl	8007628 <RCCEx_PLL3_Config>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005bc2:	e004      	b.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005bca:	e000      	b.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005bcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d10a      	bne.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005bd6:	4ba5      	ldr	r3, [pc, #660]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bda:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005be2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005be4:	4aa1      	ldr	r2, [pc, #644]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005be6:	430b      	orrs	r3, r1
 8005be8:	6513      	str	r3, [r2, #80]	@ 0x50
 8005bea:	e003      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bf0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005c00:	f04f 0900 	mov.w	r9, #0
 8005c04:	ea58 0309 	orrs.w	r3, r8, r9
 8005c08:	d047      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c10:	2b04      	cmp	r3, #4
 8005c12:	d82a      	bhi.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005c14:	a201      	add	r2, pc, #4	@ (adr r2, 8005c1c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1a:	bf00      	nop
 8005c1c:	08005c31 	.word	0x08005c31
 8005c20:	08005c3f 	.word	0x08005c3f
 8005c24:	08005c55 	.word	0x08005c55
 8005c28:	08005c73 	.word	0x08005c73
 8005c2c:	08005c73 	.word	0x08005c73
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c30:	4b8e      	ldr	r3, [pc, #568]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c34:	4a8d      	ldr	r2, [pc, #564]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c3c:	e01a      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c42:	3308      	adds	r3, #8
 8005c44:	2100      	movs	r1, #0
 8005c46:	4618      	mov	r0, r3
 8005c48:	f001 fc3c 	bl	80074c4 <RCCEx_PLL2_Config>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c52:	e00f      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c58:	3328      	adds	r3, #40	@ 0x28
 8005c5a:	2100      	movs	r1, #0
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f001 fce3 	bl	8007628 <RCCEx_PLL3_Config>
 8005c62:	4603      	mov	r3, r0
 8005c64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c68:	e004      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c70:	e000      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005c72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10a      	bne.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c7c:	4b7b      	ldr	r3, [pc, #492]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c80:	f023 0107 	bic.w	r1, r3, #7
 8005c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c8a:	4a78      	ldr	r2, [pc, #480]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c8c:	430b      	orrs	r3, r1
 8005c8e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c90:	e003      	b.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005ca6:	f04f 0b00 	mov.w	fp, #0
 8005caa:	ea5a 030b 	orrs.w	r3, sl, fp
 8005cae:	d04c      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cba:	d030      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005cbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cc0:	d829      	bhi.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005cc2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005cc4:	d02d      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005cc6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005cc8:	d825      	bhi.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005cca:	2b80      	cmp	r3, #128	@ 0x80
 8005ccc:	d018      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005cce:	2b80      	cmp	r3, #128	@ 0x80
 8005cd0:	d821      	bhi.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d002      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005cd6:	2b40      	cmp	r3, #64	@ 0x40
 8005cd8:	d007      	beq.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005cda:	e01c      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cdc:	4b63      	ldr	r3, [pc, #396]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce0:	4a62      	ldr	r2, [pc, #392]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ce2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ce6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005ce8:	e01c      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cee:	3308      	adds	r3, #8
 8005cf0:	2100      	movs	r1, #0
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f001 fbe6 	bl	80074c4 <RCCEx_PLL2_Config>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005cfe:	e011      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d04:	3328      	adds	r3, #40	@ 0x28
 8005d06:	2100      	movs	r1, #0
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f001 fc8d 	bl	8007628 <RCCEx_PLL3_Config>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005d14:	e006      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d1c:	e002      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005d1e:	bf00      	nop
 8005d20:	e000      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005d22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d10a      	bne.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005d2c:	4b4f      	ldr	r3, [pc, #316]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d30:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d3a:	4a4c      	ldr	r2, [pc, #304]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d3c:	430b      	orrs	r3, r1
 8005d3e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d40:	e003      	b.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d52:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005d56:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005d60:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005d64:	460b      	mov	r3, r1
 8005d66:	4313      	orrs	r3, r2
 8005d68:	d053      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005d72:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005d76:	d035      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005d78:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005d7c:	d82e      	bhi.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005d7e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005d82:	d031      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005d84:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005d88:	d828      	bhi.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005d8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d8e:	d01a      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005d90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d94:	d822      	bhi.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d003      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005d9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d9e:	d007      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005da0:	e01c      	b.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005da2:	4b32      	ldr	r3, [pc, #200]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da6:	4a31      	ldr	r2, [pc, #196]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005da8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005dae:	e01c      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005db4:	3308      	adds	r3, #8
 8005db6:	2100      	movs	r1, #0
 8005db8:	4618      	mov	r0, r3
 8005dba:	f001 fb83 	bl	80074c4 <RCCEx_PLL2_Config>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005dc4:	e011      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dca:	3328      	adds	r3, #40	@ 0x28
 8005dcc:	2100      	movs	r1, #0
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f001 fc2a 	bl	8007628 <RCCEx_PLL3_Config>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005dda:	e006      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005de2:	e002      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005de4:	bf00      	nop
 8005de6:	e000      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005de8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d10b      	bne.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005df2:	4b1e      	ldr	r3, [pc, #120]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005df6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dfe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005e02:	4a1a      	ldr	r2, [pc, #104]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e04:	430b      	orrs	r3, r1
 8005e06:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e08:	e003      	b.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005e1e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005e22:	2300      	movs	r3, #0
 8005e24:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005e28:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	d056      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e36:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005e3a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e3e:	d038      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005e40:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e44:	d831      	bhi.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005e46:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005e4a:	d034      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005e4c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005e50:	d82b      	bhi.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005e52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e56:	d01d      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005e58:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e5c:	d825      	bhi.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d006      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005e62:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e66:	d00a      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005e68:	e01f      	b.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005e6a:	bf00      	nop
 8005e6c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e70:	4ba2      	ldr	r3, [pc, #648]	@ (80060fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e74:	4aa1      	ldr	r2, [pc, #644]	@ (80060fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e7c:	e01c      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e82:	3308      	adds	r3, #8
 8005e84:	2100      	movs	r1, #0
 8005e86:	4618      	mov	r0, r3
 8005e88:	f001 fb1c 	bl	80074c4 <RCCEx_PLL2_Config>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005e92:	e011      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e98:	3328      	adds	r3, #40	@ 0x28
 8005e9a:	2100      	movs	r1, #0
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f001 fbc3 	bl	8007628 <RCCEx_PLL3_Config>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ea8:	e006      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005eb0:	e002      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005eb2:	bf00      	nop
 8005eb4:	e000      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005eb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d10b      	bne.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005ec0:	4b8e      	ldr	r3, [pc, #568]	@ (80060fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ec2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ec4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ecc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005ed0:	4a8a      	ldr	r2, [pc, #552]	@ (80060fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ed2:	430b      	orrs	r3, r1
 8005ed4:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ed6:	e003      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ed8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005edc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005eec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005ef6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005efa:	460b      	mov	r3, r1
 8005efc:	4313      	orrs	r3, r2
 8005efe:	d03a      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f06:	2b30      	cmp	r3, #48	@ 0x30
 8005f08:	d01f      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005f0a:	2b30      	cmp	r3, #48	@ 0x30
 8005f0c:	d819      	bhi.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005f0e:	2b20      	cmp	r3, #32
 8005f10:	d00c      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005f12:	2b20      	cmp	r3, #32
 8005f14:	d815      	bhi.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d019      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005f1a:	2b10      	cmp	r3, #16
 8005f1c:	d111      	bne.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f1e:	4b77      	ldr	r3, [pc, #476]	@ (80060fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f22:	4a76      	ldr	r2, [pc, #472]	@ (80060fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005f2a:	e011      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f30:	3308      	adds	r3, #8
 8005f32:	2102      	movs	r1, #2
 8005f34:	4618      	mov	r0, r3
 8005f36:	f001 fac5 	bl	80074c4 <RCCEx_PLL2_Config>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005f40:	e006      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f48:	e002      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005f4a:	bf00      	nop
 8005f4c:	e000      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005f4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10a      	bne.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005f58:	4b68      	ldr	r3, [pc, #416]	@ (80060fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f5c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f66:	4a65      	ldr	r2, [pc, #404]	@ (80060fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f68:	430b      	orrs	r3, r1
 8005f6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005f6c:	e003      	b.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f7e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005f82:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005f86:	2300      	movs	r3, #0
 8005f88:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005f8c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005f90:	460b      	mov	r3, r1
 8005f92:	4313      	orrs	r3, r2
 8005f94:	d051      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fa0:	d035      	beq.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005fa2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fa6:	d82e      	bhi.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005fa8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005fac:	d031      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005fae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005fb2:	d828      	bhi.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005fb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fb8:	d01a      	beq.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005fba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fbe:	d822      	bhi.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d003      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005fc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fc8:	d007      	beq.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005fca:	e01c      	b.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fcc:	4b4b      	ldr	r3, [pc, #300]	@ (80060fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd0:	4a4a      	ldr	r2, [pc, #296]	@ (80060fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005fd8:	e01c      	b.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fde:	3308      	adds	r3, #8
 8005fe0:	2100      	movs	r1, #0
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f001 fa6e 	bl	80074c4 <RCCEx_PLL2_Config>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005fee:	e011      	b.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ff4:	3328      	adds	r3, #40	@ 0x28
 8005ff6:	2100      	movs	r1, #0
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f001 fb15 	bl	8007628 <RCCEx_PLL3_Config>
 8005ffe:	4603      	mov	r3, r0
 8006000:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006004:	e006      	b.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800600c:	e002      	b.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800600e:	bf00      	nop
 8006010:	e000      	b.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006012:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006014:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006018:	2b00      	cmp	r3, #0
 800601a:	d10a      	bne.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800601c:	4b37      	ldr	r3, [pc, #220]	@ (80060fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800601e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006020:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800602a:	4a34      	ldr	r2, [pc, #208]	@ (80060fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800602c:	430b      	orrs	r3, r1
 800602e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006030:	e003      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006032:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006036:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800603a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800603e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006042:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006046:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800604a:	2300      	movs	r3, #0
 800604c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006050:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006054:	460b      	mov	r3, r1
 8006056:	4313      	orrs	r3, r2
 8006058:	d056      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800605a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800605e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006060:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006064:	d033      	beq.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006066:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800606a:	d82c      	bhi.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800606c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006070:	d02f      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006072:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006076:	d826      	bhi.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006078:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800607c:	d02b      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800607e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006082:	d820      	bhi.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006084:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006088:	d012      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800608a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800608e:	d81a      	bhi.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006090:	2b00      	cmp	r3, #0
 8006092:	d022      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006094:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006098:	d115      	bne.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800609a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800609e:	3308      	adds	r3, #8
 80060a0:	2101      	movs	r1, #1
 80060a2:	4618      	mov	r0, r3
 80060a4:	f001 fa0e 	bl	80074c4 <RCCEx_PLL2_Config>
 80060a8:	4603      	mov	r3, r0
 80060aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80060ae:	e015      	b.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060b4:	3328      	adds	r3, #40	@ 0x28
 80060b6:	2101      	movs	r1, #1
 80060b8:	4618      	mov	r0, r3
 80060ba:	f001 fab5 	bl	8007628 <RCCEx_PLL3_Config>
 80060be:	4603      	mov	r3, r0
 80060c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80060c4:	e00a      	b.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060cc:	e006      	b.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80060ce:	bf00      	nop
 80060d0:	e004      	b.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80060d2:	bf00      	nop
 80060d4:	e002      	b.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80060d6:	bf00      	nop
 80060d8:	e000      	b.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80060da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d10d      	bne.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80060e4:	4b05      	ldr	r3, [pc, #20]	@ (80060fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060e8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80060ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060f2:	4a02      	ldr	r2, [pc, #8]	@ (80060fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060f4:	430b      	orrs	r3, r1
 80060f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80060f8:	e006      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80060fa:	bf00      	nop
 80060fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006100:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006104:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800610c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006110:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006114:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006118:	2300      	movs	r3, #0
 800611a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800611e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006122:	460b      	mov	r3, r1
 8006124:	4313      	orrs	r3, r2
 8006126:	d055      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800612c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006130:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006134:	d033      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006136:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800613a:	d82c      	bhi.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800613c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006140:	d02f      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006142:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006146:	d826      	bhi.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006148:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800614c:	d02b      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800614e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006152:	d820      	bhi.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006154:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006158:	d012      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800615a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800615e:	d81a      	bhi.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006160:	2b00      	cmp	r3, #0
 8006162:	d022      	beq.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006164:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006168:	d115      	bne.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800616a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800616e:	3308      	adds	r3, #8
 8006170:	2101      	movs	r1, #1
 8006172:	4618      	mov	r0, r3
 8006174:	f001 f9a6 	bl	80074c4 <RCCEx_PLL2_Config>
 8006178:	4603      	mov	r3, r0
 800617a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800617e:	e015      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006184:	3328      	adds	r3, #40	@ 0x28
 8006186:	2101      	movs	r1, #1
 8006188:	4618      	mov	r0, r3
 800618a:	f001 fa4d 	bl	8007628 <RCCEx_PLL3_Config>
 800618e:	4603      	mov	r3, r0
 8006190:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006194:	e00a      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800619c:	e006      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800619e:	bf00      	nop
 80061a0:	e004      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80061a2:	bf00      	nop
 80061a4:	e002      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80061a6:	bf00      	nop
 80061a8:	e000      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80061aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10b      	bne.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80061b4:	4ba3      	ldr	r3, [pc, #652]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061b8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80061bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80061c4:	4a9f      	ldr	r2, [pc, #636]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061c6:	430b      	orrs	r3, r1
 80061c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80061ca:	e003      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80061d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061dc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80061e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80061e4:	2300      	movs	r3, #0
 80061e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80061ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80061ee:	460b      	mov	r3, r1
 80061f0:	4313      	orrs	r3, r2
 80061f2:	d037      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80061f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061fe:	d00e      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006200:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006204:	d816      	bhi.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006206:	2b00      	cmp	r3, #0
 8006208:	d018      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800620a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800620e:	d111      	bne.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006210:	4b8c      	ldr	r3, [pc, #560]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006214:	4a8b      	ldr	r2, [pc, #556]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006216:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800621a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800621c:	e00f      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800621e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006222:	3308      	adds	r3, #8
 8006224:	2101      	movs	r1, #1
 8006226:	4618      	mov	r0, r3
 8006228:	f001 f94c 	bl	80074c4 <RCCEx_PLL2_Config>
 800622c:	4603      	mov	r3, r0
 800622e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006232:	e004      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800623a:	e000      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800623c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800623e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006242:	2b00      	cmp	r3, #0
 8006244:	d10a      	bne.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006246:	4b7f      	ldr	r3, [pc, #508]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006248:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800624a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800624e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006252:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006254:	4a7b      	ldr	r2, [pc, #492]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006256:	430b      	orrs	r3, r1
 8006258:	6513      	str	r3, [r2, #80]	@ 0x50
 800625a:	e003      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800625c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006260:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006270:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006274:	2300      	movs	r3, #0
 8006276:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800627a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800627e:	460b      	mov	r3, r1
 8006280:	4313      	orrs	r3, r2
 8006282:	d039      	beq.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006288:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800628a:	2b03      	cmp	r3, #3
 800628c:	d81c      	bhi.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800628e:	a201      	add	r2, pc, #4	@ (adr r2, 8006294 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006294:	080062d1 	.word	0x080062d1
 8006298:	080062a5 	.word	0x080062a5
 800629c:	080062b3 	.word	0x080062b3
 80062a0:	080062d1 	.word	0x080062d1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062a4:	4b67      	ldr	r3, [pc, #412]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062a8:	4a66      	ldr	r2, [pc, #408]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80062b0:	e00f      	b.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80062b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062b6:	3308      	adds	r3, #8
 80062b8:	2102      	movs	r1, #2
 80062ba:	4618      	mov	r0, r3
 80062bc:	f001 f902 	bl	80074c4 <RCCEx_PLL2_Config>
 80062c0:	4603      	mov	r3, r0
 80062c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80062c6:	e004      	b.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80062ce:	e000      	b.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80062d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d10a      	bne.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80062da:	4b5a      	ldr	r3, [pc, #360]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062de:	f023 0103 	bic.w	r1, r3, #3
 80062e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062e8:	4a56      	ldr	r2, [pc, #344]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062ea:	430b      	orrs	r3, r1
 80062ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80062ee:	e003      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80062f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006300:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006304:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006308:	2300      	movs	r3, #0
 800630a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800630e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006312:	460b      	mov	r3, r1
 8006314:	4313      	orrs	r3, r2
 8006316:	f000 809f 	beq.w	8006458 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800631a:	4b4b      	ldr	r3, [pc, #300]	@ (8006448 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a4a      	ldr	r2, [pc, #296]	@ (8006448 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006320:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006324:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006326:	f7fb fa59 	bl	80017dc <HAL_GetTick>
 800632a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800632e:	e00b      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006330:	f7fb fa54 	bl	80017dc <HAL_GetTick>
 8006334:	4602      	mov	r2, r0
 8006336:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	2b64      	cmp	r3, #100	@ 0x64
 800633e:	d903      	bls.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006340:	2303      	movs	r3, #3
 8006342:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006346:	e005      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006348:	4b3f      	ldr	r3, [pc, #252]	@ (8006448 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006350:	2b00      	cmp	r3, #0
 8006352:	d0ed      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006354:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006358:	2b00      	cmp	r3, #0
 800635a:	d179      	bne.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800635c:	4b39      	ldr	r3, [pc, #228]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800635e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006364:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006368:	4053      	eors	r3, r2
 800636a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800636e:	2b00      	cmp	r3, #0
 8006370:	d015      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006372:	4b34      	ldr	r3, [pc, #208]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006376:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800637a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800637e:	4b31      	ldr	r3, [pc, #196]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006382:	4a30      	ldr	r2, [pc, #192]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006384:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006388:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800638a:	4b2e      	ldr	r3, [pc, #184]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800638c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800638e:	4a2d      	ldr	r2, [pc, #180]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006390:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006394:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006396:	4a2b      	ldr	r2, [pc, #172]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006398:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800639c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800639e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80063a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063aa:	d118      	bne.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ac:	f7fb fa16 	bl	80017dc <HAL_GetTick>
 80063b0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80063b4:	e00d      	b.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063b6:	f7fb fa11 	bl	80017dc <HAL_GetTick>
 80063ba:	4602      	mov	r2, r0
 80063bc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80063c0:	1ad2      	subs	r2, r2, r3
 80063c2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d903      	bls.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80063ca:	2303      	movs	r3, #3
 80063cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80063d0:	e005      	b.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80063d2:	4b1c      	ldr	r3, [pc, #112]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063d6:	f003 0302 	and.w	r3, r3, #2
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d0eb      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80063de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d129      	bne.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80063ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063f6:	d10e      	bne.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80063f8:	4b12      	ldr	r3, [pc, #72]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006404:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006408:	091a      	lsrs	r2, r3, #4
 800640a:	4b10      	ldr	r3, [pc, #64]	@ (800644c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800640c:	4013      	ands	r3, r2
 800640e:	4a0d      	ldr	r2, [pc, #52]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006410:	430b      	orrs	r3, r1
 8006412:	6113      	str	r3, [r2, #16]
 8006414:	e005      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006416:	4b0b      	ldr	r3, [pc, #44]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	4a0a      	ldr	r2, [pc, #40]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800641c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006420:	6113      	str	r3, [r2, #16]
 8006422:	4b08      	ldr	r3, [pc, #32]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006424:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800642a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800642e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006432:	4a04      	ldr	r2, [pc, #16]	@ (8006444 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006434:	430b      	orrs	r3, r1
 8006436:	6713      	str	r3, [r2, #112]	@ 0x70
 8006438:	e00e      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800643a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800643e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006442:	e009      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006444:	58024400 	.word	0x58024400
 8006448:	58024800 	.word	0x58024800
 800644c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006450:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006454:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800645c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006460:	f002 0301 	and.w	r3, r2, #1
 8006464:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006468:	2300      	movs	r3, #0
 800646a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800646e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006472:	460b      	mov	r3, r1
 8006474:	4313      	orrs	r3, r2
 8006476:	f000 8089 	beq.w	800658c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800647a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800647e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006480:	2b28      	cmp	r3, #40	@ 0x28
 8006482:	d86b      	bhi.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006484:	a201      	add	r2, pc, #4	@ (adr r2, 800648c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648a:	bf00      	nop
 800648c:	08006565 	.word	0x08006565
 8006490:	0800655d 	.word	0x0800655d
 8006494:	0800655d 	.word	0x0800655d
 8006498:	0800655d 	.word	0x0800655d
 800649c:	0800655d 	.word	0x0800655d
 80064a0:	0800655d 	.word	0x0800655d
 80064a4:	0800655d 	.word	0x0800655d
 80064a8:	0800655d 	.word	0x0800655d
 80064ac:	08006531 	.word	0x08006531
 80064b0:	0800655d 	.word	0x0800655d
 80064b4:	0800655d 	.word	0x0800655d
 80064b8:	0800655d 	.word	0x0800655d
 80064bc:	0800655d 	.word	0x0800655d
 80064c0:	0800655d 	.word	0x0800655d
 80064c4:	0800655d 	.word	0x0800655d
 80064c8:	0800655d 	.word	0x0800655d
 80064cc:	08006547 	.word	0x08006547
 80064d0:	0800655d 	.word	0x0800655d
 80064d4:	0800655d 	.word	0x0800655d
 80064d8:	0800655d 	.word	0x0800655d
 80064dc:	0800655d 	.word	0x0800655d
 80064e0:	0800655d 	.word	0x0800655d
 80064e4:	0800655d 	.word	0x0800655d
 80064e8:	0800655d 	.word	0x0800655d
 80064ec:	08006565 	.word	0x08006565
 80064f0:	0800655d 	.word	0x0800655d
 80064f4:	0800655d 	.word	0x0800655d
 80064f8:	0800655d 	.word	0x0800655d
 80064fc:	0800655d 	.word	0x0800655d
 8006500:	0800655d 	.word	0x0800655d
 8006504:	0800655d 	.word	0x0800655d
 8006508:	0800655d 	.word	0x0800655d
 800650c:	08006565 	.word	0x08006565
 8006510:	0800655d 	.word	0x0800655d
 8006514:	0800655d 	.word	0x0800655d
 8006518:	0800655d 	.word	0x0800655d
 800651c:	0800655d 	.word	0x0800655d
 8006520:	0800655d 	.word	0x0800655d
 8006524:	0800655d 	.word	0x0800655d
 8006528:	0800655d 	.word	0x0800655d
 800652c:	08006565 	.word	0x08006565
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006534:	3308      	adds	r3, #8
 8006536:	2101      	movs	r1, #1
 8006538:	4618      	mov	r0, r3
 800653a:	f000 ffc3 	bl	80074c4 <RCCEx_PLL2_Config>
 800653e:	4603      	mov	r3, r0
 8006540:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006544:	e00f      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800654a:	3328      	adds	r3, #40	@ 0x28
 800654c:	2101      	movs	r1, #1
 800654e:	4618      	mov	r0, r3
 8006550:	f001 f86a 	bl	8007628 <RCCEx_PLL3_Config>
 8006554:	4603      	mov	r3, r0
 8006556:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800655a:	e004      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006562:	e000      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006564:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006566:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10a      	bne.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800656e:	4bbf      	ldr	r3, [pc, #764]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006572:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800657a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800657c:	4abb      	ldr	r2, [pc, #748]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800657e:	430b      	orrs	r3, r1
 8006580:	6553      	str	r3, [r2, #84]	@ 0x54
 8006582:	e003      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006584:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006588:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800658c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006594:	f002 0302 	and.w	r3, r2, #2
 8006598:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800659c:	2300      	movs	r3, #0
 800659e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80065a2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80065a6:	460b      	mov	r3, r1
 80065a8:	4313      	orrs	r3, r2
 80065aa:	d041      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80065ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80065b2:	2b05      	cmp	r3, #5
 80065b4:	d824      	bhi.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80065b6:	a201      	add	r2, pc, #4	@ (adr r2, 80065bc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80065b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065bc:	08006609 	.word	0x08006609
 80065c0:	080065d5 	.word	0x080065d5
 80065c4:	080065eb 	.word	0x080065eb
 80065c8:	08006609 	.word	0x08006609
 80065cc:	08006609 	.word	0x08006609
 80065d0:	08006609 	.word	0x08006609
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065d8:	3308      	adds	r3, #8
 80065da:	2101      	movs	r1, #1
 80065dc:	4618      	mov	r0, r3
 80065de:	f000 ff71 	bl	80074c4 <RCCEx_PLL2_Config>
 80065e2:	4603      	mov	r3, r0
 80065e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80065e8:	e00f      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ee:	3328      	adds	r3, #40	@ 0x28
 80065f0:	2101      	movs	r1, #1
 80065f2:	4618      	mov	r0, r3
 80065f4:	f001 f818 	bl	8007628 <RCCEx_PLL3_Config>
 80065f8:	4603      	mov	r3, r0
 80065fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80065fe:	e004      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006606:	e000      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006608:	bf00      	nop
    }

    if (ret == HAL_OK)
 800660a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800660e:	2b00      	cmp	r3, #0
 8006610:	d10a      	bne.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006612:	4b96      	ldr	r3, [pc, #600]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006616:	f023 0107 	bic.w	r1, r3, #7
 800661a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800661e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006620:	4a92      	ldr	r2, [pc, #584]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006622:	430b      	orrs	r3, r1
 8006624:	6553      	str	r3, [r2, #84]	@ 0x54
 8006626:	e003      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006628:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800662c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006638:	f002 0304 	and.w	r3, r2, #4
 800663c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006640:	2300      	movs	r3, #0
 8006642:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006646:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800664a:	460b      	mov	r3, r1
 800664c:	4313      	orrs	r3, r2
 800664e:	d044      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006654:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006658:	2b05      	cmp	r3, #5
 800665a:	d825      	bhi.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800665c:	a201      	add	r2, pc, #4	@ (adr r2, 8006664 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800665e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006662:	bf00      	nop
 8006664:	080066b1 	.word	0x080066b1
 8006668:	0800667d 	.word	0x0800667d
 800666c:	08006693 	.word	0x08006693
 8006670:	080066b1 	.word	0x080066b1
 8006674:	080066b1 	.word	0x080066b1
 8006678:	080066b1 	.word	0x080066b1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800667c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006680:	3308      	adds	r3, #8
 8006682:	2101      	movs	r1, #1
 8006684:	4618      	mov	r0, r3
 8006686:	f000 ff1d 	bl	80074c4 <RCCEx_PLL2_Config>
 800668a:	4603      	mov	r3, r0
 800668c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006690:	e00f      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006696:	3328      	adds	r3, #40	@ 0x28
 8006698:	2101      	movs	r1, #1
 800669a:	4618      	mov	r0, r3
 800669c:	f000 ffc4 	bl	8007628 <RCCEx_PLL3_Config>
 80066a0:	4603      	mov	r3, r0
 80066a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80066a6:	e004      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066ae:	e000      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80066b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d10b      	bne.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80066ba:	4b6c      	ldr	r3, [pc, #432]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80066bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066be:	f023 0107 	bic.w	r1, r3, #7
 80066c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066ca:	4a68      	ldr	r2, [pc, #416]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80066cc:	430b      	orrs	r3, r1
 80066ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80066d0:	e003      	b.n	80066da <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80066da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e2:	f002 0320 	and.w	r3, r2, #32
 80066e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80066ea:	2300      	movs	r3, #0
 80066ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80066f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80066f4:	460b      	mov	r3, r1
 80066f6:	4313      	orrs	r3, r2
 80066f8:	d055      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80066fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006702:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006706:	d033      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006708:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800670c:	d82c      	bhi.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800670e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006712:	d02f      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006714:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006718:	d826      	bhi.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800671a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800671e:	d02b      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006720:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006724:	d820      	bhi.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006726:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800672a:	d012      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800672c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006730:	d81a      	bhi.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006732:	2b00      	cmp	r3, #0
 8006734:	d022      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006736:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800673a:	d115      	bne.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800673c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006740:	3308      	adds	r3, #8
 8006742:	2100      	movs	r1, #0
 8006744:	4618      	mov	r0, r3
 8006746:	f000 febd 	bl	80074c4 <RCCEx_PLL2_Config>
 800674a:	4603      	mov	r3, r0
 800674c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006750:	e015      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006756:	3328      	adds	r3, #40	@ 0x28
 8006758:	2102      	movs	r1, #2
 800675a:	4618      	mov	r0, r3
 800675c:	f000 ff64 	bl	8007628 <RCCEx_PLL3_Config>
 8006760:	4603      	mov	r3, r0
 8006762:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006766:	e00a      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800676e:	e006      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006770:	bf00      	nop
 8006772:	e004      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006774:	bf00      	nop
 8006776:	e002      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006778:	bf00      	nop
 800677a:	e000      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800677c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800677e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006782:	2b00      	cmp	r3, #0
 8006784:	d10b      	bne.n	800679e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006786:	4b39      	ldr	r3, [pc, #228]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800678a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800678e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006796:	4a35      	ldr	r2, [pc, #212]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006798:	430b      	orrs	r3, r1
 800679a:	6553      	str	r3, [r2, #84]	@ 0x54
 800679c:	e003      	b.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800679e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80067a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ae:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80067b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80067b6:	2300      	movs	r3, #0
 80067b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80067bc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80067c0:	460b      	mov	r3, r1
 80067c2:	4313      	orrs	r3, r2
 80067c4:	d058      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80067c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80067ce:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80067d2:	d033      	beq.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80067d4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80067d8:	d82c      	bhi.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80067da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067de:	d02f      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80067e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067e4:	d826      	bhi.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80067e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80067ea:	d02b      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80067ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80067f0:	d820      	bhi.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80067f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067f6:	d012      	beq.n	800681e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80067f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067fc:	d81a      	bhi.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d022      	beq.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006802:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006806:	d115      	bne.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800680c:	3308      	adds	r3, #8
 800680e:	2100      	movs	r1, #0
 8006810:	4618      	mov	r0, r3
 8006812:	f000 fe57 	bl	80074c4 <RCCEx_PLL2_Config>
 8006816:	4603      	mov	r3, r0
 8006818:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800681c:	e015      	b.n	800684a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800681e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006822:	3328      	adds	r3, #40	@ 0x28
 8006824:	2102      	movs	r1, #2
 8006826:	4618      	mov	r0, r3
 8006828:	f000 fefe 	bl	8007628 <RCCEx_PLL3_Config>
 800682c:	4603      	mov	r3, r0
 800682e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006832:	e00a      	b.n	800684a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800683a:	e006      	b.n	800684a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800683c:	bf00      	nop
 800683e:	e004      	b.n	800684a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006840:	bf00      	nop
 8006842:	e002      	b.n	800684a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006844:	bf00      	nop
 8006846:	e000      	b.n	800684a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006848:	bf00      	nop
    }

    if (ret == HAL_OK)
 800684a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800684e:	2b00      	cmp	r3, #0
 8006850:	d10e      	bne.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006852:	4b06      	ldr	r3, [pc, #24]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006856:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800685a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800685e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006862:	4a02      	ldr	r2, [pc, #8]	@ (800686c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006864:	430b      	orrs	r3, r1
 8006866:	6593      	str	r3, [r2, #88]	@ 0x58
 8006868:	e006      	b.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800686a:	bf00      	nop
 800686c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006870:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006874:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800687c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006880:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006884:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006888:	2300      	movs	r3, #0
 800688a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800688e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006892:	460b      	mov	r3, r1
 8006894:	4313      	orrs	r3, r2
 8006896:	d055      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800689c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80068a0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80068a4:	d033      	beq.n	800690e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80068a6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80068aa:	d82c      	bhi.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80068ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068b0:	d02f      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80068b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068b6:	d826      	bhi.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80068b8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80068bc:	d02b      	beq.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80068be:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80068c2:	d820      	bhi.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80068c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80068c8:	d012      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80068ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80068ce:	d81a      	bhi.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d022      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80068d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068d8:	d115      	bne.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068de:	3308      	adds	r3, #8
 80068e0:	2100      	movs	r1, #0
 80068e2:	4618      	mov	r0, r3
 80068e4:	f000 fdee 	bl	80074c4 <RCCEx_PLL2_Config>
 80068e8:	4603      	mov	r3, r0
 80068ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80068ee:	e015      	b.n	800691c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068f4:	3328      	adds	r3, #40	@ 0x28
 80068f6:	2102      	movs	r1, #2
 80068f8:	4618      	mov	r0, r3
 80068fa:	f000 fe95 	bl	8007628 <RCCEx_PLL3_Config>
 80068fe:	4603      	mov	r3, r0
 8006900:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006904:	e00a      	b.n	800691c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800690c:	e006      	b.n	800691c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800690e:	bf00      	nop
 8006910:	e004      	b.n	800691c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006912:	bf00      	nop
 8006914:	e002      	b.n	800691c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006916:	bf00      	nop
 8006918:	e000      	b.n	800691c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800691a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800691c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006920:	2b00      	cmp	r3, #0
 8006922:	d10b      	bne.n	800693c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006924:	4ba1      	ldr	r3, [pc, #644]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006928:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800692c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006930:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006934:	4a9d      	ldr	r2, [pc, #628]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006936:	430b      	orrs	r3, r1
 8006938:	6593      	str	r3, [r2, #88]	@ 0x58
 800693a:	e003      	b.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800693c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006940:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694c:	f002 0308 	and.w	r3, r2, #8
 8006950:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006954:	2300      	movs	r3, #0
 8006956:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800695a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800695e:	460b      	mov	r3, r1
 8006960:	4313      	orrs	r3, r2
 8006962:	d01e      	beq.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006968:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800696c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006970:	d10c      	bne.n	800698c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006976:	3328      	adds	r3, #40	@ 0x28
 8006978:	2102      	movs	r1, #2
 800697a:	4618      	mov	r0, r3
 800697c:	f000 fe54 	bl	8007628 <RCCEx_PLL3_Config>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d002      	beq.n	800698c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800698c:	4b87      	ldr	r3, [pc, #540]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800698e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006990:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006998:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800699c:	4a83      	ldr	r2, [pc, #524]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800699e:	430b      	orrs	r3, r1
 80069a0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80069a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069aa:	f002 0310 	and.w	r3, r2, #16
 80069ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80069b2:	2300      	movs	r3, #0
 80069b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80069b8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80069bc:	460b      	mov	r3, r1
 80069be:	4313      	orrs	r3, r2
 80069c0:	d01e      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80069c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80069ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069ce:	d10c      	bne.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80069d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069d4:	3328      	adds	r3, #40	@ 0x28
 80069d6:	2102      	movs	r1, #2
 80069d8:	4618      	mov	r0, r3
 80069da:	f000 fe25 	bl	8007628 <RCCEx_PLL3_Config>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d002      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80069ea:	4b70      	ldr	r3, [pc, #448]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80069f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80069fa:	4a6c      	ldr	r2, [pc, #432]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069fc:	430b      	orrs	r3, r1
 80069fe:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a08:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006a0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006a10:	2300      	movs	r3, #0
 8006a12:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006a16:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	d03e      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a24:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006a28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a2c:	d022      	beq.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006a2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a32:	d81b      	bhi.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d003      	beq.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006a38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a3c:	d00b      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006a3e:	e015      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a44:	3308      	adds	r3, #8
 8006a46:	2100      	movs	r1, #0
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f000 fd3b 	bl	80074c4 <RCCEx_PLL2_Config>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006a54:	e00f      	b.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a5a:	3328      	adds	r3, #40	@ 0x28
 8006a5c:	2102      	movs	r1, #2
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f000 fde2 	bl	8007628 <RCCEx_PLL3_Config>
 8006a64:	4603      	mov	r3, r0
 8006a66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006a6a:	e004      	b.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a72:	e000      	b.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006a74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d10b      	bne.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006a7e:	4b4b      	ldr	r3, [pc, #300]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a82:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006a8e:	4a47      	ldr	r2, [pc, #284]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a90:	430b      	orrs	r3, r1
 8006a92:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a94:	e003      	b.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006aaa:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006aac:	2300      	movs	r3, #0
 8006aae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006ab0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	d03b      	beq.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ac2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006ac6:	d01f      	beq.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006ac8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006acc:	d818      	bhi.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006ace:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ad2:	d003      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006ad4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ad8:	d007      	beq.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006ada:	e011      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006adc:	4b33      	ldr	r3, [pc, #204]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ae0:	4a32      	ldr	r2, [pc, #200]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ae2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ae6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006ae8:	e00f      	b.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aee:	3328      	adds	r3, #40	@ 0x28
 8006af0:	2101      	movs	r1, #1
 8006af2:	4618      	mov	r0, r3
 8006af4:	f000 fd98 	bl	8007628 <RCCEx_PLL3_Config>
 8006af8:	4603      	mov	r3, r0
 8006afa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006afe:	e004      	b.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b06:	e000      	b.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006b08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d10b      	bne.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b12:	4b26      	ldr	r3, [pc, #152]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b16:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b22:	4a22      	ldr	r2, [pc, #136]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b24:	430b      	orrs	r3, r1
 8006b26:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b28:	e003      	b.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006b3e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006b40:	2300      	movs	r3, #0
 8006b42:	677b      	str	r3, [r7, #116]	@ 0x74
 8006b44:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006b48:	460b      	mov	r3, r1
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	d034      	beq.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d003      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006b58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b5c:	d007      	beq.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006b5e:	e011      	b.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b60:	4b12      	ldr	r3, [pc, #72]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b64:	4a11      	ldr	r2, [pc, #68]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006b6c:	e00e      	b.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b72:	3308      	adds	r3, #8
 8006b74:	2102      	movs	r1, #2
 8006b76:	4618      	mov	r0, r3
 8006b78:	f000 fca4 	bl	80074c4 <RCCEx_PLL2_Config>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006b82:	e003      	b.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d10d      	bne.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006b94:	4b05      	ldr	r3, [pc, #20]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b98:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ba0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ba2:	4a02      	ldr	r2, [pc, #8]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ba4:	430b      	orrs	r3, r1
 8006ba6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006ba8:	e006      	b.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006baa:	bf00      	nop
 8006bac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006bc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006bca:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006bce:	460b      	mov	r3, r1
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	d00c      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bd8:	3328      	adds	r3, #40	@ 0x28
 8006bda:	2102      	movs	r1, #2
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f000 fd23 	bl	8007628 <RCCEx_PLL3_Config>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d002      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006bfa:	663b      	str	r3, [r7, #96]	@ 0x60
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	667b      	str	r3, [r7, #100]	@ 0x64
 8006c00:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006c04:	460b      	mov	r3, r1
 8006c06:	4313      	orrs	r3, r2
 8006c08:	d038      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c16:	d018      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006c18:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c1c:	d811      	bhi.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006c1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c22:	d014      	beq.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006c24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c28:	d80b      	bhi.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d011      	beq.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006c2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c32:	d106      	bne.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c34:	4bc3      	ldr	r3, [pc, #780]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c38:	4ac2      	ldr	r2, [pc, #776]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006c40:	e008      	b.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c48:	e004      	b.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006c4a:	bf00      	nop
 8006c4c:	e002      	b.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006c4e:	bf00      	nop
 8006c50:	e000      	b.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006c52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d10b      	bne.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c5c:	4bb9      	ldr	r3, [pc, #740]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c60:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c6c:	4ab5      	ldr	r2, [pc, #724]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c6e:	430b      	orrs	r3, r1
 8006c70:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c72:	e003      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c84:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006c88:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c8e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006c92:	460b      	mov	r3, r1
 8006c94:	4313      	orrs	r3, r2
 8006c96:	d009      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006c98:	4baa      	ldr	r3, [pc, #680]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c9c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ca4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ca6:	4aa7      	ldr	r2, [pc, #668]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ca8:	430b      	orrs	r3, r1
 8006caa:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006cb8:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cba:	2300      	movs	r3, #0
 8006cbc:	657b      	str	r3, [r7, #84]	@ 0x54
 8006cbe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	d00a      	beq.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006cc8:	4b9e      	ldr	r3, [pc, #632]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cd4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006cd8:	4a9a      	ldr	r2, [pc, #616]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006cda:	430b      	orrs	r3, r1
 8006cdc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006cea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cec:	2300      	movs	r3, #0
 8006cee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cf0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	d009      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006cfa:	4b92      	ldr	r3, [pc, #584]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006cfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cfe:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d08:	4a8e      	ldr	r2, [pc, #568]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d0a:	430b      	orrs	r3, r1
 8006d0c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d16:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006d1a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d20:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006d24:	460b      	mov	r3, r1
 8006d26:	4313      	orrs	r3, r2
 8006d28:	d00e      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006d2a:	4b86      	ldr	r3, [pc, #536]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	4a85      	ldr	r2, [pc, #532]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d30:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006d34:	6113      	str	r3, [r2, #16]
 8006d36:	4b83      	ldr	r3, [pc, #524]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d38:	6919      	ldr	r1, [r3, #16]
 8006d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d3e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006d42:	4a80      	ldr	r2, [pc, #512]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d44:	430b      	orrs	r3, r1
 8006d46:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d50:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006d54:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d56:	2300      	movs	r3, #0
 8006d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d5a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006d5e:	460b      	mov	r3, r1
 8006d60:	4313      	orrs	r3, r2
 8006d62:	d009      	beq.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006d64:	4b77      	ldr	r3, [pc, #476]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d68:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d72:	4a74      	ldr	r2, [pc, #464]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d74:	430b      	orrs	r3, r1
 8006d76:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d80:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006d84:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d86:	2300      	movs	r3, #0
 8006d88:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d8a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006d8e:	460b      	mov	r3, r1
 8006d90:	4313      	orrs	r3, r2
 8006d92:	d00a      	beq.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006d94:	4b6b      	ldr	r3, [pc, #428]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d98:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006da0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006da4:	4a67      	ldr	r2, [pc, #412]	@ (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006da6:	430b      	orrs	r3, r1
 8006da8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db2:	2100      	movs	r1, #0
 8006db4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006db6:	f003 0301 	and.w	r3, r3, #1
 8006dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006dbc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	d011      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dca:	3308      	adds	r3, #8
 8006dcc:	2100      	movs	r1, #0
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f000 fb78 	bl	80074c4 <RCCEx_PLL2_Config>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006dda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d003      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006de2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006de6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df2:	2100      	movs	r1, #0
 8006df4:	6239      	str	r1, [r7, #32]
 8006df6:	f003 0302 	and.w	r3, r3, #2
 8006dfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dfc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006e00:	460b      	mov	r3, r1
 8006e02:	4313      	orrs	r3, r2
 8006e04:	d011      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e0a:	3308      	adds	r3, #8
 8006e0c:	2101      	movs	r1, #1
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 fb58 	bl	80074c4 <RCCEx_PLL2_Config>
 8006e14:	4603      	mov	r3, r0
 8006e16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006e1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d003      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e32:	2100      	movs	r1, #0
 8006e34:	61b9      	str	r1, [r7, #24]
 8006e36:	f003 0304 	and.w	r3, r3, #4
 8006e3a:	61fb      	str	r3, [r7, #28]
 8006e3c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006e40:	460b      	mov	r3, r1
 8006e42:	4313      	orrs	r3, r2
 8006e44:	d011      	beq.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e4a:	3308      	adds	r3, #8
 8006e4c:	2102      	movs	r1, #2
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f000 fb38 	bl	80074c4 <RCCEx_PLL2_Config>
 8006e54:	4603      	mov	r3, r0
 8006e56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006e5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d003      	beq.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e72:	2100      	movs	r1, #0
 8006e74:	6139      	str	r1, [r7, #16]
 8006e76:	f003 0308 	and.w	r3, r3, #8
 8006e7a:	617b      	str	r3, [r7, #20]
 8006e7c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006e80:	460b      	mov	r3, r1
 8006e82:	4313      	orrs	r3, r2
 8006e84:	d011      	beq.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e8a:	3328      	adds	r3, #40	@ 0x28
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f000 fbca 	bl	8007628 <RCCEx_PLL3_Config>
 8006e94:	4603      	mov	r3, r0
 8006e96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006e9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d003      	beq.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ea2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ea6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb2:	2100      	movs	r1, #0
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	f003 0310 	and.w	r3, r3, #16
 8006eba:	60fb      	str	r3, [r7, #12]
 8006ebc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	d011      	beq.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eca:	3328      	adds	r3, #40	@ 0x28
 8006ecc:	2101      	movs	r1, #1
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f000 fbaa 	bl	8007628 <RCCEx_PLL3_Config>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006eda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d003      	beq.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ee2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ee6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef2:	2100      	movs	r1, #0
 8006ef4:	6039      	str	r1, [r7, #0]
 8006ef6:	f003 0320 	and.w	r3, r3, #32
 8006efa:	607b      	str	r3, [r7, #4]
 8006efc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006f00:	460b      	mov	r3, r1
 8006f02:	4313      	orrs	r3, r2
 8006f04:	d011      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f0a:	3328      	adds	r3, #40	@ 0x28
 8006f0c:	2102      	movs	r1, #2
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f000 fb8a 	bl	8007628 <RCCEx_PLL3_Config>
 8006f14:	4603      	mov	r3, r0
 8006f16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006f1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d003      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006f2a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d101      	bne.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006f32:	2300      	movs	r3, #0
 8006f34:	e000      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f44:	58024400 	.word	0x58024400

08006f48 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006f4c:	f7fe fd96 	bl	8005a7c <HAL_RCC_GetHCLKFreq>
 8006f50:	4602      	mov	r2, r0
 8006f52:	4b06      	ldr	r3, [pc, #24]	@ (8006f6c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006f54:	6a1b      	ldr	r3, [r3, #32]
 8006f56:	091b      	lsrs	r3, r3, #4
 8006f58:	f003 0307 	and.w	r3, r3, #7
 8006f5c:	4904      	ldr	r1, [pc, #16]	@ (8006f70 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006f5e:	5ccb      	ldrb	r3, [r1, r3]
 8006f60:	f003 031f 	and.w	r3, r3, #31
 8006f64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	58024400 	.word	0x58024400
 8006f70:	0800a8b4 	.word	0x0800a8b4

08006f74 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b089      	sub	sp, #36	@ 0x24
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f7c:	4ba1      	ldr	r3, [pc, #644]	@ (8007204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f80:	f003 0303 	and.w	r3, r3, #3
 8006f84:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006f86:	4b9f      	ldr	r3, [pc, #636]	@ (8007204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f8a:	0b1b      	lsrs	r3, r3, #12
 8006f8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f90:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006f92:	4b9c      	ldr	r3, [pc, #624]	@ (8007204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f96:	091b      	lsrs	r3, r3, #4
 8006f98:	f003 0301 	and.w	r3, r3, #1
 8006f9c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006f9e:	4b99      	ldr	r3, [pc, #612]	@ (8007204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fa2:	08db      	lsrs	r3, r3, #3
 8006fa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006fa8:	693a      	ldr	r2, [r7, #16]
 8006faa:	fb02 f303 	mul.w	r3, r2, r3
 8006fae:	ee07 3a90 	vmov	s15, r3
 8006fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fb6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	f000 8111 	beq.w	80071e4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	f000 8083 	beq.w	80070d0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	2b02      	cmp	r3, #2
 8006fce:	f200 80a1 	bhi.w	8007114 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d003      	beq.n	8006fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d056      	beq.n	800708c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006fde:	e099      	b.n	8007114 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fe0:	4b88      	ldr	r3, [pc, #544]	@ (8007204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 0320 	and.w	r3, r3, #32
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d02d      	beq.n	8007048 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fec:	4b85      	ldr	r3, [pc, #532]	@ (8007204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	08db      	lsrs	r3, r3, #3
 8006ff2:	f003 0303 	and.w	r3, r3, #3
 8006ff6:	4a84      	ldr	r2, [pc, #528]	@ (8007208 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8006ffc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	ee07 3a90 	vmov	s15, r3
 8007004:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	ee07 3a90 	vmov	s15, r3
 800700e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007016:	4b7b      	ldr	r3, [pc, #492]	@ (8007204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800701a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800701e:	ee07 3a90 	vmov	s15, r3
 8007022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007026:	ed97 6a03 	vldr	s12, [r7, #12]
 800702a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800720c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800702e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007036:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800703a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800703e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007042:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007046:	e087      	b.n	8007158 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	ee07 3a90 	vmov	s15, r3
 800704e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007052:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007210 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800705a:	4b6a      	ldr	r3, [pc, #424]	@ (8007204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800705c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800705e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007062:	ee07 3a90 	vmov	s15, r3
 8007066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800706a:	ed97 6a03 	vldr	s12, [r7, #12]
 800706e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800720c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800707a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800707e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007086:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800708a:	e065      	b.n	8007158 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	ee07 3a90 	vmov	s15, r3
 8007092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007096:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007214 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800709a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800709e:	4b59      	ldr	r3, [pc, #356]	@ (8007204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070a6:	ee07 3a90 	vmov	s15, r3
 80070aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80070b2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800720c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070ce:	e043      	b.n	8007158 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	ee07 3a90 	vmov	s15, r3
 80070d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070da:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007218 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80070de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070e2:	4b48      	ldr	r3, [pc, #288]	@ (8007204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ea:	ee07 3a90 	vmov	s15, r3
 80070ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80070f6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800720c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007102:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800710a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800710e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007112:	e021      	b.n	8007158 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	ee07 3a90 	vmov	s15, r3
 800711a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800711e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007214 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007126:	4b37      	ldr	r3, [pc, #220]	@ (8007204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800712a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800712e:	ee07 3a90 	vmov	s15, r3
 8007132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007136:	ed97 6a03 	vldr	s12, [r7, #12]
 800713a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800720c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800713e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007146:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800714a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800714e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007152:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007156:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007158:	4b2a      	ldr	r3, [pc, #168]	@ (8007204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800715a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800715c:	0a5b      	lsrs	r3, r3, #9
 800715e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007162:	ee07 3a90 	vmov	s15, r3
 8007166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800716a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800716e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007172:	edd7 6a07 	vldr	s13, [r7, #28]
 8007176:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800717a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800717e:	ee17 2a90 	vmov	r2, s15
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007186:	4b1f      	ldr	r3, [pc, #124]	@ (8007204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007188:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800718a:	0c1b      	lsrs	r3, r3, #16
 800718c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007190:	ee07 3a90 	vmov	s15, r3
 8007194:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007198:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800719c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80071a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071ac:	ee17 2a90 	vmov	r2, s15
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80071b4:	4b13      	ldr	r3, [pc, #76]	@ (8007204 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071b8:	0e1b      	lsrs	r3, r3, #24
 80071ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071be:	ee07 3a90 	vmov	s15, r3
 80071c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80071ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80071d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071da:	ee17 2a90 	vmov	r2, s15
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80071e2:	e008      	b.n	80071f6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	609a      	str	r2, [r3, #8]
}
 80071f6:	bf00      	nop
 80071f8:	3724      	adds	r7, #36	@ 0x24
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop
 8007204:	58024400 	.word	0x58024400
 8007208:	03d09000 	.word	0x03d09000
 800720c:	46000000 	.word	0x46000000
 8007210:	4c742400 	.word	0x4c742400
 8007214:	4a742400 	.word	0x4a742400
 8007218:	4bbebc20 	.word	0x4bbebc20

0800721c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800721c:	b480      	push	{r7}
 800721e:	b089      	sub	sp, #36	@ 0x24
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007224:	4ba1      	ldr	r3, [pc, #644]	@ (80074ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007228:	f003 0303 	and.w	r3, r3, #3
 800722c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800722e:	4b9f      	ldr	r3, [pc, #636]	@ (80074ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007232:	0d1b      	lsrs	r3, r3, #20
 8007234:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007238:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800723a:	4b9c      	ldr	r3, [pc, #624]	@ (80074ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800723c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800723e:	0a1b      	lsrs	r3, r3, #8
 8007240:	f003 0301 	and.w	r3, r3, #1
 8007244:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007246:	4b99      	ldr	r3, [pc, #612]	@ (80074ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800724a:	08db      	lsrs	r3, r3, #3
 800724c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007250:	693a      	ldr	r2, [r7, #16]
 8007252:	fb02 f303 	mul.w	r3, r2, r3
 8007256:	ee07 3a90 	vmov	s15, r3
 800725a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800725e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	2b00      	cmp	r3, #0
 8007266:	f000 8111 	beq.w	800748c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	2b02      	cmp	r3, #2
 800726e:	f000 8083 	beq.w	8007378 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	2b02      	cmp	r3, #2
 8007276:	f200 80a1 	bhi.w	80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d003      	beq.n	8007288 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	2b01      	cmp	r3, #1
 8007284:	d056      	beq.n	8007334 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007286:	e099      	b.n	80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007288:	4b88      	ldr	r3, [pc, #544]	@ (80074ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 0320 	and.w	r3, r3, #32
 8007290:	2b00      	cmp	r3, #0
 8007292:	d02d      	beq.n	80072f0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007294:	4b85      	ldr	r3, [pc, #532]	@ (80074ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	08db      	lsrs	r3, r3, #3
 800729a:	f003 0303 	and.w	r3, r3, #3
 800729e:	4a84      	ldr	r2, [pc, #528]	@ (80074b0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80072a0:	fa22 f303 	lsr.w	r3, r2, r3
 80072a4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	ee07 3a90 	vmov	s15, r3
 80072ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	ee07 3a90 	vmov	s15, r3
 80072b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072be:	4b7b      	ldr	r3, [pc, #492]	@ (80074ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072c6:	ee07 3a90 	vmov	s15, r3
 80072ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80072d2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80074b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80072ee:	e087      	b.n	8007400 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	ee07 3a90 	vmov	s15, r3
 80072f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072fa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80074b8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80072fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007302:	4b6a      	ldr	r3, [pc, #424]	@ (80074ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800730a:	ee07 3a90 	vmov	s15, r3
 800730e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007312:	ed97 6a03 	vldr	s12, [r7, #12]
 8007316:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80074b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800731a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800731e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007322:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800732a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800732e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007332:	e065      	b.n	8007400 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	ee07 3a90 	vmov	s15, r3
 800733a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800733e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80074bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007346:	4b59      	ldr	r3, [pc, #356]	@ (80074ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800734a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800734e:	ee07 3a90 	vmov	s15, r3
 8007352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007356:	ed97 6a03 	vldr	s12, [r7, #12]
 800735a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80074b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800735e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007366:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800736a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800736e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007372:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007376:	e043      	b.n	8007400 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	ee07 3a90 	vmov	s15, r3
 800737e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007382:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80074c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800738a:	4b48      	ldr	r3, [pc, #288]	@ (80074ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800738c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800738e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007392:	ee07 3a90 	vmov	s15, r3
 8007396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800739a:	ed97 6a03 	vldr	s12, [r7, #12]
 800739e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80074b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073ba:	e021      	b.n	8007400 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	ee07 3a90 	vmov	s15, r3
 80073c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073c6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80074bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80073ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073ce:	4b37      	ldr	r3, [pc, #220]	@ (80074ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073d6:	ee07 3a90 	vmov	s15, r3
 80073da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073de:	ed97 6a03 	vldr	s12, [r7, #12]
 80073e2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80074b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073fe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007400:	4b2a      	ldr	r3, [pc, #168]	@ (80074ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007404:	0a5b      	lsrs	r3, r3, #9
 8007406:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800740a:	ee07 3a90 	vmov	s15, r3
 800740e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007412:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007416:	ee37 7a87 	vadd.f32	s14, s15, s14
 800741a:	edd7 6a07 	vldr	s13, [r7, #28]
 800741e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007422:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007426:	ee17 2a90 	vmov	r2, s15
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800742e:	4b1f      	ldr	r3, [pc, #124]	@ (80074ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007432:	0c1b      	lsrs	r3, r3, #16
 8007434:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007438:	ee07 3a90 	vmov	s15, r3
 800743c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007440:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007444:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007448:	edd7 6a07 	vldr	s13, [r7, #28]
 800744c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007450:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007454:	ee17 2a90 	vmov	r2, s15
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800745c:	4b13      	ldr	r3, [pc, #76]	@ (80074ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800745e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007460:	0e1b      	lsrs	r3, r3, #24
 8007462:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007466:	ee07 3a90 	vmov	s15, r3
 800746a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800746e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007472:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007476:	edd7 6a07 	vldr	s13, [r7, #28]
 800747a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800747e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007482:	ee17 2a90 	vmov	r2, s15
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800748a:	e008      	b.n	800749e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	609a      	str	r2, [r3, #8]
}
 800749e:	bf00      	nop
 80074a0:	3724      	adds	r7, #36	@ 0x24
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop
 80074ac:	58024400 	.word	0x58024400
 80074b0:	03d09000 	.word	0x03d09000
 80074b4:	46000000 	.word	0x46000000
 80074b8:	4c742400 	.word	0x4c742400
 80074bc:	4a742400 	.word	0x4a742400
 80074c0:	4bbebc20 	.word	0x4bbebc20

080074c4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80074ce:	2300      	movs	r3, #0
 80074d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80074d2:	4b53      	ldr	r3, [pc, #332]	@ (8007620 <RCCEx_PLL2_Config+0x15c>)
 80074d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074d6:	f003 0303 	and.w	r3, r3, #3
 80074da:	2b03      	cmp	r3, #3
 80074dc:	d101      	bne.n	80074e2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e099      	b.n	8007616 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80074e2:	4b4f      	ldr	r3, [pc, #316]	@ (8007620 <RCCEx_PLL2_Config+0x15c>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a4e      	ldr	r2, [pc, #312]	@ (8007620 <RCCEx_PLL2_Config+0x15c>)
 80074e8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80074ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074ee:	f7fa f975 	bl	80017dc <HAL_GetTick>
 80074f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80074f4:	e008      	b.n	8007508 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80074f6:	f7fa f971 	bl	80017dc <HAL_GetTick>
 80074fa:	4602      	mov	r2, r0
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	1ad3      	subs	r3, r2, r3
 8007500:	2b02      	cmp	r3, #2
 8007502:	d901      	bls.n	8007508 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007504:	2303      	movs	r3, #3
 8007506:	e086      	b.n	8007616 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007508:	4b45      	ldr	r3, [pc, #276]	@ (8007620 <RCCEx_PLL2_Config+0x15c>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007510:	2b00      	cmp	r3, #0
 8007512:	d1f0      	bne.n	80074f6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007514:	4b42      	ldr	r3, [pc, #264]	@ (8007620 <RCCEx_PLL2_Config+0x15c>)
 8007516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007518:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	031b      	lsls	r3, r3, #12
 8007522:	493f      	ldr	r1, [pc, #252]	@ (8007620 <RCCEx_PLL2_Config+0x15c>)
 8007524:	4313      	orrs	r3, r2
 8007526:	628b      	str	r3, [r1, #40]	@ 0x28
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	3b01      	subs	r3, #1
 800752e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	3b01      	subs	r3, #1
 8007538:	025b      	lsls	r3, r3, #9
 800753a:	b29b      	uxth	r3, r3
 800753c:	431a      	orrs	r2, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	3b01      	subs	r3, #1
 8007544:	041b      	lsls	r3, r3, #16
 8007546:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800754a:	431a      	orrs	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	691b      	ldr	r3, [r3, #16]
 8007550:	3b01      	subs	r3, #1
 8007552:	061b      	lsls	r3, r3, #24
 8007554:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007558:	4931      	ldr	r1, [pc, #196]	@ (8007620 <RCCEx_PLL2_Config+0x15c>)
 800755a:	4313      	orrs	r3, r2
 800755c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800755e:	4b30      	ldr	r3, [pc, #192]	@ (8007620 <RCCEx_PLL2_Config+0x15c>)
 8007560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007562:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	695b      	ldr	r3, [r3, #20]
 800756a:	492d      	ldr	r1, [pc, #180]	@ (8007620 <RCCEx_PLL2_Config+0x15c>)
 800756c:	4313      	orrs	r3, r2
 800756e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007570:	4b2b      	ldr	r3, [pc, #172]	@ (8007620 <RCCEx_PLL2_Config+0x15c>)
 8007572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007574:	f023 0220 	bic.w	r2, r3, #32
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	699b      	ldr	r3, [r3, #24]
 800757c:	4928      	ldr	r1, [pc, #160]	@ (8007620 <RCCEx_PLL2_Config+0x15c>)
 800757e:	4313      	orrs	r3, r2
 8007580:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007582:	4b27      	ldr	r3, [pc, #156]	@ (8007620 <RCCEx_PLL2_Config+0x15c>)
 8007584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007586:	4a26      	ldr	r2, [pc, #152]	@ (8007620 <RCCEx_PLL2_Config+0x15c>)
 8007588:	f023 0310 	bic.w	r3, r3, #16
 800758c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800758e:	4b24      	ldr	r3, [pc, #144]	@ (8007620 <RCCEx_PLL2_Config+0x15c>)
 8007590:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007592:	4b24      	ldr	r3, [pc, #144]	@ (8007624 <RCCEx_PLL2_Config+0x160>)
 8007594:	4013      	ands	r3, r2
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	69d2      	ldr	r2, [r2, #28]
 800759a:	00d2      	lsls	r2, r2, #3
 800759c:	4920      	ldr	r1, [pc, #128]	@ (8007620 <RCCEx_PLL2_Config+0x15c>)
 800759e:	4313      	orrs	r3, r2
 80075a0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80075a2:	4b1f      	ldr	r3, [pc, #124]	@ (8007620 <RCCEx_PLL2_Config+0x15c>)
 80075a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a6:	4a1e      	ldr	r2, [pc, #120]	@ (8007620 <RCCEx_PLL2_Config+0x15c>)
 80075a8:	f043 0310 	orr.w	r3, r3, #16
 80075ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d106      	bne.n	80075c2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80075b4:	4b1a      	ldr	r3, [pc, #104]	@ (8007620 <RCCEx_PLL2_Config+0x15c>)
 80075b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b8:	4a19      	ldr	r2, [pc, #100]	@ (8007620 <RCCEx_PLL2_Config+0x15c>)
 80075ba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80075be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80075c0:	e00f      	b.n	80075e2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d106      	bne.n	80075d6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80075c8:	4b15      	ldr	r3, [pc, #84]	@ (8007620 <RCCEx_PLL2_Config+0x15c>)
 80075ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075cc:	4a14      	ldr	r2, [pc, #80]	@ (8007620 <RCCEx_PLL2_Config+0x15c>)
 80075ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80075d4:	e005      	b.n	80075e2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80075d6:	4b12      	ldr	r3, [pc, #72]	@ (8007620 <RCCEx_PLL2_Config+0x15c>)
 80075d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075da:	4a11      	ldr	r2, [pc, #68]	@ (8007620 <RCCEx_PLL2_Config+0x15c>)
 80075dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80075e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80075e2:	4b0f      	ldr	r3, [pc, #60]	@ (8007620 <RCCEx_PLL2_Config+0x15c>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a0e      	ldr	r2, [pc, #56]	@ (8007620 <RCCEx_PLL2_Config+0x15c>)
 80075e8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80075ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075ee:	f7fa f8f5 	bl	80017dc <HAL_GetTick>
 80075f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80075f4:	e008      	b.n	8007608 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80075f6:	f7fa f8f1 	bl	80017dc <HAL_GetTick>
 80075fa:	4602      	mov	r2, r0
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	1ad3      	subs	r3, r2, r3
 8007600:	2b02      	cmp	r3, #2
 8007602:	d901      	bls.n	8007608 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007604:	2303      	movs	r3, #3
 8007606:	e006      	b.n	8007616 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007608:	4b05      	ldr	r3, [pc, #20]	@ (8007620 <RCCEx_PLL2_Config+0x15c>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007610:	2b00      	cmp	r3, #0
 8007612:	d0f0      	beq.n	80075f6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007614:	7bfb      	ldrb	r3, [r7, #15]
}
 8007616:	4618      	mov	r0, r3
 8007618:	3710      	adds	r7, #16
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	58024400 	.word	0x58024400
 8007624:	ffff0007 	.word	0xffff0007

08007628 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007632:	2300      	movs	r3, #0
 8007634:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007636:	4b53      	ldr	r3, [pc, #332]	@ (8007784 <RCCEx_PLL3_Config+0x15c>)
 8007638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800763a:	f003 0303 	and.w	r3, r3, #3
 800763e:	2b03      	cmp	r3, #3
 8007640:	d101      	bne.n	8007646 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	e099      	b.n	800777a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007646:	4b4f      	ldr	r3, [pc, #316]	@ (8007784 <RCCEx_PLL3_Config+0x15c>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a4e      	ldr	r2, [pc, #312]	@ (8007784 <RCCEx_PLL3_Config+0x15c>)
 800764c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007650:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007652:	f7fa f8c3 	bl	80017dc <HAL_GetTick>
 8007656:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007658:	e008      	b.n	800766c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800765a:	f7fa f8bf 	bl	80017dc <HAL_GetTick>
 800765e:	4602      	mov	r2, r0
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	2b02      	cmp	r3, #2
 8007666:	d901      	bls.n	800766c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007668:	2303      	movs	r3, #3
 800766a:	e086      	b.n	800777a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800766c:	4b45      	ldr	r3, [pc, #276]	@ (8007784 <RCCEx_PLL3_Config+0x15c>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007674:	2b00      	cmp	r3, #0
 8007676:	d1f0      	bne.n	800765a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007678:	4b42      	ldr	r3, [pc, #264]	@ (8007784 <RCCEx_PLL3_Config+0x15c>)
 800767a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800767c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	051b      	lsls	r3, r3, #20
 8007686:	493f      	ldr	r1, [pc, #252]	@ (8007784 <RCCEx_PLL3_Config+0x15c>)
 8007688:	4313      	orrs	r3, r2
 800768a:	628b      	str	r3, [r1, #40]	@ 0x28
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	3b01      	subs	r3, #1
 8007692:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	3b01      	subs	r3, #1
 800769c:	025b      	lsls	r3, r3, #9
 800769e:	b29b      	uxth	r3, r3
 80076a0:	431a      	orrs	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	3b01      	subs	r3, #1
 80076a8:	041b      	lsls	r3, r3, #16
 80076aa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80076ae:	431a      	orrs	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	691b      	ldr	r3, [r3, #16]
 80076b4:	3b01      	subs	r3, #1
 80076b6:	061b      	lsls	r3, r3, #24
 80076b8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80076bc:	4931      	ldr	r1, [pc, #196]	@ (8007784 <RCCEx_PLL3_Config+0x15c>)
 80076be:	4313      	orrs	r3, r2
 80076c0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80076c2:	4b30      	ldr	r3, [pc, #192]	@ (8007784 <RCCEx_PLL3_Config+0x15c>)
 80076c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	695b      	ldr	r3, [r3, #20]
 80076ce:	492d      	ldr	r1, [pc, #180]	@ (8007784 <RCCEx_PLL3_Config+0x15c>)
 80076d0:	4313      	orrs	r3, r2
 80076d2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80076d4:	4b2b      	ldr	r3, [pc, #172]	@ (8007784 <RCCEx_PLL3_Config+0x15c>)
 80076d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	699b      	ldr	r3, [r3, #24]
 80076e0:	4928      	ldr	r1, [pc, #160]	@ (8007784 <RCCEx_PLL3_Config+0x15c>)
 80076e2:	4313      	orrs	r3, r2
 80076e4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80076e6:	4b27      	ldr	r3, [pc, #156]	@ (8007784 <RCCEx_PLL3_Config+0x15c>)
 80076e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ea:	4a26      	ldr	r2, [pc, #152]	@ (8007784 <RCCEx_PLL3_Config+0x15c>)
 80076ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80076f2:	4b24      	ldr	r3, [pc, #144]	@ (8007784 <RCCEx_PLL3_Config+0x15c>)
 80076f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076f6:	4b24      	ldr	r3, [pc, #144]	@ (8007788 <RCCEx_PLL3_Config+0x160>)
 80076f8:	4013      	ands	r3, r2
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	69d2      	ldr	r2, [r2, #28]
 80076fe:	00d2      	lsls	r2, r2, #3
 8007700:	4920      	ldr	r1, [pc, #128]	@ (8007784 <RCCEx_PLL3_Config+0x15c>)
 8007702:	4313      	orrs	r3, r2
 8007704:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007706:	4b1f      	ldr	r3, [pc, #124]	@ (8007784 <RCCEx_PLL3_Config+0x15c>)
 8007708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800770a:	4a1e      	ldr	r2, [pc, #120]	@ (8007784 <RCCEx_PLL3_Config+0x15c>)
 800770c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007710:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d106      	bne.n	8007726 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007718:	4b1a      	ldr	r3, [pc, #104]	@ (8007784 <RCCEx_PLL3_Config+0x15c>)
 800771a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800771c:	4a19      	ldr	r2, [pc, #100]	@ (8007784 <RCCEx_PLL3_Config+0x15c>)
 800771e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007722:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007724:	e00f      	b.n	8007746 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	2b01      	cmp	r3, #1
 800772a:	d106      	bne.n	800773a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800772c:	4b15      	ldr	r3, [pc, #84]	@ (8007784 <RCCEx_PLL3_Config+0x15c>)
 800772e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007730:	4a14      	ldr	r2, [pc, #80]	@ (8007784 <RCCEx_PLL3_Config+0x15c>)
 8007732:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007736:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007738:	e005      	b.n	8007746 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800773a:	4b12      	ldr	r3, [pc, #72]	@ (8007784 <RCCEx_PLL3_Config+0x15c>)
 800773c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800773e:	4a11      	ldr	r2, [pc, #68]	@ (8007784 <RCCEx_PLL3_Config+0x15c>)
 8007740:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007744:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007746:	4b0f      	ldr	r3, [pc, #60]	@ (8007784 <RCCEx_PLL3_Config+0x15c>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a0e      	ldr	r2, [pc, #56]	@ (8007784 <RCCEx_PLL3_Config+0x15c>)
 800774c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007750:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007752:	f7fa f843 	bl	80017dc <HAL_GetTick>
 8007756:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007758:	e008      	b.n	800776c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800775a:	f7fa f83f 	bl	80017dc <HAL_GetTick>
 800775e:	4602      	mov	r2, r0
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	1ad3      	subs	r3, r2, r3
 8007764:	2b02      	cmp	r3, #2
 8007766:	d901      	bls.n	800776c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007768:	2303      	movs	r3, #3
 800776a:	e006      	b.n	800777a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800776c:	4b05      	ldr	r3, [pc, #20]	@ (8007784 <RCCEx_PLL3_Config+0x15c>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007774:	2b00      	cmp	r3, #0
 8007776:	d0f0      	beq.n	800775a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007778:	7bfb      	ldrb	r3, [r7, #15]
}
 800777a:	4618      	mov	r0, r3
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	58024400 	.word	0x58024400
 8007788:	ffff0007 	.word	0xffff0007

0800778c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b082      	sub	sp, #8
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d101      	bne.n	800779e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	e049      	b.n	8007832 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d106      	bne.n	80077b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f7f9 fcbc 	bl	8001130 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2202      	movs	r2, #2
 80077bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	3304      	adds	r3, #4
 80077c8:	4619      	mov	r1, r3
 80077ca:	4610      	mov	r0, r2
 80077cc:	f000 faa2 	bl	8007d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007830:	2300      	movs	r3, #0
}
 8007832:	4618      	mov	r0, r3
 8007834:	3708      	adds	r7, #8
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800783a:	b580      	push	{r7, lr}
 800783c:	b082      	sub	sp, #8
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d101      	bne.n	800784c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	e049      	b.n	80078e0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007852:	b2db      	uxtb	r3, r3
 8007854:	2b00      	cmp	r3, #0
 8007856:	d106      	bne.n	8007866 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 f841 	bl	80078e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2202      	movs	r2, #2
 800786a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	3304      	adds	r3, #4
 8007876:	4619      	mov	r1, r3
 8007878:	4610      	mov	r0, r2
 800787a:	f000 fa4b 	bl	8007d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2201      	movs	r2, #1
 8007882:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2201      	movs	r2, #1
 800788a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2201      	movs	r2, #1
 8007892:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2201      	movs	r2, #1
 800789a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2201      	movs	r2, #1
 80078a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2201      	movs	r2, #1
 80078aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2201      	movs	r2, #1
 80078b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2201      	movs	r2, #1
 80078ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2201      	movs	r2, #1
 80078c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2201      	movs	r2, #1
 80078ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2201      	movs	r2, #1
 80078d2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2201      	movs	r2, #1
 80078da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80078de:	2300      	movs	r3, #0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3708      	adds	r7, #8
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80078f0:	bf00      	nop
 80078f2:	370c      	adds	r7, #12
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b086      	sub	sp, #24
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007908:	2300      	movs	r3, #0
 800790a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007912:	2b01      	cmp	r3, #1
 8007914:	d101      	bne.n	800791a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007916:	2302      	movs	r3, #2
 8007918:	e0ff      	b.n	8007b1a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2201      	movs	r2, #1
 800791e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2b14      	cmp	r3, #20
 8007926:	f200 80f0 	bhi.w	8007b0a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800792a:	a201      	add	r2, pc, #4	@ (adr r2, 8007930 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800792c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007930:	08007985 	.word	0x08007985
 8007934:	08007b0b 	.word	0x08007b0b
 8007938:	08007b0b 	.word	0x08007b0b
 800793c:	08007b0b 	.word	0x08007b0b
 8007940:	080079c5 	.word	0x080079c5
 8007944:	08007b0b 	.word	0x08007b0b
 8007948:	08007b0b 	.word	0x08007b0b
 800794c:	08007b0b 	.word	0x08007b0b
 8007950:	08007a07 	.word	0x08007a07
 8007954:	08007b0b 	.word	0x08007b0b
 8007958:	08007b0b 	.word	0x08007b0b
 800795c:	08007b0b 	.word	0x08007b0b
 8007960:	08007a47 	.word	0x08007a47
 8007964:	08007b0b 	.word	0x08007b0b
 8007968:	08007b0b 	.word	0x08007b0b
 800796c:	08007b0b 	.word	0x08007b0b
 8007970:	08007a89 	.word	0x08007a89
 8007974:	08007b0b 	.word	0x08007b0b
 8007978:	08007b0b 	.word	0x08007b0b
 800797c:	08007b0b 	.word	0x08007b0b
 8007980:	08007ac9 	.word	0x08007ac9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	68b9      	ldr	r1, [r7, #8]
 800798a:	4618      	mov	r0, r3
 800798c:	f000 fa68 	bl	8007e60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	699a      	ldr	r2, [r3, #24]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f042 0208 	orr.w	r2, r2, #8
 800799e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	699a      	ldr	r2, [r3, #24]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f022 0204 	bic.w	r2, r2, #4
 80079ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	6999      	ldr	r1, [r3, #24]
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	691a      	ldr	r2, [r3, #16]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	430a      	orrs	r2, r1
 80079c0:	619a      	str	r2, [r3, #24]
      break;
 80079c2:	e0a5      	b.n	8007b10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	68b9      	ldr	r1, [r7, #8]
 80079ca:	4618      	mov	r0, r3
 80079cc:	f000 fad8 	bl	8007f80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	699a      	ldr	r2, [r3, #24]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80079de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	699a      	ldr	r2, [r3, #24]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80079ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	6999      	ldr	r1, [r3, #24]
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	021a      	lsls	r2, r3, #8
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	430a      	orrs	r2, r1
 8007a02:	619a      	str	r2, [r3, #24]
      break;
 8007a04:	e084      	b.n	8007b10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	68b9      	ldr	r1, [r7, #8]
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f000 fb41 	bl	8008094 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	69da      	ldr	r2, [r3, #28]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f042 0208 	orr.w	r2, r2, #8
 8007a20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	69da      	ldr	r2, [r3, #28]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f022 0204 	bic.w	r2, r2, #4
 8007a30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	69d9      	ldr	r1, [r3, #28]
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	691a      	ldr	r2, [r3, #16]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	430a      	orrs	r2, r1
 8007a42:	61da      	str	r2, [r3, #28]
      break;
 8007a44:	e064      	b.n	8007b10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	68b9      	ldr	r1, [r7, #8]
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f000 fba9 	bl	80081a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	69da      	ldr	r2, [r3, #28]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	69da      	ldr	r2, [r3, #28]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	69d9      	ldr	r1, [r3, #28]
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	021a      	lsls	r2, r3, #8
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	430a      	orrs	r2, r1
 8007a84:	61da      	str	r2, [r3, #28]
      break;
 8007a86:	e043      	b.n	8007b10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	68b9      	ldr	r1, [r7, #8]
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f000 fbf2 	bl	8008278 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f042 0208 	orr.w	r2, r2, #8
 8007aa2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f022 0204 	bic.w	r2, r2, #4
 8007ab2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	691a      	ldr	r2, [r3, #16]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	430a      	orrs	r2, r1
 8007ac4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007ac6:	e023      	b.n	8007b10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	68b9      	ldr	r1, [r7, #8]
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f000 fc36 	bl	8008340 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ae2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007af2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	021a      	lsls	r2, r3, #8
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	430a      	orrs	r2, r1
 8007b06:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007b08:	e002      	b.n	8007b10 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	75fb      	strb	r3, [r7, #23]
      break;
 8007b0e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007b18:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3718      	adds	r7, #24
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop

08007b24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d101      	bne.n	8007b40 <HAL_TIM_ConfigClockSource+0x1c>
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	e0dc      	b.n	8007cfa <HAL_TIM_ConfigClockSource+0x1d6>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2202      	movs	r2, #2
 8007b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b58:	68ba      	ldr	r2, [r7, #8]
 8007b5a:	4b6a      	ldr	r3, [pc, #424]	@ (8007d04 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007b5c:	4013      	ands	r3, r2
 8007b5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007b66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	68ba      	ldr	r2, [r7, #8]
 8007b6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a64      	ldr	r2, [pc, #400]	@ (8007d08 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	f000 80a9 	beq.w	8007cce <HAL_TIM_ConfigClockSource+0x1aa>
 8007b7c:	4a62      	ldr	r2, [pc, #392]	@ (8007d08 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	f200 80ae 	bhi.w	8007ce0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b84:	4a61      	ldr	r2, [pc, #388]	@ (8007d0c <HAL_TIM_ConfigClockSource+0x1e8>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	f000 80a1 	beq.w	8007cce <HAL_TIM_ConfigClockSource+0x1aa>
 8007b8c:	4a5f      	ldr	r2, [pc, #380]	@ (8007d0c <HAL_TIM_ConfigClockSource+0x1e8>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	f200 80a6 	bhi.w	8007ce0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b94:	4a5e      	ldr	r2, [pc, #376]	@ (8007d10 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	f000 8099 	beq.w	8007cce <HAL_TIM_ConfigClockSource+0x1aa>
 8007b9c:	4a5c      	ldr	r2, [pc, #368]	@ (8007d10 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	f200 809e 	bhi.w	8007ce0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ba4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007ba8:	f000 8091 	beq.w	8007cce <HAL_TIM_ConfigClockSource+0x1aa>
 8007bac:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007bb0:	f200 8096 	bhi.w	8007ce0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007bb4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007bb8:	f000 8089 	beq.w	8007cce <HAL_TIM_ConfigClockSource+0x1aa>
 8007bbc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007bc0:	f200 808e 	bhi.w	8007ce0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007bc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bc8:	d03e      	beq.n	8007c48 <HAL_TIM_ConfigClockSource+0x124>
 8007bca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bce:	f200 8087 	bhi.w	8007ce0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007bd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bd6:	f000 8086 	beq.w	8007ce6 <HAL_TIM_ConfigClockSource+0x1c2>
 8007bda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bde:	d87f      	bhi.n	8007ce0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007be0:	2b70      	cmp	r3, #112	@ 0x70
 8007be2:	d01a      	beq.n	8007c1a <HAL_TIM_ConfigClockSource+0xf6>
 8007be4:	2b70      	cmp	r3, #112	@ 0x70
 8007be6:	d87b      	bhi.n	8007ce0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007be8:	2b60      	cmp	r3, #96	@ 0x60
 8007bea:	d050      	beq.n	8007c8e <HAL_TIM_ConfigClockSource+0x16a>
 8007bec:	2b60      	cmp	r3, #96	@ 0x60
 8007bee:	d877      	bhi.n	8007ce0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007bf0:	2b50      	cmp	r3, #80	@ 0x50
 8007bf2:	d03c      	beq.n	8007c6e <HAL_TIM_ConfigClockSource+0x14a>
 8007bf4:	2b50      	cmp	r3, #80	@ 0x50
 8007bf6:	d873      	bhi.n	8007ce0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007bf8:	2b40      	cmp	r3, #64	@ 0x40
 8007bfa:	d058      	beq.n	8007cae <HAL_TIM_ConfigClockSource+0x18a>
 8007bfc:	2b40      	cmp	r3, #64	@ 0x40
 8007bfe:	d86f      	bhi.n	8007ce0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007c00:	2b30      	cmp	r3, #48	@ 0x30
 8007c02:	d064      	beq.n	8007cce <HAL_TIM_ConfigClockSource+0x1aa>
 8007c04:	2b30      	cmp	r3, #48	@ 0x30
 8007c06:	d86b      	bhi.n	8007ce0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007c08:	2b20      	cmp	r3, #32
 8007c0a:	d060      	beq.n	8007cce <HAL_TIM_ConfigClockSource+0x1aa>
 8007c0c:	2b20      	cmp	r3, #32
 8007c0e:	d867      	bhi.n	8007ce0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d05c      	beq.n	8007cce <HAL_TIM_ConfigClockSource+0x1aa>
 8007c14:	2b10      	cmp	r3, #16
 8007c16:	d05a      	beq.n	8007cce <HAL_TIM_ConfigClockSource+0x1aa>
 8007c18:	e062      	b.n	8007ce0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c2a:	f000 fc6d 	bl	8008508 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007c3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	68ba      	ldr	r2, [r7, #8]
 8007c44:	609a      	str	r2, [r3, #8]
      break;
 8007c46:	e04f      	b.n	8007ce8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c58:	f000 fc56 	bl	8008508 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	689a      	ldr	r2, [r3, #8]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007c6a:	609a      	str	r2, [r3, #8]
      break;
 8007c6c:	e03c      	b.n	8007ce8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	f000 fbc6 	bl	800840c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	2150      	movs	r1, #80	@ 0x50
 8007c86:	4618      	mov	r0, r3
 8007c88:	f000 fc20 	bl	80084cc <TIM_ITRx_SetConfig>
      break;
 8007c8c:	e02c      	b.n	8007ce8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	f000 fbe5 	bl	800846a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	2160      	movs	r1, #96	@ 0x60
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f000 fc10 	bl	80084cc <TIM_ITRx_SetConfig>
      break;
 8007cac:	e01c      	b.n	8007ce8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cba:	461a      	mov	r2, r3
 8007cbc:	f000 fba6 	bl	800840c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2140      	movs	r1, #64	@ 0x40
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f000 fc00 	bl	80084cc <TIM_ITRx_SetConfig>
      break;
 8007ccc:	e00c      	b.n	8007ce8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	4610      	mov	r0, r2
 8007cda:	f000 fbf7 	bl	80084cc <TIM_ITRx_SetConfig>
      break;
 8007cde:	e003      	b.n	8007ce8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ce4:	e000      	b.n	8007ce8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007ce6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	ffceff88 	.word	0xffceff88
 8007d08:	00100040 	.word	0x00100040
 8007d0c:	00100030 	.word	0x00100030
 8007d10:	00100020 	.word	0x00100020

08007d14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b085      	sub	sp, #20
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4a46      	ldr	r2, [pc, #280]	@ (8007e40 <TIM_Base_SetConfig+0x12c>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d013      	beq.n	8007d54 <TIM_Base_SetConfig+0x40>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d32:	d00f      	beq.n	8007d54 <TIM_Base_SetConfig+0x40>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4a43      	ldr	r2, [pc, #268]	@ (8007e44 <TIM_Base_SetConfig+0x130>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d00b      	beq.n	8007d54 <TIM_Base_SetConfig+0x40>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4a42      	ldr	r2, [pc, #264]	@ (8007e48 <TIM_Base_SetConfig+0x134>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d007      	beq.n	8007d54 <TIM_Base_SetConfig+0x40>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4a41      	ldr	r2, [pc, #260]	@ (8007e4c <TIM_Base_SetConfig+0x138>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d003      	beq.n	8007d54 <TIM_Base_SetConfig+0x40>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a40      	ldr	r2, [pc, #256]	@ (8007e50 <TIM_Base_SetConfig+0x13c>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d108      	bne.n	8007d66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	68fa      	ldr	r2, [r7, #12]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	4a35      	ldr	r2, [pc, #212]	@ (8007e40 <TIM_Base_SetConfig+0x12c>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d01f      	beq.n	8007dae <TIM_Base_SetConfig+0x9a>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d74:	d01b      	beq.n	8007dae <TIM_Base_SetConfig+0x9a>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	4a32      	ldr	r2, [pc, #200]	@ (8007e44 <TIM_Base_SetConfig+0x130>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d017      	beq.n	8007dae <TIM_Base_SetConfig+0x9a>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	4a31      	ldr	r2, [pc, #196]	@ (8007e48 <TIM_Base_SetConfig+0x134>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d013      	beq.n	8007dae <TIM_Base_SetConfig+0x9a>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4a30      	ldr	r2, [pc, #192]	@ (8007e4c <TIM_Base_SetConfig+0x138>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d00f      	beq.n	8007dae <TIM_Base_SetConfig+0x9a>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4a2f      	ldr	r2, [pc, #188]	@ (8007e50 <TIM_Base_SetConfig+0x13c>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d00b      	beq.n	8007dae <TIM_Base_SetConfig+0x9a>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4a2e      	ldr	r2, [pc, #184]	@ (8007e54 <TIM_Base_SetConfig+0x140>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d007      	beq.n	8007dae <TIM_Base_SetConfig+0x9a>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4a2d      	ldr	r2, [pc, #180]	@ (8007e58 <TIM_Base_SetConfig+0x144>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d003      	beq.n	8007dae <TIM_Base_SetConfig+0x9a>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a2c      	ldr	r2, [pc, #176]	@ (8007e5c <TIM_Base_SetConfig+0x148>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d108      	bne.n	8007dc0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007db4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	68fa      	ldr	r2, [r7, #12]
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	695b      	ldr	r3, [r3, #20]
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	68fa      	ldr	r2, [r7, #12]
 8007dd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	689a      	ldr	r2, [r3, #8]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	4a16      	ldr	r2, [pc, #88]	@ (8007e40 <TIM_Base_SetConfig+0x12c>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d00f      	beq.n	8007e0c <TIM_Base_SetConfig+0xf8>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	4a18      	ldr	r2, [pc, #96]	@ (8007e50 <TIM_Base_SetConfig+0x13c>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d00b      	beq.n	8007e0c <TIM_Base_SetConfig+0xf8>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	4a17      	ldr	r2, [pc, #92]	@ (8007e54 <TIM_Base_SetConfig+0x140>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d007      	beq.n	8007e0c <TIM_Base_SetConfig+0xf8>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4a16      	ldr	r2, [pc, #88]	@ (8007e58 <TIM_Base_SetConfig+0x144>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d003      	beq.n	8007e0c <TIM_Base_SetConfig+0xf8>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	4a15      	ldr	r2, [pc, #84]	@ (8007e5c <TIM_Base_SetConfig+0x148>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d103      	bne.n	8007e14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	691a      	ldr	r2, [r3, #16]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2201      	movs	r2, #1
 8007e18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	f003 0301 	and.w	r3, r3, #1
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d105      	bne.n	8007e32 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	f023 0201 	bic.w	r2, r3, #1
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	611a      	str	r2, [r3, #16]
  }
}
 8007e32:	bf00      	nop
 8007e34:	3714      	adds	r7, #20
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr
 8007e3e:	bf00      	nop
 8007e40:	40010000 	.word	0x40010000
 8007e44:	40000400 	.word	0x40000400
 8007e48:	40000800 	.word	0x40000800
 8007e4c:	40000c00 	.word	0x40000c00
 8007e50:	40010400 	.word	0x40010400
 8007e54:	40014000 	.word	0x40014000
 8007e58:	40014400 	.word	0x40014400
 8007e5c:	40014800 	.word	0x40014800

08007e60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b087      	sub	sp, #28
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a1b      	ldr	r3, [r3, #32]
 8007e6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6a1b      	ldr	r3, [r3, #32]
 8007e74:	f023 0201 	bic.w	r2, r3, #1
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	699b      	ldr	r3, [r3, #24]
 8007e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	4b37      	ldr	r3, [pc, #220]	@ (8007f68 <TIM_OC1_SetConfig+0x108>)
 8007e8c:	4013      	ands	r3, r2
 8007e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f023 0303 	bic.w	r3, r3, #3
 8007e96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	68fa      	ldr	r2, [r7, #12]
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	f023 0302 	bic.w	r3, r3, #2
 8007ea8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	697a      	ldr	r2, [r7, #20]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	4a2d      	ldr	r2, [pc, #180]	@ (8007f6c <TIM_OC1_SetConfig+0x10c>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d00f      	beq.n	8007edc <TIM_OC1_SetConfig+0x7c>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	4a2c      	ldr	r2, [pc, #176]	@ (8007f70 <TIM_OC1_SetConfig+0x110>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d00b      	beq.n	8007edc <TIM_OC1_SetConfig+0x7c>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4a2b      	ldr	r2, [pc, #172]	@ (8007f74 <TIM_OC1_SetConfig+0x114>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d007      	beq.n	8007edc <TIM_OC1_SetConfig+0x7c>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	4a2a      	ldr	r2, [pc, #168]	@ (8007f78 <TIM_OC1_SetConfig+0x118>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d003      	beq.n	8007edc <TIM_OC1_SetConfig+0x7c>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	4a29      	ldr	r2, [pc, #164]	@ (8007f7c <TIM_OC1_SetConfig+0x11c>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d10c      	bne.n	8007ef6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	f023 0308 	bic.w	r3, r3, #8
 8007ee2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	697a      	ldr	r2, [r7, #20]
 8007eea:	4313      	orrs	r3, r2
 8007eec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	f023 0304 	bic.w	r3, r3, #4
 8007ef4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a1c      	ldr	r2, [pc, #112]	@ (8007f6c <TIM_OC1_SetConfig+0x10c>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d00f      	beq.n	8007f1e <TIM_OC1_SetConfig+0xbe>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a1b      	ldr	r2, [pc, #108]	@ (8007f70 <TIM_OC1_SetConfig+0x110>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d00b      	beq.n	8007f1e <TIM_OC1_SetConfig+0xbe>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a1a      	ldr	r2, [pc, #104]	@ (8007f74 <TIM_OC1_SetConfig+0x114>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d007      	beq.n	8007f1e <TIM_OC1_SetConfig+0xbe>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	4a19      	ldr	r2, [pc, #100]	@ (8007f78 <TIM_OC1_SetConfig+0x118>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d003      	beq.n	8007f1e <TIM_OC1_SetConfig+0xbe>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4a18      	ldr	r2, [pc, #96]	@ (8007f7c <TIM_OC1_SetConfig+0x11c>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d111      	bne.n	8007f42 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007f2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	695b      	ldr	r3, [r3, #20]
 8007f32:	693a      	ldr	r2, [r7, #16]
 8007f34:	4313      	orrs	r3, r2
 8007f36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	699b      	ldr	r3, [r3, #24]
 8007f3c:	693a      	ldr	r2, [r7, #16]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	693a      	ldr	r2, [r7, #16]
 8007f46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	68fa      	ldr	r2, [r7, #12]
 8007f4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	685a      	ldr	r2, [r3, #4]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	697a      	ldr	r2, [r7, #20]
 8007f5a:	621a      	str	r2, [r3, #32]
}
 8007f5c:	bf00      	nop
 8007f5e:	371c      	adds	r7, #28
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr
 8007f68:	fffeff8f 	.word	0xfffeff8f
 8007f6c:	40010000 	.word	0x40010000
 8007f70:	40010400 	.word	0x40010400
 8007f74:	40014000 	.word	0x40014000
 8007f78:	40014400 	.word	0x40014400
 8007f7c:	40014800 	.word	0x40014800

08007f80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b087      	sub	sp, #28
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a1b      	ldr	r3, [r3, #32]
 8007f8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6a1b      	ldr	r3, [r3, #32]
 8007f94:	f023 0210 	bic.w	r2, r3, #16
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	699b      	ldr	r3, [r3, #24]
 8007fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	4b34      	ldr	r3, [pc, #208]	@ (800807c <TIM_OC2_SetConfig+0xfc>)
 8007fac:	4013      	ands	r3, r2
 8007fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007fb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	021b      	lsls	r3, r3, #8
 8007fbe:	68fa      	ldr	r2, [r7, #12]
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	f023 0320 	bic.w	r3, r3, #32
 8007fca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	011b      	lsls	r3, r3, #4
 8007fd2:	697a      	ldr	r2, [r7, #20]
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4a29      	ldr	r2, [pc, #164]	@ (8008080 <TIM_OC2_SetConfig+0x100>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d003      	beq.n	8007fe8 <TIM_OC2_SetConfig+0x68>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	4a28      	ldr	r2, [pc, #160]	@ (8008084 <TIM_OC2_SetConfig+0x104>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d10d      	bne.n	8008004 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007fee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	011b      	lsls	r3, r3, #4
 8007ff6:	697a      	ldr	r2, [r7, #20]
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008002:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	4a1e      	ldr	r2, [pc, #120]	@ (8008080 <TIM_OC2_SetConfig+0x100>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d00f      	beq.n	800802c <TIM_OC2_SetConfig+0xac>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	4a1d      	ldr	r2, [pc, #116]	@ (8008084 <TIM_OC2_SetConfig+0x104>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d00b      	beq.n	800802c <TIM_OC2_SetConfig+0xac>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	4a1c      	ldr	r2, [pc, #112]	@ (8008088 <TIM_OC2_SetConfig+0x108>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d007      	beq.n	800802c <TIM_OC2_SetConfig+0xac>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	4a1b      	ldr	r2, [pc, #108]	@ (800808c <TIM_OC2_SetConfig+0x10c>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d003      	beq.n	800802c <TIM_OC2_SetConfig+0xac>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	4a1a      	ldr	r2, [pc, #104]	@ (8008090 <TIM_OC2_SetConfig+0x110>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d113      	bne.n	8008054 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008032:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800803a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	695b      	ldr	r3, [r3, #20]
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	693a      	ldr	r2, [r7, #16]
 8008044:	4313      	orrs	r3, r2
 8008046:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	699b      	ldr	r3, [r3, #24]
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	693a      	ldr	r2, [r7, #16]
 8008050:	4313      	orrs	r3, r2
 8008052:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	693a      	ldr	r2, [r7, #16]
 8008058:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	685a      	ldr	r2, [r3, #4]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	697a      	ldr	r2, [r7, #20]
 800806c:	621a      	str	r2, [r3, #32]
}
 800806e:	bf00      	nop
 8008070:	371c      	adds	r7, #28
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr
 800807a:	bf00      	nop
 800807c:	feff8fff 	.word	0xfeff8fff
 8008080:	40010000 	.word	0x40010000
 8008084:	40010400 	.word	0x40010400
 8008088:	40014000 	.word	0x40014000
 800808c:	40014400 	.word	0x40014400
 8008090:	40014800 	.word	0x40014800

08008094 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008094:	b480      	push	{r7}
 8008096:	b087      	sub	sp, #28
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6a1b      	ldr	r3, [r3, #32]
 80080a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6a1b      	ldr	r3, [r3, #32]
 80080a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	69db      	ldr	r3, [r3, #28]
 80080ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	4b33      	ldr	r3, [pc, #204]	@ (800818c <TIM_OC3_SetConfig+0xf8>)
 80080c0:	4013      	ands	r3, r2
 80080c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f023 0303 	bic.w	r3, r3, #3
 80080ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	68fa      	ldr	r2, [r7, #12]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80080dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	021b      	lsls	r3, r3, #8
 80080e4:	697a      	ldr	r2, [r7, #20]
 80080e6:	4313      	orrs	r3, r2
 80080e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	4a28      	ldr	r2, [pc, #160]	@ (8008190 <TIM_OC3_SetConfig+0xfc>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d003      	beq.n	80080fa <TIM_OC3_SetConfig+0x66>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4a27      	ldr	r2, [pc, #156]	@ (8008194 <TIM_OC3_SetConfig+0x100>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d10d      	bne.n	8008116 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008100:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	68db      	ldr	r3, [r3, #12]
 8008106:	021b      	lsls	r3, r3, #8
 8008108:	697a      	ldr	r2, [r7, #20]
 800810a:	4313      	orrs	r3, r2
 800810c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008114:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4a1d      	ldr	r2, [pc, #116]	@ (8008190 <TIM_OC3_SetConfig+0xfc>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d00f      	beq.n	800813e <TIM_OC3_SetConfig+0xaa>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4a1c      	ldr	r2, [pc, #112]	@ (8008194 <TIM_OC3_SetConfig+0x100>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d00b      	beq.n	800813e <TIM_OC3_SetConfig+0xaa>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4a1b      	ldr	r2, [pc, #108]	@ (8008198 <TIM_OC3_SetConfig+0x104>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d007      	beq.n	800813e <TIM_OC3_SetConfig+0xaa>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4a1a      	ldr	r2, [pc, #104]	@ (800819c <TIM_OC3_SetConfig+0x108>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d003      	beq.n	800813e <TIM_OC3_SetConfig+0xaa>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	4a19      	ldr	r2, [pc, #100]	@ (80081a0 <TIM_OC3_SetConfig+0x10c>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d113      	bne.n	8008166 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008144:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800814c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	695b      	ldr	r3, [r3, #20]
 8008152:	011b      	lsls	r3, r3, #4
 8008154:	693a      	ldr	r2, [r7, #16]
 8008156:	4313      	orrs	r3, r2
 8008158:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	699b      	ldr	r3, [r3, #24]
 800815e:	011b      	lsls	r3, r3, #4
 8008160:	693a      	ldr	r2, [r7, #16]
 8008162:	4313      	orrs	r3, r2
 8008164:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	693a      	ldr	r2, [r7, #16]
 800816a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	685a      	ldr	r2, [r3, #4]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	697a      	ldr	r2, [r7, #20]
 800817e:	621a      	str	r2, [r3, #32]
}
 8008180:	bf00      	nop
 8008182:	371c      	adds	r7, #28
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr
 800818c:	fffeff8f 	.word	0xfffeff8f
 8008190:	40010000 	.word	0x40010000
 8008194:	40010400 	.word	0x40010400
 8008198:	40014000 	.word	0x40014000
 800819c:	40014400 	.word	0x40014400
 80081a0:	40014800 	.word	0x40014800

080081a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b087      	sub	sp, #28
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a1b      	ldr	r3, [r3, #32]
 80081b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6a1b      	ldr	r3, [r3, #32]
 80081b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	69db      	ldr	r3, [r3, #28]
 80081ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80081cc:	68fa      	ldr	r2, [r7, #12]
 80081ce:	4b24      	ldr	r3, [pc, #144]	@ (8008260 <TIM_OC4_SetConfig+0xbc>)
 80081d0:	4013      	ands	r3, r2
 80081d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	021b      	lsls	r3, r3, #8
 80081e2:	68fa      	ldr	r2, [r7, #12]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80081ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	031b      	lsls	r3, r3, #12
 80081f6:	693a      	ldr	r2, [r7, #16]
 80081f8:	4313      	orrs	r3, r2
 80081fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	4a19      	ldr	r2, [pc, #100]	@ (8008264 <TIM_OC4_SetConfig+0xc0>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d00f      	beq.n	8008224 <TIM_OC4_SetConfig+0x80>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	4a18      	ldr	r2, [pc, #96]	@ (8008268 <TIM_OC4_SetConfig+0xc4>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d00b      	beq.n	8008224 <TIM_OC4_SetConfig+0x80>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	4a17      	ldr	r2, [pc, #92]	@ (800826c <TIM_OC4_SetConfig+0xc8>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d007      	beq.n	8008224 <TIM_OC4_SetConfig+0x80>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4a16      	ldr	r2, [pc, #88]	@ (8008270 <TIM_OC4_SetConfig+0xcc>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d003      	beq.n	8008224 <TIM_OC4_SetConfig+0x80>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	4a15      	ldr	r2, [pc, #84]	@ (8008274 <TIM_OC4_SetConfig+0xd0>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d109      	bne.n	8008238 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800822a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	695b      	ldr	r3, [r3, #20]
 8008230:	019b      	lsls	r3, r3, #6
 8008232:	697a      	ldr	r2, [r7, #20]
 8008234:	4313      	orrs	r3, r2
 8008236:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	697a      	ldr	r2, [r7, #20]
 800823c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	685a      	ldr	r2, [r3, #4]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	693a      	ldr	r2, [r7, #16]
 8008250:	621a      	str	r2, [r3, #32]
}
 8008252:	bf00      	nop
 8008254:	371c      	adds	r7, #28
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	feff8fff 	.word	0xfeff8fff
 8008264:	40010000 	.word	0x40010000
 8008268:	40010400 	.word	0x40010400
 800826c:	40014000 	.word	0x40014000
 8008270:	40014400 	.word	0x40014400
 8008274:	40014800 	.word	0x40014800

08008278 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008278:	b480      	push	{r7}
 800827a:	b087      	sub	sp, #28
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6a1b      	ldr	r3, [r3, #32]
 8008286:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6a1b      	ldr	r3, [r3, #32]
 800828c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800829e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80082a0:	68fa      	ldr	r2, [r7, #12]
 80082a2:	4b21      	ldr	r3, [pc, #132]	@ (8008328 <TIM_OC5_SetConfig+0xb0>)
 80082a4:	4013      	ands	r3, r2
 80082a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	4313      	orrs	r3, r2
 80082b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80082b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	041b      	lsls	r3, r3, #16
 80082c0:	693a      	ldr	r2, [r7, #16]
 80082c2:	4313      	orrs	r3, r2
 80082c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	4a18      	ldr	r2, [pc, #96]	@ (800832c <TIM_OC5_SetConfig+0xb4>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d00f      	beq.n	80082ee <TIM_OC5_SetConfig+0x76>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	4a17      	ldr	r2, [pc, #92]	@ (8008330 <TIM_OC5_SetConfig+0xb8>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d00b      	beq.n	80082ee <TIM_OC5_SetConfig+0x76>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	4a16      	ldr	r2, [pc, #88]	@ (8008334 <TIM_OC5_SetConfig+0xbc>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d007      	beq.n	80082ee <TIM_OC5_SetConfig+0x76>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4a15      	ldr	r2, [pc, #84]	@ (8008338 <TIM_OC5_SetConfig+0xc0>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d003      	beq.n	80082ee <TIM_OC5_SetConfig+0x76>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4a14      	ldr	r2, [pc, #80]	@ (800833c <TIM_OC5_SetConfig+0xc4>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d109      	bne.n	8008302 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80082f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	695b      	ldr	r3, [r3, #20]
 80082fa:	021b      	lsls	r3, r3, #8
 80082fc:	697a      	ldr	r2, [r7, #20]
 80082fe:	4313      	orrs	r3, r2
 8008300:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	697a      	ldr	r2, [r7, #20]
 8008306:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	685a      	ldr	r2, [r3, #4]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	693a      	ldr	r2, [r7, #16]
 800831a:	621a      	str	r2, [r3, #32]
}
 800831c:	bf00      	nop
 800831e:	371c      	adds	r7, #28
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr
 8008328:	fffeff8f 	.word	0xfffeff8f
 800832c:	40010000 	.word	0x40010000
 8008330:	40010400 	.word	0x40010400
 8008334:	40014000 	.word	0x40014000
 8008338:	40014400 	.word	0x40014400
 800833c:	40014800 	.word	0x40014800

08008340 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008340:	b480      	push	{r7}
 8008342:	b087      	sub	sp, #28
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6a1b      	ldr	r3, [r3, #32]
 800834e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6a1b      	ldr	r3, [r3, #32]
 8008354:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008368:	68fa      	ldr	r2, [r7, #12]
 800836a:	4b22      	ldr	r3, [pc, #136]	@ (80083f4 <TIM_OC6_SetConfig+0xb4>)
 800836c:	4013      	ands	r3, r2
 800836e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	021b      	lsls	r3, r3, #8
 8008376:	68fa      	ldr	r2, [r7, #12]
 8008378:	4313      	orrs	r3, r2
 800837a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008382:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	051b      	lsls	r3, r3, #20
 800838a:	693a      	ldr	r2, [r7, #16]
 800838c:	4313      	orrs	r3, r2
 800838e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4a19      	ldr	r2, [pc, #100]	@ (80083f8 <TIM_OC6_SetConfig+0xb8>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d00f      	beq.n	80083b8 <TIM_OC6_SetConfig+0x78>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a18      	ldr	r2, [pc, #96]	@ (80083fc <TIM_OC6_SetConfig+0xbc>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d00b      	beq.n	80083b8 <TIM_OC6_SetConfig+0x78>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4a17      	ldr	r2, [pc, #92]	@ (8008400 <TIM_OC6_SetConfig+0xc0>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d007      	beq.n	80083b8 <TIM_OC6_SetConfig+0x78>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a16      	ldr	r2, [pc, #88]	@ (8008404 <TIM_OC6_SetConfig+0xc4>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d003      	beq.n	80083b8 <TIM_OC6_SetConfig+0x78>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a15      	ldr	r2, [pc, #84]	@ (8008408 <TIM_OC6_SetConfig+0xc8>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d109      	bne.n	80083cc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80083be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	695b      	ldr	r3, [r3, #20]
 80083c4:	029b      	lsls	r3, r3, #10
 80083c6:	697a      	ldr	r2, [r7, #20]
 80083c8:	4313      	orrs	r3, r2
 80083ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	697a      	ldr	r2, [r7, #20]
 80083d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	685a      	ldr	r2, [r3, #4]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	693a      	ldr	r2, [r7, #16]
 80083e4:	621a      	str	r2, [r3, #32]
}
 80083e6:	bf00      	nop
 80083e8:	371c      	adds	r7, #28
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr
 80083f2:	bf00      	nop
 80083f4:	feff8fff 	.word	0xfeff8fff
 80083f8:	40010000 	.word	0x40010000
 80083fc:	40010400 	.word	0x40010400
 8008400:	40014000 	.word	0x40014000
 8008404:	40014400 	.word	0x40014400
 8008408:	40014800 	.word	0x40014800

0800840c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800840c:	b480      	push	{r7}
 800840e:	b087      	sub	sp, #28
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6a1b      	ldr	r3, [r3, #32]
 800841c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	6a1b      	ldr	r3, [r3, #32]
 8008422:	f023 0201 	bic.w	r2, r3, #1
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	699b      	ldr	r3, [r3, #24]
 800842e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008436:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	011b      	lsls	r3, r3, #4
 800843c:	693a      	ldr	r2, [r7, #16]
 800843e:	4313      	orrs	r3, r2
 8008440:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	f023 030a 	bic.w	r3, r3, #10
 8008448:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800844a:	697a      	ldr	r2, [r7, #20]
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	4313      	orrs	r3, r2
 8008450:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	693a      	ldr	r2, [r7, #16]
 8008456:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	697a      	ldr	r2, [r7, #20]
 800845c:	621a      	str	r2, [r3, #32]
}
 800845e:	bf00      	nop
 8008460:	371c      	adds	r7, #28
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr

0800846a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800846a:	b480      	push	{r7}
 800846c:	b087      	sub	sp, #28
 800846e:	af00      	add	r7, sp, #0
 8008470:	60f8      	str	r0, [r7, #12]
 8008472:	60b9      	str	r1, [r7, #8]
 8008474:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	6a1b      	ldr	r3, [r3, #32]
 800847a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6a1b      	ldr	r3, [r3, #32]
 8008480:	f023 0210 	bic.w	r2, r3, #16
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	699b      	ldr	r3, [r3, #24]
 800848c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008494:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	031b      	lsls	r3, r3, #12
 800849a:	693a      	ldr	r2, [r7, #16]
 800849c:	4313      	orrs	r3, r2
 800849e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80084a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	011b      	lsls	r3, r3, #4
 80084ac:	697a      	ldr	r2, [r7, #20]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	693a      	ldr	r2, [r7, #16]
 80084b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	697a      	ldr	r2, [r7, #20]
 80084bc:	621a      	str	r2, [r3, #32]
}
 80084be:	bf00      	nop
 80084c0:	371c      	adds	r7, #28
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr
	...

080084cc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b085      	sub	sp, #20
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80084dc:	68fa      	ldr	r2, [r7, #12]
 80084de:	4b09      	ldr	r3, [pc, #36]	@ (8008504 <TIM_ITRx_SetConfig+0x38>)
 80084e0:	4013      	ands	r3, r2
 80084e2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80084e4:	683a      	ldr	r2, [r7, #0]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	4313      	orrs	r3, r2
 80084ea:	f043 0307 	orr.w	r3, r3, #7
 80084ee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	68fa      	ldr	r2, [r7, #12]
 80084f4:	609a      	str	r2, [r3, #8]
}
 80084f6:	bf00      	nop
 80084f8:	3714      	adds	r7, #20
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr
 8008502:	bf00      	nop
 8008504:	ffcfff8f 	.word	0xffcfff8f

08008508 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008508:	b480      	push	{r7}
 800850a:	b087      	sub	sp, #28
 800850c:	af00      	add	r7, sp, #0
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	607a      	str	r2, [r7, #4]
 8008514:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008522:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	021a      	lsls	r2, r3, #8
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	431a      	orrs	r2, r3
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	4313      	orrs	r3, r2
 8008530:	697a      	ldr	r2, [r7, #20]
 8008532:	4313      	orrs	r3, r2
 8008534:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	697a      	ldr	r2, [r7, #20]
 800853a:	609a      	str	r2, [r3, #8]
}
 800853c:	bf00      	nop
 800853e:	371c      	adds	r7, #28
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr

08008548 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008548:	b480      	push	{r7}
 800854a:	b085      	sub	sp, #20
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008558:	2b01      	cmp	r3, #1
 800855a:	d101      	bne.n	8008560 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800855c:	2302      	movs	r3, #2
 800855e:	e06d      	b.n	800863c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2201      	movs	r2, #1
 8008564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2202      	movs	r2, #2
 800856c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	689b      	ldr	r3, [r3, #8]
 800857e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a30      	ldr	r2, [pc, #192]	@ (8008648 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d004      	beq.n	8008594 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a2f      	ldr	r2, [pc, #188]	@ (800864c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d108      	bne.n	80085a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800859a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	68fa      	ldr	r2, [r7, #12]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	4313      	orrs	r3, r2
 80085b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a20      	ldr	r2, [pc, #128]	@ (8008648 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d022      	beq.n	8008610 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085d2:	d01d      	beq.n	8008610 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a1d      	ldr	r2, [pc, #116]	@ (8008650 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d018      	beq.n	8008610 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a1c      	ldr	r2, [pc, #112]	@ (8008654 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d013      	beq.n	8008610 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a1a      	ldr	r2, [pc, #104]	@ (8008658 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d00e      	beq.n	8008610 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a15      	ldr	r2, [pc, #84]	@ (800864c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d009      	beq.n	8008610 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a16      	ldr	r2, [pc, #88]	@ (800865c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d004      	beq.n	8008610 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a15      	ldr	r2, [pc, #84]	@ (8008660 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d10c      	bne.n	800862a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008616:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	68ba      	ldr	r2, [r7, #8]
 800861e:	4313      	orrs	r3, r2
 8008620:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	68ba      	ldr	r2, [r7, #8]
 8008628:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2201      	movs	r2, #1
 800862e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800863a:	2300      	movs	r3, #0
}
 800863c:	4618      	mov	r0, r3
 800863e:	3714      	adds	r7, #20
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr
 8008648:	40010000 	.word	0x40010000
 800864c:	40010400 	.word	0x40010400
 8008650:	40000400 	.word	0x40000400
 8008654:	40000800 	.word	0x40000800
 8008658:	40000c00 	.word	0x40000c00
 800865c:	40001800 	.word	0x40001800
 8008660:	40014000 	.word	0x40014000

08008664 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008664:	b480      	push	{r7}
 8008666:	b085      	sub	sp, #20
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800866e:	2300      	movs	r3, #0
 8008670:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008678:	2b01      	cmp	r3, #1
 800867a:	d101      	bne.n	8008680 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800867c:	2302      	movs	r3, #2
 800867e:	e065      	b.n	800874c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	68db      	ldr	r3, [r3, #12]
 8008692:	4313      	orrs	r3, r2
 8008694:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	4313      	orrs	r3, r2
 80086b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4313      	orrs	r3, r2
 80086be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	691b      	ldr	r3, [r3, #16]
 80086ca:	4313      	orrs	r3, r2
 80086cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	695b      	ldr	r3, [r3, #20]
 80086d8:	4313      	orrs	r3, r2
 80086da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086e6:	4313      	orrs	r3, r2
 80086e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	699b      	ldr	r3, [r3, #24]
 80086f4:	041b      	lsls	r3, r3, #16
 80086f6:	4313      	orrs	r3, r2
 80086f8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a16      	ldr	r2, [pc, #88]	@ (8008758 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d004      	beq.n	800870e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a14      	ldr	r2, [pc, #80]	@ (800875c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d115      	bne.n	800873a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008718:	051b      	lsls	r3, r3, #20
 800871a:	4313      	orrs	r3, r2
 800871c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	69db      	ldr	r3, [r3, #28]
 8008728:	4313      	orrs	r3, r2
 800872a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	6a1b      	ldr	r3, [r3, #32]
 8008736:	4313      	orrs	r3, r2
 8008738:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	68fa      	ldr	r2, [r7, #12]
 8008740:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800874a:	2300      	movs	r3, #0
}
 800874c:	4618      	mov	r0, r3
 800874e:	3714      	adds	r7, #20
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr
 8008758:	40010000 	.word	0x40010000
 800875c:	40010400 	.word	0x40010400

08008760 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b082      	sub	sp, #8
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d101      	bne.n	8008772 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800876e:	2301      	movs	r3, #1
 8008770:	e042      	b.n	80087f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008778:	2b00      	cmp	r3, #0
 800877a:	d106      	bne.n	800878a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2200      	movs	r2, #0
 8008780:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f7f8 fd31 	bl	80011ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2224      	movs	r2, #36	@ 0x24
 800878e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f022 0201 	bic.w	r2, r2, #1
 80087a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d002      	beq.n	80087b0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f001 f9f6 	bl	8009b9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 fc8b 	bl	80090cc <UART_SetConfig>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d101      	bne.n	80087c0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80087bc:	2301      	movs	r3, #1
 80087be:	e01b      	b.n	80087f8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	685a      	ldr	r2, [r3, #4]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80087ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	689a      	ldr	r2, [r3, #8]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80087de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f042 0201 	orr.w	r2, r2, #1
 80087ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f001 fa75 	bl	8009ce0 <UART_CheckIdleState>
 80087f6:	4603      	mov	r3, r0
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3708      	adds	r7, #8
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b08a      	sub	sp, #40	@ 0x28
 8008804:	af02      	add	r7, sp, #8
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	603b      	str	r3, [r7, #0]
 800880c:	4613      	mov	r3, r2
 800880e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008816:	2b20      	cmp	r3, #32
 8008818:	d17b      	bne.n	8008912 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d002      	beq.n	8008826 <HAL_UART_Transmit+0x26>
 8008820:	88fb      	ldrh	r3, [r7, #6]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d101      	bne.n	800882a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	e074      	b.n	8008914 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2200      	movs	r2, #0
 800882e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2221      	movs	r2, #33	@ 0x21
 8008836:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800883a:	f7f8 ffcf 	bl	80017dc <HAL_GetTick>
 800883e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	88fa      	ldrh	r2, [r7, #6]
 8008844:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	88fa      	ldrh	r2, [r7, #6]
 800884c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008858:	d108      	bne.n	800886c <HAL_UART_Transmit+0x6c>
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	691b      	ldr	r3, [r3, #16]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d104      	bne.n	800886c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008862:	2300      	movs	r3, #0
 8008864:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	61bb      	str	r3, [r7, #24]
 800886a:	e003      	b.n	8008874 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008870:	2300      	movs	r3, #0
 8008872:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008874:	e030      	b.n	80088d8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	9300      	str	r3, [sp, #0]
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	2200      	movs	r2, #0
 800887e:	2180      	movs	r1, #128	@ 0x80
 8008880:	68f8      	ldr	r0, [r7, #12]
 8008882:	f001 fad7 	bl	8009e34 <UART_WaitOnFlagUntilTimeout>
 8008886:	4603      	mov	r3, r0
 8008888:	2b00      	cmp	r3, #0
 800888a:	d005      	beq.n	8008898 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2220      	movs	r2, #32
 8008890:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008894:	2303      	movs	r3, #3
 8008896:	e03d      	b.n	8008914 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008898:	69fb      	ldr	r3, [r7, #28]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d10b      	bne.n	80088b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800889e:	69bb      	ldr	r3, [r7, #24]
 80088a0:	881b      	ldrh	r3, [r3, #0]
 80088a2:	461a      	mov	r2, r3
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80088ac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	3302      	adds	r3, #2
 80088b2:	61bb      	str	r3, [r7, #24]
 80088b4:	e007      	b.n	80088c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80088b6:	69fb      	ldr	r3, [r7, #28]
 80088b8:	781a      	ldrb	r2, [r3, #0]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80088c0:	69fb      	ldr	r3, [r7, #28]
 80088c2:	3301      	adds	r3, #1
 80088c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	3b01      	subs	r3, #1
 80088d0:	b29a      	uxth	r2, r3
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80088de:	b29b      	uxth	r3, r3
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d1c8      	bne.n	8008876 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	9300      	str	r3, [sp, #0]
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	2200      	movs	r2, #0
 80088ec:	2140      	movs	r1, #64	@ 0x40
 80088ee:	68f8      	ldr	r0, [r7, #12]
 80088f0:	f001 faa0 	bl	8009e34 <UART_WaitOnFlagUntilTimeout>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d005      	beq.n	8008906 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2220      	movs	r2, #32
 80088fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008902:	2303      	movs	r3, #3
 8008904:	e006      	b.n	8008914 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2220      	movs	r2, #32
 800890a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800890e:	2300      	movs	r3, #0
 8008910:	e000      	b.n	8008914 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008912:	2302      	movs	r3, #2
  }
}
 8008914:	4618      	mov	r0, r3
 8008916:	3720      	adds	r7, #32
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b0ba      	sub	sp, #232	@ 0xe8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	69db      	ldr	r3, [r3, #28]
 800892a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008942:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008946:	f640 030f 	movw	r3, #2063	@ 0x80f
 800894a:	4013      	ands	r3, r2
 800894c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008950:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008954:	2b00      	cmp	r3, #0
 8008956:	d11b      	bne.n	8008990 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800895c:	f003 0320 	and.w	r3, r3, #32
 8008960:	2b00      	cmp	r3, #0
 8008962:	d015      	beq.n	8008990 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008968:	f003 0320 	and.w	r3, r3, #32
 800896c:	2b00      	cmp	r3, #0
 800896e:	d105      	bne.n	800897c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008970:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008974:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008978:	2b00      	cmp	r3, #0
 800897a:	d009      	beq.n	8008990 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008980:	2b00      	cmp	r3, #0
 8008982:	f000 8377 	beq.w	8009074 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	4798      	blx	r3
      }
      return;
 800898e:	e371      	b.n	8009074 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008990:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008994:	2b00      	cmp	r3, #0
 8008996:	f000 8123 	beq.w	8008be0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800899a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800899e:	4b8d      	ldr	r3, [pc, #564]	@ (8008bd4 <HAL_UART_IRQHandler+0x2b8>)
 80089a0:	4013      	ands	r3, r2
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d106      	bne.n	80089b4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80089a6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80089aa:	4b8b      	ldr	r3, [pc, #556]	@ (8008bd8 <HAL_UART_IRQHandler+0x2bc>)
 80089ac:	4013      	ands	r3, r2
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	f000 8116 	beq.w	8008be0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80089b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089b8:	f003 0301 	and.w	r3, r3, #1
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d011      	beq.n	80089e4 <HAL_UART_IRQHandler+0xc8>
 80089c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d00b      	beq.n	80089e4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	2201      	movs	r2, #1
 80089d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089da:	f043 0201 	orr.w	r2, r3, #1
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80089e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089e8:	f003 0302 	and.w	r3, r3, #2
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d011      	beq.n	8008a14 <HAL_UART_IRQHandler+0xf8>
 80089f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80089f4:	f003 0301 	and.w	r3, r3, #1
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d00b      	beq.n	8008a14 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	2202      	movs	r2, #2
 8008a02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a0a:	f043 0204 	orr.w	r2, r3, #4
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a18:	f003 0304 	and.w	r3, r3, #4
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d011      	beq.n	8008a44 <HAL_UART_IRQHandler+0x128>
 8008a20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a24:	f003 0301 	and.w	r3, r3, #1
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d00b      	beq.n	8008a44 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2204      	movs	r2, #4
 8008a32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a3a:	f043 0202 	orr.w	r2, r3, #2
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a48:	f003 0308 	and.w	r3, r3, #8
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d017      	beq.n	8008a80 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a54:	f003 0320 	and.w	r3, r3, #32
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d105      	bne.n	8008a68 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008a5c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008a60:	4b5c      	ldr	r3, [pc, #368]	@ (8008bd4 <HAL_UART_IRQHandler+0x2b8>)
 8008a62:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d00b      	beq.n	8008a80 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	2208      	movs	r2, #8
 8008a6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a76:	f043 0208 	orr.w	r2, r3, #8
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d012      	beq.n	8008ab2 <HAL_UART_IRQHandler+0x196>
 8008a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a90:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d00c      	beq.n	8008ab2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008aa0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008aa8:	f043 0220 	orr.w	r2, r3, #32
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	f000 82dd 	beq.w	8009078 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ac2:	f003 0320 	and.w	r3, r3, #32
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d013      	beq.n	8008af2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008aca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ace:	f003 0320 	and.w	r3, r3, #32
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d105      	bne.n	8008ae2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008ad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ada:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d007      	beq.n	8008af2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d003      	beq.n	8008af2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008af8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	689b      	ldr	r3, [r3, #8]
 8008b02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b06:	2b40      	cmp	r3, #64	@ 0x40
 8008b08:	d005      	beq.n	8008b16 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008b0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008b0e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d054      	beq.n	8008bc0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f001 fae2 	bl	800a0e0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b26:	2b40      	cmp	r3, #64	@ 0x40
 8008b28:	d146      	bne.n	8008bb8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	3308      	adds	r3, #8
 8008b30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b34:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008b38:	e853 3f00 	ldrex	r3, [r3]
 8008b3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008b40:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008b44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	3308      	adds	r3, #8
 8008b52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008b56:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008b5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008b62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008b66:	e841 2300 	strex	r3, r2, [r1]
 8008b6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008b6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d1d9      	bne.n	8008b2a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d017      	beq.n	8008bb0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b86:	4a15      	ldr	r2, [pc, #84]	@ (8008bdc <HAL_UART_IRQHandler+0x2c0>)
 8008b88:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b90:	4618      	mov	r0, r3
 8008b92:	f7fa f8a7 	bl	8002ce4 <HAL_DMA_Abort_IT>
 8008b96:	4603      	mov	r3, r0
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d019      	beq.n	8008bd0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ba2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008baa:	4610      	mov	r0, r2
 8008bac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bae:	e00f      	b.n	8008bd0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f7f7 ff7d 	bl	8000ab0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bb6:	e00b      	b.n	8008bd0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f7f7 ff79 	bl	8000ab0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bbe:	e007      	b.n	8008bd0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f7f7 ff75 	bl	8000ab0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008bce:	e253      	b.n	8009078 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bd0:	bf00      	nop
    return;
 8008bd2:	e251      	b.n	8009078 <HAL_UART_IRQHandler+0x75c>
 8008bd4:	10000001 	.word	0x10000001
 8008bd8:	04000120 	.word	0x04000120
 8008bdc:	0800a393 	.word	0x0800a393

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	f040 81e7 	bne.w	8008fb8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bee:	f003 0310 	and.w	r3, r3, #16
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	f000 81e0 	beq.w	8008fb8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bfc:	f003 0310 	and.w	r3, r3, #16
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	f000 81d9 	beq.w	8008fb8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2210      	movs	r2, #16
 8008c0c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c18:	2b40      	cmp	r3, #64	@ 0x40
 8008c1a:	f040 8151 	bne.w	8008ec0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a96      	ldr	r2, [pc, #600]	@ (8008e80 <HAL_UART_IRQHandler+0x564>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d068      	beq.n	8008cfe <HAL_UART_IRQHandler+0x3e2>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a93      	ldr	r2, [pc, #588]	@ (8008e84 <HAL_UART_IRQHandler+0x568>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d061      	beq.n	8008cfe <HAL_UART_IRQHandler+0x3e2>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a91      	ldr	r2, [pc, #580]	@ (8008e88 <HAL_UART_IRQHandler+0x56c>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d05a      	beq.n	8008cfe <HAL_UART_IRQHandler+0x3e2>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a8e      	ldr	r2, [pc, #568]	@ (8008e8c <HAL_UART_IRQHandler+0x570>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d053      	beq.n	8008cfe <HAL_UART_IRQHandler+0x3e2>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a8c      	ldr	r2, [pc, #560]	@ (8008e90 <HAL_UART_IRQHandler+0x574>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d04c      	beq.n	8008cfe <HAL_UART_IRQHandler+0x3e2>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a89      	ldr	r2, [pc, #548]	@ (8008e94 <HAL_UART_IRQHandler+0x578>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d045      	beq.n	8008cfe <HAL_UART_IRQHandler+0x3e2>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a87      	ldr	r2, [pc, #540]	@ (8008e98 <HAL_UART_IRQHandler+0x57c>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d03e      	beq.n	8008cfe <HAL_UART_IRQHandler+0x3e2>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a84      	ldr	r2, [pc, #528]	@ (8008e9c <HAL_UART_IRQHandler+0x580>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d037      	beq.n	8008cfe <HAL_UART_IRQHandler+0x3e2>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4a82      	ldr	r2, [pc, #520]	@ (8008ea0 <HAL_UART_IRQHandler+0x584>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d030      	beq.n	8008cfe <HAL_UART_IRQHandler+0x3e2>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a7f      	ldr	r2, [pc, #508]	@ (8008ea4 <HAL_UART_IRQHandler+0x588>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d029      	beq.n	8008cfe <HAL_UART_IRQHandler+0x3e2>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a7d      	ldr	r2, [pc, #500]	@ (8008ea8 <HAL_UART_IRQHandler+0x58c>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d022      	beq.n	8008cfe <HAL_UART_IRQHandler+0x3e2>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a7a      	ldr	r2, [pc, #488]	@ (8008eac <HAL_UART_IRQHandler+0x590>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d01b      	beq.n	8008cfe <HAL_UART_IRQHandler+0x3e2>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a78      	ldr	r2, [pc, #480]	@ (8008eb0 <HAL_UART_IRQHandler+0x594>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d014      	beq.n	8008cfe <HAL_UART_IRQHandler+0x3e2>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a75      	ldr	r2, [pc, #468]	@ (8008eb4 <HAL_UART_IRQHandler+0x598>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d00d      	beq.n	8008cfe <HAL_UART_IRQHandler+0x3e2>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a73      	ldr	r2, [pc, #460]	@ (8008eb8 <HAL_UART_IRQHandler+0x59c>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d006      	beq.n	8008cfe <HAL_UART_IRQHandler+0x3e2>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a70      	ldr	r2, [pc, #448]	@ (8008ebc <HAL_UART_IRQHandler+0x5a0>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d106      	bne.n	8008d0c <HAL_UART_IRQHandler+0x3f0>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	e005      	b.n	8008d18 <HAL_UART_IRQHandler+0x3fc>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008d1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	f000 81ab 	beq.w	800907c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008d2c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008d30:	429a      	cmp	r2, r3
 8008d32:	f080 81a3 	bcs.w	800907c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008d3c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d46:	69db      	ldr	r3, [r3, #28]
 8008d48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d4c:	f000 8087 	beq.w	8008e5e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d58:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008d5c:	e853 3f00 	ldrex	r3, [r3]
 8008d60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008d64:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008d68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	461a      	mov	r2, r3
 8008d76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008d7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008d7e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d82:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008d86:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008d8a:	e841 2300 	strex	r3, r2, [r1]
 8008d8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008d92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d1da      	bne.n	8008d50 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	3308      	adds	r3, #8
 8008da0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008da4:	e853 3f00 	ldrex	r3, [r3]
 8008da8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008daa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008dac:	f023 0301 	bic.w	r3, r3, #1
 8008db0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	3308      	adds	r3, #8
 8008dba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008dbe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008dc2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008dc6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008dca:	e841 2300 	strex	r3, r2, [r1]
 8008dce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008dd0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d1e1      	bne.n	8008d9a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	3308      	adds	r3, #8
 8008ddc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dde:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008de0:	e853 3f00 	ldrex	r3, [r3]
 8008de4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008de6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008de8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008dec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	3308      	adds	r3, #8
 8008df6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008dfa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008dfc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008e00:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008e02:	e841 2300 	strex	r3, r2, [r1]
 8008e06:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008e08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d1e3      	bne.n	8008dd6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2220      	movs	r2, #32
 8008e12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e24:	e853 3f00 	ldrex	r3, [r3]
 8008e28:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008e2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e2c:	f023 0310 	bic.w	r3, r3, #16
 8008e30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	461a      	mov	r2, r3
 8008e3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e3e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008e40:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e42:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008e44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008e46:	e841 2300 	strex	r3, r2, [r1]
 8008e4a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008e4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d1e4      	bne.n	8008e1c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f7f9 fc25 	bl	80026a8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2202      	movs	r2, #2
 8008e62:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	1ad3      	subs	r3, r2, r3
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	4619      	mov	r1, r3
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f7f7 fd67 	bl	800094c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008e7e:	e0fd      	b.n	800907c <HAL_UART_IRQHandler+0x760>
 8008e80:	40020010 	.word	0x40020010
 8008e84:	40020028 	.word	0x40020028
 8008e88:	40020040 	.word	0x40020040
 8008e8c:	40020058 	.word	0x40020058
 8008e90:	40020070 	.word	0x40020070
 8008e94:	40020088 	.word	0x40020088
 8008e98:	400200a0 	.word	0x400200a0
 8008e9c:	400200b8 	.word	0x400200b8
 8008ea0:	40020410 	.word	0x40020410
 8008ea4:	40020428 	.word	0x40020428
 8008ea8:	40020440 	.word	0x40020440
 8008eac:	40020458 	.word	0x40020458
 8008eb0:	40020470 	.word	0x40020470
 8008eb4:	40020488 	.word	0x40020488
 8008eb8:	400204a0 	.word	0x400204a0
 8008ebc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	1ad3      	subs	r3, r2, r3
 8008ed0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	f000 80cf 	beq.w	8009080 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8008ee2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	f000 80ca 	beq.w	8009080 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ef4:	e853 3f00 	ldrex	r3, [r3]
 8008ef8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008efc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f00:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	461a      	mov	r2, r3
 8008f0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008f0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f10:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f12:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008f14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f16:	e841 2300 	strex	r3, r2, [r1]
 8008f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008f1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d1e4      	bne.n	8008eec <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	3308      	adds	r3, #8
 8008f28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f2c:	e853 3f00 	ldrex	r3, [r3]
 8008f30:	623b      	str	r3, [r7, #32]
   return(result);
 8008f32:	6a3a      	ldr	r2, [r7, #32]
 8008f34:	4b55      	ldr	r3, [pc, #340]	@ (800908c <HAL_UART_IRQHandler+0x770>)
 8008f36:	4013      	ands	r3, r2
 8008f38:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	3308      	adds	r3, #8
 8008f42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008f46:	633a      	str	r2, [r7, #48]	@ 0x30
 8008f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f4e:	e841 2300 	strex	r3, r2, [r1]
 8008f52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d1e3      	bne.n	8008f22 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2220      	movs	r2, #32
 8008f5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2200      	movs	r2, #0
 8008f66:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	e853 3f00 	ldrex	r3, [r3]
 8008f7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f023 0310 	bic.w	r3, r3, #16
 8008f82:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008f90:	61fb      	str	r3, [r7, #28]
 8008f92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f94:	69b9      	ldr	r1, [r7, #24]
 8008f96:	69fa      	ldr	r2, [r7, #28]
 8008f98:	e841 2300 	strex	r3, r2, [r1]
 8008f9c:	617b      	str	r3, [r7, #20]
   return(result);
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d1e4      	bne.n	8008f6e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2202      	movs	r2, #2
 8008fa8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008faa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008fae:	4619      	mov	r1, r3
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f7f7 fccb 	bl	800094c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008fb6:	e063      	b.n	8009080 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d00e      	beq.n	8008fe2 <HAL_UART_IRQHandler+0x6c6>
 8008fc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008fc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d008      	beq.n	8008fe2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008fd8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f001 fa1a 	bl	800a414 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008fe0:	e051      	b.n	8009086 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d014      	beq.n	8009018 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d105      	bne.n	8009006 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008ffa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ffe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009002:	2b00      	cmp	r3, #0
 8009004:	d008      	beq.n	8009018 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800900a:	2b00      	cmp	r3, #0
 800900c:	d03a      	beq.n	8009084 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	4798      	blx	r3
    }
    return;
 8009016:	e035      	b.n	8009084 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800901c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009020:	2b00      	cmp	r3, #0
 8009022:	d009      	beq.n	8009038 <HAL_UART_IRQHandler+0x71c>
 8009024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800902c:	2b00      	cmp	r3, #0
 800902e:	d003      	beq.n	8009038 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f001 f9c4 	bl	800a3be <UART_EndTransmit_IT>
    return;
 8009036:	e026      	b.n	8009086 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800903c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009040:	2b00      	cmp	r3, #0
 8009042:	d009      	beq.n	8009058 <HAL_UART_IRQHandler+0x73c>
 8009044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009048:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800904c:	2b00      	cmp	r3, #0
 800904e:	d003      	beq.n	8009058 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f001 f9f3 	bl	800a43c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009056:	e016      	b.n	8009086 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800905c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009060:	2b00      	cmp	r3, #0
 8009062:	d010      	beq.n	8009086 <HAL_UART_IRQHandler+0x76a>
 8009064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009068:	2b00      	cmp	r3, #0
 800906a:	da0c      	bge.n	8009086 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f001 f9db 	bl	800a428 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009072:	e008      	b.n	8009086 <HAL_UART_IRQHandler+0x76a>
      return;
 8009074:	bf00      	nop
 8009076:	e006      	b.n	8009086 <HAL_UART_IRQHandler+0x76a>
    return;
 8009078:	bf00      	nop
 800907a:	e004      	b.n	8009086 <HAL_UART_IRQHandler+0x76a>
      return;
 800907c:	bf00      	nop
 800907e:	e002      	b.n	8009086 <HAL_UART_IRQHandler+0x76a>
      return;
 8009080:	bf00      	nop
 8009082:	e000      	b.n	8009086 <HAL_UART_IRQHandler+0x76a>
    return;
 8009084:	bf00      	nop
  }
}
 8009086:	37e8      	adds	r7, #232	@ 0xe8
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}
 800908c:	effffffe 	.word	0xeffffffe

08009090 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009090:	b480      	push	{r7}
 8009092:	b083      	sub	sp, #12
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009098:	bf00      	nop
 800909a:	370c      	adds	r7, #12
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr

080090a4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b083      	sub	sp, #12
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80090ac:	bf00      	nop
 80090ae:	370c      	adds	r7, #12
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr

080090b8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b083      	sub	sp, #12
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80090c0:	bf00      	nop
 80090c2:	370c      	adds	r7, #12
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr

080090cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80090cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80090d0:	b092      	sub	sp, #72	@ 0x48
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80090d6:	2300      	movs	r3, #0
 80090d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	689a      	ldr	r2, [r3, #8]
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	691b      	ldr	r3, [r3, #16]
 80090e4:	431a      	orrs	r2, r3
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	695b      	ldr	r3, [r3, #20]
 80090ea:	431a      	orrs	r2, r3
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	69db      	ldr	r3, [r3, #28]
 80090f0:	4313      	orrs	r3, r2
 80090f2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	4bbe      	ldr	r3, [pc, #760]	@ (80093f4 <UART_SetConfig+0x328>)
 80090fc:	4013      	ands	r3, r2
 80090fe:	697a      	ldr	r2, [r7, #20]
 8009100:	6812      	ldr	r2, [r2, #0]
 8009102:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009104:	430b      	orrs	r3, r1
 8009106:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	68da      	ldr	r2, [r3, #12]
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	430a      	orrs	r2, r1
 800911c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	699b      	ldr	r3, [r3, #24]
 8009122:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4ab3      	ldr	r2, [pc, #716]	@ (80093f8 <UART_SetConfig+0x32c>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d004      	beq.n	8009138 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	6a1b      	ldr	r3, [r3, #32]
 8009132:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009134:	4313      	orrs	r3, r2
 8009136:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	689a      	ldr	r2, [r3, #8]
 800913e:	4baf      	ldr	r3, [pc, #700]	@ (80093fc <UART_SetConfig+0x330>)
 8009140:	4013      	ands	r3, r2
 8009142:	697a      	ldr	r2, [r7, #20]
 8009144:	6812      	ldr	r2, [r2, #0]
 8009146:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009148:	430b      	orrs	r3, r1
 800914a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009152:	f023 010f 	bic.w	r1, r3, #15
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	430a      	orrs	r2, r1
 8009160:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4aa6      	ldr	r2, [pc, #664]	@ (8009400 <UART_SetConfig+0x334>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d177      	bne.n	800925c <UART_SetConfig+0x190>
 800916c:	4ba5      	ldr	r3, [pc, #660]	@ (8009404 <UART_SetConfig+0x338>)
 800916e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009170:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009174:	2b28      	cmp	r3, #40	@ 0x28
 8009176:	d86d      	bhi.n	8009254 <UART_SetConfig+0x188>
 8009178:	a201      	add	r2, pc, #4	@ (adr r2, 8009180 <UART_SetConfig+0xb4>)
 800917a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800917e:	bf00      	nop
 8009180:	08009225 	.word	0x08009225
 8009184:	08009255 	.word	0x08009255
 8009188:	08009255 	.word	0x08009255
 800918c:	08009255 	.word	0x08009255
 8009190:	08009255 	.word	0x08009255
 8009194:	08009255 	.word	0x08009255
 8009198:	08009255 	.word	0x08009255
 800919c:	08009255 	.word	0x08009255
 80091a0:	0800922d 	.word	0x0800922d
 80091a4:	08009255 	.word	0x08009255
 80091a8:	08009255 	.word	0x08009255
 80091ac:	08009255 	.word	0x08009255
 80091b0:	08009255 	.word	0x08009255
 80091b4:	08009255 	.word	0x08009255
 80091b8:	08009255 	.word	0x08009255
 80091bc:	08009255 	.word	0x08009255
 80091c0:	08009235 	.word	0x08009235
 80091c4:	08009255 	.word	0x08009255
 80091c8:	08009255 	.word	0x08009255
 80091cc:	08009255 	.word	0x08009255
 80091d0:	08009255 	.word	0x08009255
 80091d4:	08009255 	.word	0x08009255
 80091d8:	08009255 	.word	0x08009255
 80091dc:	08009255 	.word	0x08009255
 80091e0:	0800923d 	.word	0x0800923d
 80091e4:	08009255 	.word	0x08009255
 80091e8:	08009255 	.word	0x08009255
 80091ec:	08009255 	.word	0x08009255
 80091f0:	08009255 	.word	0x08009255
 80091f4:	08009255 	.word	0x08009255
 80091f8:	08009255 	.word	0x08009255
 80091fc:	08009255 	.word	0x08009255
 8009200:	08009245 	.word	0x08009245
 8009204:	08009255 	.word	0x08009255
 8009208:	08009255 	.word	0x08009255
 800920c:	08009255 	.word	0x08009255
 8009210:	08009255 	.word	0x08009255
 8009214:	08009255 	.word	0x08009255
 8009218:	08009255 	.word	0x08009255
 800921c:	08009255 	.word	0x08009255
 8009220:	0800924d 	.word	0x0800924d
 8009224:	2301      	movs	r3, #1
 8009226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800922a:	e222      	b.n	8009672 <UART_SetConfig+0x5a6>
 800922c:	2304      	movs	r3, #4
 800922e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009232:	e21e      	b.n	8009672 <UART_SetConfig+0x5a6>
 8009234:	2308      	movs	r3, #8
 8009236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800923a:	e21a      	b.n	8009672 <UART_SetConfig+0x5a6>
 800923c:	2310      	movs	r3, #16
 800923e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009242:	e216      	b.n	8009672 <UART_SetConfig+0x5a6>
 8009244:	2320      	movs	r3, #32
 8009246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800924a:	e212      	b.n	8009672 <UART_SetConfig+0x5a6>
 800924c:	2340      	movs	r3, #64	@ 0x40
 800924e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009252:	e20e      	b.n	8009672 <UART_SetConfig+0x5a6>
 8009254:	2380      	movs	r3, #128	@ 0x80
 8009256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800925a:	e20a      	b.n	8009672 <UART_SetConfig+0x5a6>
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a69      	ldr	r2, [pc, #420]	@ (8009408 <UART_SetConfig+0x33c>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d130      	bne.n	80092c8 <UART_SetConfig+0x1fc>
 8009266:	4b67      	ldr	r3, [pc, #412]	@ (8009404 <UART_SetConfig+0x338>)
 8009268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800926a:	f003 0307 	and.w	r3, r3, #7
 800926e:	2b05      	cmp	r3, #5
 8009270:	d826      	bhi.n	80092c0 <UART_SetConfig+0x1f4>
 8009272:	a201      	add	r2, pc, #4	@ (adr r2, 8009278 <UART_SetConfig+0x1ac>)
 8009274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009278:	08009291 	.word	0x08009291
 800927c:	08009299 	.word	0x08009299
 8009280:	080092a1 	.word	0x080092a1
 8009284:	080092a9 	.word	0x080092a9
 8009288:	080092b1 	.word	0x080092b1
 800928c:	080092b9 	.word	0x080092b9
 8009290:	2300      	movs	r3, #0
 8009292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009296:	e1ec      	b.n	8009672 <UART_SetConfig+0x5a6>
 8009298:	2304      	movs	r3, #4
 800929a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800929e:	e1e8      	b.n	8009672 <UART_SetConfig+0x5a6>
 80092a0:	2308      	movs	r3, #8
 80092a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092a6:	e1e4      	b.n	8009672 <UART_SetConfig+0x5a6>
 80092a8:	2310      	movs	r3, #16
 80092aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092ae:	e1e0      	b.n	8009672 <UART_SetConfig+0x5a6>
 80092b0:	2320      	movs	r3, #32
 80092b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092b6:	e1dc      	b.n	8009672 <UART_SetConfig+0x5a6>
 80092b8:	2340      	movs	r3, #64	@ 0x40
 80092ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092be:	e1d8      	b.n	8009672 <UART_SetConfig+0x5a6>
 80092c0:	2380      	movs	r3, #128	@ 0x80
 80092c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092c6:	e1d4      	b.n	8009672 <UART_SetConfig+0x5a6>
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a4f      	ldr	r2, [pc, #316]	@ (800940c <UART_SetConfig+0x340>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d130      	bne.n	8009334 <UART_SetConfig+0x268>
 80092d2:	4b4c      	ldr	r3, [pc, #304]	@ (8009404 <UART_SetConfig+0x338>)
 80092d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092d6:	f003 0307 	and.w	r3, r3, #7
 80092da:	2b05      	cmp	r3, #5
 80092dc:	d826      	bhi.n	800932c <UART_SetConfig+0x260>
 80092de:	a201      	add	r2, pc, #4	@ (adr r2, 80092e4 <UART_SetConfig+0x218>)
 80092e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e4:	080092fd 	.word	0x080092fd
 80092e8:	08009305 	.word	0x08009305
 80092ec:	0800930d 	.word	0x0800930d
 80092f0:	08009315 	.word	0x08009315
 80092f4:	0800931d 	.word	0x0800931d
 80092f8:	08009325 	.word	0x08009325
 80092fc:	2300      	movs	r3, #0
 80092fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009302:	e1b6      	b.n	8009672 <UART_SetConfig+0x5a6>
 8009304:	2304      	movs	r3, #4
 8009306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800930a:	e1b2      	b.n	8009672 <UART_SetConfig+0x5a6>
 800930c:	2308      	movs	r3, #8
 800930e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009312:	e1ae      	b.n	8009672 <UART_SetConfig+0x5a6>
 8009314:	2310      	movs	r3, #16
 8009316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800931a:	e1aa      	b.n	8009672 <UART_SetConfig+0x5a6>
 800931c:	2320      	movs	r3, #32
 800931e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009322:	e1a6      	b.n	8009672 <UART_SetConfig+0x5a6>
 8009324:	2340      	movs	r3, #64	@ 0x40
 8009326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800932a:	e1a2      	b.n	8009672 <UART_SetConfig+0x5a6>
 800932c:	2380      	movs	r3, #128	@ 0x80
 800932e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009332:	e19e      	b.n	8009672 <UART_SetConfig+0x5a6>
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a35      	ldr	r2, [pc, #212]	@ (8009410 <UART_SetConfig+0x344>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d130      	bne.n	80093a0 <UART_SetConfig+0x2d4>
 800933e:	4b31      	ldr	r3, [pc, #196]	@ (8009404 <UART_SetConfig+0x338>)
 8009340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009342:	f003 0307 	and.w	r3, r3, #7
 8009346:	2b05      	cmp	r3, #5
 8009348:	d826      	bhi.n	8009398 <UART_SetConfig+0x2cc>
 800934a:	a201      	add	r2, pc, #4	@ (adr r2, 8009350 <UART_SetConfig+0x284>)
 800934c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009350:	08009369 	.word	0x08009369
 8009354:	08009371 	.word	0x08009371
 8009358:	08009379 	.word	0x08009379
 800935c:	08009381 	.word	0x08009381
 8009360:	08009389 	.word	0x08009389
 8009364:	08009391 	.word	0x08009391
 8009368:	2300      	movs	r3, #0
 800936a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800936e:	e180      	b.n	8009672 <UART_SetConfig+0x5a6>
 8009370:	2304      	movs	r3, #4
 8009372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009376:	e17c      	b.n	8009672 <UART_SetConfig+0x5a6>
 8009378:	2308      	movs	r3, #8
 800937a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800937e:	e178      	b.n	8009672 <UART_SetConfig+0x5a6>
 8009380:	2310      	movs	r3, #16
 8009382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009386:	e174      	b.n	8009672 <UART_SetConfig+0x5a6>
 8009388:	2320      	movs	r3, #32
 800938a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800938e:	e170      	b.n	8009672 <UART_SetConfig+0x5a6>
 8009390:	2340      	movs	r3, #64	@ 0x40
 8009392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009396:	e16c      	b.n	8009672 <UART_SetConfig+0x5a6>
 8009398:	2380      	movs	r3, #128	@ 0x80
 800939a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800939e:	e168      	b.n	8009672 <UART_SetConfig+0x5a6>
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a1b      	ldr	r2, [pc, #108]	@ (8009414 <UART_SetConfig+0x348>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d142      	bne.n	8009430 <UART_SetConfig+0x364>
 80093aa:	4b16      	ldr	r3, [pc, #88]	@ (8009404 <UART_SetConfig+0x338>)
 80093ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093ae:	f003 0307 	and.w	r3, r3, #7
 80093b2:	2b05      	cmp	r3, #5
 80093b4:	d838      	bhi.n	8009428 <UART_SetConfig+0x35c>
 80093b6:	a201      	add	r2, pc, #4	@ (adr r2, 80093bc <UART_SetConfig+0x2f0>)
 80093b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093bc:	080093d5 	.word	0x080093d5
 80093c0:	080093dd 	.word	0x080093dd
 80093c4:	080093e5 	.word	0x080093e5
 80093c8:	080093ed 	.word	0x080093ed
 80093cc:	08009419 	.word	0x08009419
 80093d0:	08009421 	.word	0x08009421
 80093d4:	2300      	movs	r3, #0
 80093d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093da:	e14a      	b.n	8009672 <UART_SetConfig+0x5a6>
 80093dc:	2304      	movs	r3, #4
 80093de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093e2:	e146      	b.n	8009672 <UART_SetConfig+0x5a6>
 80093e4:	2308      	movs	r3, #8
 80093e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ea:	e142      	b.n	8009672 <UART_SetConfig+0x5a6>
 80093ec:	2310      	movs	r3, #16
 80093ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093f2:	e13e      	b.n	8009672 <UART_SetConfig+0x5a6>
 80093f4:	cfff69f3 	.word	0xcfff69f3
 80093f8:	58000c00 	.word	0x58000c00
 80093fc:	11fff4ff 	.word	0x11fff4ff
 8009400:	40011000 	.word	0x40011000
 8009404:	58024400 	.word	0x58024400
 8009408:	40004400 	.word	0x40004400
 800940c:	40004800 	.word	0x40004800
 8009410:	40004c00 	.word	0x40004c00
 8009414:	40005000 	.word	0x40005000
 8009418:	2320      	movs	r3, #32
 800941a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800941e:	e128      	b.n	8009672 <UART_SetConfig+0x5a6>
 8009420:	2340      	movs	r3, #64	@ 0x40
 8009422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009426:	e124      	b.n	8009672 <UART_SetConfig+0x5a6>
 8009428:	2380      	movs	r3, #128	@ 0x80
 800942a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800942e:	e120      	b.n	8009672 <UART_SetConfig+0x5a6>
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4acb      	ldr	r2, [pc, #812]	@ (8009764 <UART_SetConfig+0x698>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d176      	bne.n	8009528 <UART_SetConfig+0x45c>
 800943a:	4bcb      	ldr	r3, [pc, #812]	@ (8009768 <UART_SetConfig+0x69c>)
 800943c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800943e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009442:	2b28      	cmp	r3, #40	@ 0x28
 8009444:	d86c      	bhi.n	8009520 <UART_SetConfig+0x454>
 8009446:	a201      	add	r2, pc, #4	@ (adr r2, 800944c <UART_SetConfig+0x380>)
 8009448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800944c:	080094f1 	.word	0x080094f1
 8009450:	08009521 	.word	0x08009521
 8009454:	08009521 	.word	0x08009521
 8009458:	08009521 	.word	0x08009521
 800945c:	08009521 	.word	0x08009521
 8009460:	08009521 	.word	0x08009521
 8009464:	08009521 	.word	0x08009521
 8009468:	08009521 	.word	0x08009521
 800946c:	080094f9 	.word	0x080094f9
 8009470:	08009521 	.word	0x08009521
 8009474:	08009521 	.word	0x08009521
 8009478:	08009521 	.word	0x08009521
 800947c:	08009521 	.word	0x08009521
 8009480:	08009521 	.word	0x08009521
 8009484:	08009521 	.word	0x08009521
 8009488:	08009521 	.word	0x08009521
 800948c:	08009501 	.word	0x08009501
 8009490:	08009521 	.word	0x08009521
 8009494:	08009521 	.word	0x08009521
 8009498:	08009521 	.word	0x08009521
 800949c:	08009521 	.word	0x08009521
 80094a0:	08009521 	.word	0x08009521
 80094a4:	08009521 	.word	0x08009521
 80094a8:	08009521 	.word	0x08009521
 80094ac:	08009509 	.word	0x08009509
 80094b0:	08009521 	.word	0x08009521
 80094b4:	08009521 	.word	0x08009521
 80094b8:	08009521 	.word	0x08009521
 80094bc:	08009521 	.word	0x08009521
 80094c0:	08009521 	.word	0x08009521
 80094c4:	08009521 	.word	0x08009521
 80094c8:	08009521 	.word	0x08009521
 80094cc:	08009511 	.word	0x08009511
 80094d0:	08009521 	.word	0x08009521
 80094d4:	08009521 	.word	0x08009521
 80094d8:	08009521 	.word	0x08009521
 80094dc:	08009521 	.word	0x08009521
 80094e0:	08009521 	.word	0x08009521
 80094e4:	08009521 	.word	0x08009521
 80094e8:	08009521 	.word	0x08009521
 80094ec:	08009519 	.word	0x08009519
 80094f0:	2301      	movs	r3, #1
 80094f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094f6:	e0bc      	b.n	8009672 <UART_SetConfig+0x5a6>
 80094f8:	2304      	movs	r3, #4
 80094fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094fe:	e0b8      	b.n	8009672 <UART_SetConfig+0x5a6>
 8009500:	2308      	movs	r3, #8
 8009502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009506:	e0b4      	b.n	8009672 <UART_SetConfig+0x5a6>
 8009508:	2310      	movs	r3, #16
 800950a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800950e:	e0b0      	b.n	8009672 <UART_SetConfig+0x5a6>
 8009510:	2320      	movs	r3, #32
 8009512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009516:	e0ac      	b.n	8009672 <UART_SetConfig+0x5a6>
 8009518:	2340      	movs	r3, #64	@ 0x40
 800951a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800951e:	e0a8      	b.n	8009672 <UART_SetConfig+0x5a6>
 8009520:	2380      	movs	r3, #128	@ 0x80
 8009522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009526:	e0a4      	b.n	8009672 <UART_SetConfig+0x5a6>
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a8f      	ldr	r2, [pc, #572]	@ (800976c <UART_SetConfig+0x6a0>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d130      	bne.n	8009594 <UART_SetConfig+0x4c8>
 8009532:	4b8d      	ldr	r3, [pc, #564]	@ (8009768 <UART_SetConfig+0x69c>)
 8009534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009536:	f003 0307 	and.w	r3, r3, #7
 800953a:	2b05      	cmp	r3, #5
 800953c:	d826      	bhi.n	800958c <UART_SetConfig+0x4c0>
 800953e:	a201      	add	r2, pc, #4	@ (adr r2, 8009544 <UART_SetConfig+0x478>)
 8009540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009544:	0800955d 	.word	0x0800955d
 8009548:	08009565 	.word	0x08009565
 800954c:	0800956d 	.word	0x0800956d
 8009550:	08009575 	.word	0x08009575
 8009554:	0800957d 	.word	0x0800957d
 8009558:	08009585 	.word	0x08009585
 800955c:	2300      	movs	r3, #0
 800955e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009562:	e086      	b.n	8009672 <UART_SetConfig+0x5a6>
 8009564:	2304      	movs	r3, #4
 8009566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800956a:	e082      	b.n	8009672 <UART_SetConfig+0x5a6>
 800956c:	2308      	movs	r3, #8
 800956e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009572:	e07e      	b.n	8009672 <UART_SetConfig+0x5a6>
 8009574:	2310      	movs	r3, #16
 8009576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800957a:	e07a      	b.n	8009672 <UART_SetConfig+0x5a6>
 800957c:	2320      	movs	r3, #32
 800957e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009582:	e076      	b.n	8009672 <UART_SetConfig+0x5a6>
 8009584:	2340      	movs	r3, #64	@ 0x40
 8009586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800958a:	e072      	b.n	8009672 <UART_SetConfig+0x5a6>
 800958c:	2380      	movs	r3, #128	@ 0x80
 800958e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009592:	e06e      	b.n	8009672 <UART_SetConfig+0x5a6>
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a75      	ldr	r2, [pc, #468]	@ (8009770 <UART_SetConfig+0x6a4>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d130      	bne.n	8009600 <UART_SetConfig+0x534>
 800959e:	4b72      	ldr	r3, [pc, #456]	@ (8009768 <UART_SetConfig+0x69c>)
 80095a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095a2:	f003 0307 	and.w	r3, r3, #7
 80095a6:	2b05      	cmp	r3, #5
 80095a8:	d826      	bhi.n	80095f8 <UART_SetConfig+0x52c>
 80095aa:	a201      	add	r2, pc, #4	@ (adr r2, 80095b0 <UART_SetConfig+0x4e4>)
 80095ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095b0:	080095c9 	.word	0x080095c9
 80095b4:	080095d1 	.word	0x080095d1
 80095b8:	080095d9 	.word	0x080095d9
 80095bc:	080095e1 	.word	0x080095e1
 80095c0:	080095e9 	.word	0x080095e9
 80095c4:	080095f1 	.word	0x080095f1
 80095c8:	2300      	movs	r3, #0
 80095ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ce:	e050      	b.n	8009672 <UART_SetConfig+0x5a6>
 80095d0:	2304      	movs	r3, #4
 80095d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095d6:	e04c      	b.n	8009672 <UART_SetConfig+0x5a6>
 80095d8:	2308      	movs	r3, #8
 80095da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095de:	e048      	b.n	8009672 <UART_SetConfig+0x5a6>
 80095e0:	2310      	movs	r3, #16
 80095e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095e6:	e044      	b.n	8009672 <UART_SetConfig+0x5a6>
 80095e8:	2320      	movs	r3, #32
 80095ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ee:	e040      	b.n	8009672 <UART_SetConfig+0x5a6>
 80095f0:	2340      	movs	r3, #64	@ 0x40
 80095f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095f6:	e03c      	b.n	8009672 <UART_SetConfig+0x5a6>
 80095f8:	2380      	movs	r3, #128	@ 0x80
 80095fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095fe:	e038      	b.n	8009672 <UART_SetConfig+0x5a6>
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a5b      	ldr	r2, [pc, #364]	@ (8009774 <UART_SetConfig+0x6a8>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d130      	bne.n	800966c <UART_SetConfig+0x5a0>
 800960a:	4b57      	ldr	r3, [pc, #348]	@ (8009768 <UART_SetConfig+0x69c>)
 800960c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800960e:	f003 0307 	and.w	r3, r3, #7
 8009612:	2b05      	cmp	r3, #5
 8009614:	d826      	bhi.n	8009664 <UART_SetConfig+0x598>
 8009616:	a201      	add	r2, pc, #4	@ (adr r2, 800961c <UART_SetConfig+0x550>)
 8009618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800961c:	08009635 	.word	0x08009635
 8009620:	0800963d 	.word	0x0800963d
 8009624:	08009645 	.word	0x08009645
 8009628:	0800964d 	.word	0x0800964d
 800962c:	08009655 	.word	0x08009655
 8009630:	0800965d 	.word	0x0800965d
 8009634:	2302      	movs	r3, #2
 8009636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800963a:	e01a      	b.n	8009672 <UART_SetConfig+0x5a6>
 800963c:	2304      	movs	r3, #4
 800963e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009642:	e016      	b.n	8009672 <UART_SetConfig+0x5a6>
 8009644:	2308      	movs	r3, #8
 8009646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800964a:	e012      	b.n	8009672 <UART_SetConfig+0x5a6>
 800964c:	2310      	movs	r3, #16
 800964e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009652:	e00e      	b.n	8009672 <UART_SetConfig+0x5a6>
 8009654:	2320      	movs	r3, #32
 8009656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800965a:	e00a      	b.n	8009672 <UART_SetConfig+0x5a6>
 800965c:	2340      	movs	r3, #64	@ 0x40
 800965e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009662:	e006      	b.n	8009672 <UART_SetConfig+0x5a6>
 8009664:	2380      	movs	r3, #128	@ 0x80
 8009666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800966a:	e002      	b.n	8009672 <UART_SetConfig+0x5a6>
 800966c:	2380      	movs	r3, #128	@ 0x80
 800966e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a3f      	ldr	r2, [pc, #252]	@ (8009774 <UART_SetConfig+0x6a8>)
 8009678:	4293      	cmp	r3, r2
 800967a:	f040 80f8 	bne.w	800986e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800967e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009682:	2b20      	cmp	r3, #32
 8009684:	dc46      	bgt.n	8009714 <UART_SetConfig+0x648>
 8009686:	2b02      	cmp	r3, #2
 8009688:	f2c0 8082 	blt.w	8009790 <UART_SetConfig+0x6c4>
 800968c:	3b02      	subs	r3, #2
 800968e:	2b1e      	cmp	r3, #30
 8009690:	d87e      	bhi.n	8009790 <UART_SetConfig+0x6c4>
 8009692:	a201      	add	r2, pc, #4	@ (adr r2, 8009698 <UART_SetConfig+0x5cc>)
 8009694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009698:	0800971b 	.word	0x0800971b
 800969c:	08009791 	.word	0x08009791
 80096a0:	08009723 	.word	0x08009723
 80096a4:	08009791 	.word	0x08009791
 80096a8:	08009791 	.word	0x08009791
 80096ac:	08009791 	.word	0x08009791
 80096b0:	08009733 	.word	0x08009733
 80096b4:	08009791 	.word	0x08009791
 80096b8:	08009791 	.word	0x08009791
 80096bc:	08009791 	.word	0x08009791
 80096c0:	08009791 	.word	0x08009791
 80096c4:	08009791 	.word	0x08009791
 80096c8:	08009791 	.word	0x08009791
 80096cc:	08009791 	.word	0x08009791
 80096d0:	08009743 	.word	0x08009743
 80096d4:	08009791 	.word	0x08009791
 80096d8:	08009791 	.word	0x08009791
 80096dc:	08009791 	.word	0x08009791
 80096e0:	08009791 	.word	0x08009791
 80096e4:	08009791 	.word	0x08009791
 80096e8:	08009791 	.word	0x08009791
 80096ec:	08009791 	.word	0x08009791
 80096f0:	08009791 	.word	0x08009791
 80096f4:	08009791 	.word	0x08009791
 80096f8:	08009791 	.word	0x08009791
 80096fc:	08009791 	.word	0x08009791
 8009700:	08009791 	.word	0x08009791
 8009704:	08009791 	.word	0x08009791
 8009708:	08009791 	.word	0x08009791
 800970c:	08009791 	.word	0x08009791
 8009710:	08009783 	.word	0x08009783
 8009714:	2b40      	cmp	r3, #64	@ 0x40
 8009716:	d037      	beq.n	8009788 <UART_SetConfig+0x6bc>
 8009718:	e03a      	b.n	8009790 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800971a:	f7fd fc15 	bl	8006f48 <HAL_RCCEx_GetD3PCLK1Freq>
 800971e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009720:	e03c      	b.n	800979c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009722:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009726:	4618      	mov	r0, r3
 8009728:	f7fd fc24 	bl	8006f74 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800972c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800972e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009730:	e034      	b.n	800979c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009732:	f107 0318 	add.w	r3, r7, #24
 8009736:	4618      	mov	r0, r3
 8009738:	f7fd fd70 	bl	800721c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800973c:	69fb      	ldr	r3, [r7, #28]
 800973e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009740:	e02c      	b.n	800979c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009742:	4b09      	ldr	r3, [pc, #36]	@ (8009768 <UART_SetConfig+0x69c>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f003 0320 	and.w	r3, r3, #32
 800974a:	2b00      	cmp	r3, #0
 800974c:	d016      	beq.n	800977c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800974e:	4b06      	ldr	r3, [pc, #24]	@ (8009768 <UART_SetConfig+0x69c>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	08db      	lsrs	r3, r3, #3
 8009754:	f003 0303 	and.w	r3, r3, #3
 8009758:	4a07      	ldr	r2, [pc, #28]	@ (8009778 <UART_SetConfig+0x6ac>)
 800975a:	fa22 f303 	lsr.w	r3, r2, r3
 800975e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009760:	e01c      	b.n	800979c <UART_SetConfig+0x6d0>
 8009762:	bf00      	nop
 8009764:	40011400 	.word	0x40011400
 8009768:	58024400 	.word	0x58024400
 800976c:	40007800 	.word	0x40007800
 8009770:	40007c00 	.word	0x40007c00
 8009774:	58000c00 	.word	0x58000c00
 8009778:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800977c:	4b9d      	ldr	r3, [pc, #628]	@ (80099f4 <UART_SetConfig+0x928>)
 800977e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009780:	e00c      	b.n	800979c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009782:	4b9d      	ldr	r3, [pc, #628]	@ (80099f8 <UART_SetConfig+0x92c>)
 8009784:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009786:	e009      	b.n	800979c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009788:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800978c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800978e:	e005      	b.n	800979c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009790:	2300      	movs	r3, #0
 8009792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009794:	2301      	movs	r3, #1
 8009796:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800979a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800979c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800979e:	2b00      	cmp	r3, #0
 80097a0:	f000 81de 	beq.w	8009b60 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097a8:	4a94      	ldr	r2, [pc, #592]	@ (80099fc <UART_SetConfig+0x930>)
 80097aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097ae:	461a      	mov	r2, r3
 80097b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80097b6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	685a      	ldr	r2, [r3, #4]
 80097bc:	4613      	mov	r3, r2
 80097be:	005b      	lsls	r3, r3, #1
 80097c0:	4413      	add	r3, r2
 80097c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d305      	bcc.n	80097d4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80097ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d903      	bls.n	80097dc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80097d4:	2301      	movs	r3, #1
 80097d6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80097da:	e1c1      	b.n	8009b60 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097de:	2200      	movs	r2, #0
 80097e0:	60bb      	str	r3, [r7, #8]
 80097e2:	60fa      	str	r2, [r7, #12]
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097e8:	4a84      	ldr	r2, [pc, #528]	@ (80099fc <UART_SetConfig+0x930>)
 80097ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	2200      	movs	r2, #0
 80097f2:	603b      	str	r3, [r7, #0]
 80097f4:	607a      	str	r2, [r7, #4]
 80097f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80097fe:	f7f6 fd6b 	bl	80002d8 <__aeabi_uldivmod>
 8009802:	4602      	mov	r2, r0
 8009804:	460b      	mov	r3, r1
 8009806:	4610      	mov	r0, r2
 8009808:	4619      	mov	r1, r3
 800980a:	f04f 0200 	mov.w	r2, #0
 800980e:	f04f 0300 	mov.w	r3, #0
 8009812:	020b      	lsls	r3, r1, #8
 8009814:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009818:	0202      	lsls	r2, r0, #8
 800981a:	6979      	ldr	r1, [r7, #20]
 800981c:	6849      	ldr	r1, [r1, #4]
 800981e:	0849      	lsrs	r1, r1, #1
 8009820:	2000      	movs	r0, #0
 8009822:	460c      	mov	r4, r1
 8009824:	4605      	mov	r5, r0
 8009826:	eb12 0804 	adds.w	r8, r2, r4
 800982a:	eb43 0905 	adc.w	r9, r3, r5
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	469a      	mov	sl, r3
 8009836:	4693      	mov	fp, r2
 8009838:	4652      	mov	r2, sl
 800983a:	465b      	mov	r3, fp
 800983c:	4640      	mov	r0, r8
 800983e:	4649      	mov	r1, r9
 8009840:	f7f6 fd4a 	bl	80002d8 <__aeabi_uldivmod>
 8009844:	4602      	mov	r2, r0
 8009846:	460b      	mov	r3, r1
 8009848:	4613      	mov	r3, r2
 800984a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800984c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800984e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009852:	d308      	bcc.n	8009866 <UART_SetConfig+0x79a>
 8009854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009856:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800985a:	d204      	bcs.n	8009866 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009862:	60da      	str	r2, [r3, #12]
 8009864:	e17c      	b.n	8009b60 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009866:	2301      	movs	r3, #1
 8009868:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800986c:	e178      	b.n	8009b60 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	69db      	ldr	r3, [r3, #28]
 8009872:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009876:	f040 80c5 	bne.w	8009a04 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800987a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800987e:	2b20      	cmp	r3, #32
 8009880:	dc48      	bgt.n	8009914 <UART_SetConfig+0x848>
 8009882:	2b00      	cmp	r3, #0
 8009884:	db7b      	blt.n	800997e <UART_SetConfig+0x8b2>
 8009886:	2b20      	cmp	r3, #32
 8009888:	d879      	bhi.n	800997e <UART_SetConfig+0x8b2>
 800988a:	a201      	add	r2, pc, #4	@ (adr r2, 8009890 <UART_SetConfig+0x7c4>)
 800988c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009890:	0800991b 	.word	0x0800991b
 8009894:	08009923 	.word	0x08009923
 8009898:	0800997f 	.word	0x0800997f
 800989c:	0800997f 	.word	0x0800997f
 80098a0:	0800992b 	.word	0x0800992b
 80098a4:	0800997f 	.word	0x0800997f
 80098a8:	0800997f 	.word	0x0800997f
 80098ac:	0800997f 	.word	0x0800997f
 80098b0:	0800993b 	.word	0x0800993b
 80098b4:	0800997f 	.word	0x0800997f
 80098b8:	0800997f 	.word	0x0800997f
 80098bc:	0800997f 	.word	0x0800997f
 80098c0:	0800997f 	.word	0x0800997f
 80098c4:	0800997f 	.word	0x0800997f
 80098c8:	0800997f 	.word	0x0800997f
 80098cc:	0800997f 	.word	0x0800997f
 80098d0:	0800994b 	.word	0x0800994b
 80098d4:	0800997f 	.word	0x0800997f
 80098d8:	0800997f 	.word	0x0800997f
 80098dc:	0800997f 	.word	0x0800997f
 80098e0:	0800997f 	.word	0x0800997f
 80098e4:	0800997f 	.word	0x0800997f
 80098e8:	0800997f 	.word	0x0800997f
 80098ec:	0800997f 	.word	0x0800997f
 80098f0:	0800997f 	.word	0x0800997f
 80098f4:	0800997f 	.word	0x0800997f
 80098f8:	0800997f 	.word	0x0800997f
 80098fc:	0800997f 	.word	0x0800997f
 8009900:	0800997f 	.word	0x0800997f
 8009904:	0800997f 	.word	0x0800997f
 8009908:	0800997f 	.word	0x0800997f
 800990c:	0800997f 	.word	0x0800997f
 8009910:	08009971 	.word	0x08009971
 8009914:	2b40      	cmp	r3, #64	@ 0x40
 8009916:	d02e      	beq.n	8009976 <UART_SetConfig+0x8aa>
 8009918:	e031      	b.n	800997e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800991a:	f7fc f8df 	bl	8005adc <HAL_RCC_GetPCLK1Freq>
 800991e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009920:	e033      	b.n	800998a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009922:	f7fc f8f1 	bl	8005b08 <HAL_RCC_GetPCLK2Freq>
 8009926:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009928:	e02f      	b.n	800998a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800992a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800992e:	4618      	mov	r0, r3
 8009930:	f7fd fb20 	bl	8006f74 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009938:	e027      	b.n	800998a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800993a:	f107 0318 	add.w	r3, r7, #24
 800993e:	4618      	mov	r0, r3
 8009940:	f7fd fc6c 	bl	800721c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009944:	69fb      	ldr	r3, [r7, #28]
 8009946:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009948:	e01f      	b.n	800998a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800994a:	4b2d      	ldr	r3, [pc, #180]	@ (8009a00 <UART_SetConfig+0x934>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f003 0320 	and.w	r3, r3, #32
 8009952:	2b00      	cmp	r3, #0
 8009954:	d009      	beq.n	800996a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009956:	4b2a      	ldr	r3, [pc, #168]	@ (8009a00 <UART_SetConfig+0x934>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	08db      	lsrs	r3, r3, #3
 800995c:	f003 0303 	and.w	r3, r3, #3
 8009960:	4a24      	ldr	r2, [pc, #144]	@ (80099f4 <UART_SetConfig+0x928>)
 8009962:	fa22 f303 	lsr.w	r3, r2, r3
 8009966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009968:	e00f      	b.n	800998a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800996a:	4b22      	ldr	r3, [pc, #136]	@ (80099f4 <UART_SetConfig+0x928>)
 800996c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800996e:	e00c      	b.n	800998a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009970:	4b21      	ldr	r3, [pc, #132]	@ (80099f8 <UART_SetConfig+0x92c>)
 8009972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009974:	e009      	b.n	800998a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009976:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800997a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800997c:	e005      	b.n	800998a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800997e:	2300      	movs	r3, #0
 8009980:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009982:	2301      	movs	r3, #1
 8009984:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009988:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800998a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800998c:	2b00      	cmp	r3, #0
 800998e:	f000 80e7 	beq.w	8009b60 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009996:	4a19      	ldr	r2, [pc, #100]	@ (80099fc <UART_SetConfig+0x930>)
 8009998:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800999c:	461a      	mov	r2, r3
 800999e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80099a4:	005a      	lsls	r2, r3, #1
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	085b      	lsrs	r3, r3, #1
 80099ac:	441a      	add	r2, r3
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80099b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ba:	2b0f      	cmp	r3, #15
 80099bc:	d916      	bls.n	80099ec <UART_SetConfig+0x920>
 80099be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099c4:	d212      	bcs.n	80099ec <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80099c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099c8:	b29b      	uxth	r3, r3
 80099ca:	f023 030f 	bic.w	r3, r3, #15
 80099ce:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80099d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099d2:	085b      	lsrs	r3, r3, #1
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	f003 0307 	and.w	r3, r3, #7
 80099da:	b29a      	uxth	r2, r3
 80099dc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80099de:	4313      	orrs	r3, r2
 80099e0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80099e8:	60da      	str	r2, [r3, #12]
 80099ea:	e0b9      	b.n	8009b60 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80099ec:	2301      	movs	r3, #1
 80099ee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80099f2:	e0b5      	b.n	8009b60 <UART_SetConfig+0xa94>
 80099f4:	03d09000 	.word	0x03d09000
 80099f8:	003d0900 	.word	0x003d0900
 80099fc:	0800a8cc 	.word	0x0800a8cc
 8009a00:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009a04:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009a08:	2b20      	cmp	r3, #32
 8009a0a:	dc49      	bgt.n	8009aa0 <UART_SetConfig+0x9d4>
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	db7c      	blt.n	8009b0a <UART_SetConfig+0xa3e>
 8009a10:	2b20      	cmp	r3, #32
 8009a12:	d87a      	bhi.n	8009b0a <UART_SetConfig+0xa3e>
 8009a14:	a201      	add	r2, pc, #4	@ (adr r2, 8009a1c <UART_SetConfig+0x950>)
 8009a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a1a:	bf00      	nop
 8009a1c:	08009aa7 	.word	0x08009aa7
 8009a20:	08009aaf 	.word	0x08009aaf
 8009a24:	08009b0b 	.word	0x08009b0b
 8009a28:	08009b0b 	.word	0x08009b0b
 8009a2c:	08009ab7 	.word	0x08009ab7
 8009a30:	08009b0b 	.word	0x08009b0b
 8009a34:	08009b0b 	.word	0x08009b0b
 8009a38:	08009b0b 	.word	0x08009b0b
 8009a3c:	08009ac7 	.word	0x08009ac7
 8009a40:	08009b0b 	.word	0x08009b0b
 8009a44:	08009b0b 	.word	0x08009b0b
 8009a48:	08009b0b 	.word	0x08009b0b
 8009a4c:	08009b0b 	.word	0x08009b0b
 8009a50:	08009b0b 	.word	0x08009b0b
 8009a54:	08009b0b 	.word	0x08009b0b
 8009a58:	08009b0b 	.word	0x08009b0b
 8009a5c:	08009ad7 	.word	0x08009ad7
 8009a60:	08009b0b 	.word	0x08009b0b
 8009a64:	08009b0b 	.word	0x08009b0b
 8009a68:	08009b0b 	.word	0x08009b0b
 8009a6c:	08009b0b 	.word	0x08009b0b
 8009a70:	08009b0b 	.word	0x08009b0b
 8009a74:	08009b0b 	.word	0x08009b0b
 8009a78:	08009b0b 	.word	0x08009b0b
 8009a7c:	08009b0b 	.word	0x08009b0b
 8009a80:	08009b0b 	.word	0x08009b0b
 8009a84:	08009b0b 	.word	0x08009b0b
 8009a88:	08009b0b 	.word	0x08009b0b
 8009a8c:	08009b0b 	.word	0x08009b0b
 8009a90:	08009b0b 	.word	0x08009b0b
 8009a94:	08009b0b 	.word	0x08009b0b
 8009a98:	08009b0b 	.word	0x08009b0b
 8009a9c:	08009afd 	.word	0x08009afd
 8009aa0:	2b40      	cmp	r3, #64	@ 0x40
 8009aa2:	d02e      	beq.n	8009b02 <UART_SetConfig+0xa36>
 8009aa4:	e031      	b.n	8009b0a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009aa6:	f7fc f819 	bl	8005adc <HAL_RCC_GetPCLK1Freq>
 8009aaa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009aac:	e033      	b.n	8009b16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009aae:	f7fc f82b 	bl	8005b08 <HAL_RCC_GetPCLK2Freq>
 8009ab2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009ab4:	e02f      	b.n	8009b16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ab6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7fd fa5a 	bl	8006f74 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ac4:	e027      	b.n	8009b16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ac6:	f107 0318 	add.w	r3, r7, #24
 8009aca:	4618      	mov	r0, r3
 8009acc:	f7fd fba6 	bl	800721c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009ad0:	69fb      	ldr	r3, [r7, #28]
 8009ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ad4:	e01f      	b.n	8009b16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ad6:	4b2d      	ldr	r3, [pc, #180]	@ (8009b8c <UART_SetConfig+0xac0>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f003 0320 	and.w	r3, r3, #32
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d009      	beq.n	8009af6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009ae2:	4b2a      	ldr	r3, [pc, #168]	@ (8009b8c <UART_SetConfig+0xac0>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	08db      	lsrs	r3, r3, #3
 8009ae8:	f003 0303 	and.w	r3, r3, #3
 8009aec:	4a28      	ldr	r2, [pc, #160]	@ (8009b90 <UART_SetConfig+0xac4>)
 8009aee:	fa22 f303 	lsr.w	r3, r2, r3
 8009af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009af4:	e00f      	b.n	8009b16 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009af6:	4b26      	ldr	r3, [pc, #152]	@ (8009b90 <UART_SetConfig+0xac4>)
 8009af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009afa:	e00c      	b.n	8009b16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009afc:	4b25      	ldr	r3, [pc, #148]	@ (8009b94 <UART_SetConfig+0xac8>)
 8009afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b00:	e009      	b.n	8009b16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b08:	e005      	b.n	8009b16 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009b0e:	2301      	movs	r3, #1
 8009b10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009b14:	bf00      	nop
    }

    if (pclk != 0U)
 8009b16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d021      	beq.n	8009b60 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b20:	4a1d      	ldr	r2, [pc, #116]	@ (8009b98 <UART_SetConfig+0xacc>)
 8009b22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b26:	461a      	mov	r2, r3
 8009b28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b2a:	fbb3 f2f2 	udiv	r2, r3, r2
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	085b      	lsrs	r3, r3, #1
 8009b34:	441a      	add	r2, r3
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b3e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b42:	2b0f      	cmp	r3, #15
 8009b44:	d909      	bls.n	8009b5a <UART_SetConfig+0xa8e>
 8009b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b4c:	d205      	bcs.n	8009b5a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b50:	b29a      	uxth	r2, r3
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	60da      	str	r2, [r3, #12]
 8009b58:	e002      	b.n	8009b60 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	2201      	movs	r2, #1
 8009b64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	2200      	movs	r2, #0
 8009b74:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009b7c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3748      	adds	r7, #72	@ 0x48
 8009b84:	46bd      	mov	sp, r7
 8009b86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b8a:	bf00      	nop
 8009b8c:	58024400 	.word	0x58024400
 8009b90:	03d09000 	.word	0x03d09000
 8009b94:	003d0900 	.word	0x003d0900
 8009b98:	0800a8cc 	.word	0x0800a8cc

08009b9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b083      	sub	sp, #12
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ba8:	f003 0308 	and.w	r3, r3, #8
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d00a      	beq.n	8009bc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	430a      	orrs	r2, r1
 8009bc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bca:	f003 0301 	and.w	r3, r3, #1
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d00a      	beq.n	8009be8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	430a      	orrs	r2, r1
 8009be6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bec:	f003 0302 	and.w	r3, r3, #2
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d00a      	beq.n	8009c0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	430a      	orrs	r2, r1
 8009c08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c0e:	f003 0304 	and.w	r3, r3, #4
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d00a      	beq.n	8009c2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	685b      	ldr	r3, [r3, #4]
 8009c1c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	430a      	orrs	r2, r1
 8009c2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c30:	f003 0310 	and.w	r3, r3, #16
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d00a      	beq.n	8009c4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	689b      	ldr	r3, [r3, #8]
 8009c3e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	430a      	orrs	r2, r1
 8009c4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c52:	f003 0320 	and.w	r3, r3, #32
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d00a      	beq.n	8009c70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	689b      	ldr	r3, [r3, #8]
 8009c60:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	430a      	orrs	r2, r1
 8009c6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d01a      	beq.n	8009cb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	430a      	orrs	r2, r1
 8009c90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c9a:	d10a      	bne.n	8009cb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	430a      	orrs	r2, r1
 8009cb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d00a      	beq.n	8009cd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	430a      	orrs	r2, r1
 8009cd2:	605a      	str	r2, [r3, #4]
  }
}
 8009cd4:	bf00      	nop
 8009cd6:	370c      	adds	r7, #12
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr

08009ce0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b098      	sub	sp, #96	@ 0x60
 8009ce4:	af02      	add	r7, sp, #8
 8009ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2200      	movs	r2, #0
 8009cec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009cf0:	f7f7 fd74 	bl	80017dc <HAL_GetTick>
 8009cf4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f003 0308 	and.w	r3, r3, #8
 8009d00:	2b08      	cmp	r3, #8
 8009d02:	d12f      	bne.n	8009d64 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d04:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009d08:	9300      	str	r3, [sp, #0]
 8009d0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 f88e 	bl	8009e34 <UART_WaitOnFlagUntilTimeout>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d022      	beq.n	8009d64 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d26:	e853 3f00 	ldrex	r3, [r3]
 8009d2a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d32:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	461a      	mov	r2, r3
 8009d3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d3e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009d42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d44:	e841 2300 	strex	r3, r2, [r1]
 8009d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d1e6      	bne.n	8009d1e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2220      	movs	r2, #32
 8009d54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d60:	2303      	movs	r3, #3
 8009d62:	e063      	b.n	8009e2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f003 0304 	and.w	r3, r3, #4
 8009d6e:	2b04      	cmp	r3, #4
 8009d70:	d149      	bne.n	8009e06 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d72:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009d76:	9300      	str	r3, [sp, #0]
 8009d78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f000 f857 	bl	8009e34 <UART_WaitOnFlagUntilTimeout>
 8009d86:	4603      	mov	r3, r0
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d03c      	beq.n	8009e06 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d94:	e853 3f00 	ldrex	r3, [r3]
 8009d98:	623b      	str	r3, [r7, #32]
   return(result);
 8009d9a:	6a3b      	ldr	r3, [r7, #32]
 8009d9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009da0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	461a      	mov	r2, r3
 8009da8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009daa:	633b      	str	r3, [r7, #48]	@ 0x30
 8009dac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009db0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009db2:	e841 2300 	strex	r3, r2, [r1]
 8009db6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d1e6      	bne.n	8009d8c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	3308      	adds	r3, #8
 8009dc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	e853 3f00 	ldrex	r3, [r3]
 8009dcc:	60fb      	str	r3, [r7, #12]
   return(result);
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f023 0301 	bic.w	r3, r3, #1
 8009dd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	3308      	adds	r3, #8
 8009ddc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009dde:	61fa      	str	r2, [r7, #28]
 8009de0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009de2:	69b9      	ldr	r1, [r7, #24]
 8009de4:	69fa      	ldr	r2, [r7, #28]
 8009de6:	e841 2300 	strex	r3, r2, [r1]
 8009dea:	617b      	str	r3, [r7, #20]
   return(result);
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d1e5      	bne.n	8009dbe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2220      	movs	r2, #32
 8009df6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e02:	2303      	movs	r3, #3
 8009e04:	e012      	b.n	8009e2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2220      	movs	r2, #32
 8009e0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2220      	movs	r2, #32
 8009e12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2200      	movs	r2, #0
 8009e26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009e2a:	2300      	movs	r3, #0
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3758      	adds	r7, #88	@ 0x58
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b084      	sub	sp, #16
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	60b9      	str	r1, [r7, #8]
 8009e3e:	603b      	str	r3, [r7, #0]
 8009e40:	4613      	mov	r3, r2
 8009e42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e44:	e04f      	b.n	8009ee6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e46:	69bb      	ldr	r3, [r7, #24]
 8009e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e4c:	d04b      	beq.n	8009ee6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e4e:	f7f7 fcc5 	bl	80017dc <HAL_GetTick>
 8009e52:	4602      	mov	r2, r0
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	1ad3      	subs	r3, r2, r3
 8009e58:	69ba      	ldr	r2, [r7, #24]
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	d302      	bcc.n	8009e64 <UART_WaitOnFlagUntilTimeout+0x30>
 8009e5e:	69bb      	ldr	r3, [r7, #24]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d101      	bne.n	8009e68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009e64:	2303      	movs	r3, #3
 8009e66:	e04e      	b.n	8009f06 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f003 0304 	and.w	r3, r3, #4
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d037      	beq.n	8009ee6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	2b80      	cmp	r3, #128	@ 0x80
 8009e7a:	d034      	beq.n	8009ee6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	2b40      	cmp	r3, #64	@ 0x40
 8009e80:	d031      	beq.n	8009ee6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	69db      	ldr	r3, [r3, #28]
 8009e88:	f003 0308 	and.w	r3, r3, #8
 8009e8c:	2b08      	cmp	r3, #8
 8009e8e:	d110      	bne.n	8009eb2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	2208      	movs	r2, #8
 8009e96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e98:	68f8      	ldr	r0, [r7, #12]
 8009e9a:	f000 f921 	bl	800a0e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2208      	movs	r2, #8
 8009ea2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	e029      	b.n	8009f06 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	69db      	ldr	r3, [r3, #28]
 8009eb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009ebc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ec0:	d111      	bne.n	8009ee6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009eca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009ecc:	68f8      	ldr	r0, [r7, #12]
 8009ece:	f000 f907 	bl	800a0e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2220      	movs	r2, #32
 8009ed6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2200      	movs	r2, #0
 8009ede:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009ee2:	2303      	movs	r3, #3
 8009ee4:	e00f      	b.n	8009f06 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	69da      	ldr	r2, [r3, #28]
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	4013      	ands	r3, r2
 8009ef0:	68ba      	ldr	r2, [r7, #8]
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	bf0c      	ite	eq
 8009ef6:	2301      	moveq	r3, #1
 8009ef8:	2300      	movne	r3, #0
 8009efa:	b2db      	uxtb	r3, r3
 8009efc:	461a      	mov	r2, r3
 8009efe:	79fb      	ldrb	r3, [r7, #7]
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d0a0      	beq.n	8009e46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009f04:	2300      	movs	r3, #0
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3710      	adds	r7, #16
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
	...

08009f10 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b096      	sub	sp, #88	@ 0x58
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	60f8      	str	r0, [r7, #12]
 8009f18:	60b9      	str	r1, [r7, #8]
 8009f1a:	4613      	mov	r3, r2
 8009f1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	68ba      	ldr	r2, [r7, #8]
 8009f22:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	88fa      	ldrh	r2, [r7, #6]
 8009f28:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2222      	movs	r2, #34	@ 0x22
 8009f38:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d02d      	beq.n	8009fa2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f4c:	4a40      	ldr	r2, [pc, #256]	@ (800a050 <UART_Start_Receive_DMA+0x140>)
 8009f4e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f56:	4a3f      	ldr	r2, [pc, #252]	@ (800a054 <UART_Start_Receive_DMA+0x144>)
 8009f58:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f60:	4a3d      	ldr	r2, [pc, #244]	@ (800a058 <UART_Start_Receive_DMA+0x148>)
 8009f62:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	3324      	adds	r3, #36	@ 0x24
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f80:	461a      	mov	r2, r3
 8009f82:	88fb      	ldrh	r3, [r7, #6]
 8009f84:	f7f8 f926 	bl	80021d4 <HAL_DMA_Start_IT>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d009      	beq.n	8009fa2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2210      	movs	r2, #16
 8009f92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2220      	movs	r2, #32
 8009f9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	e051      	b.n	800a046 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	691b      	ldr	r3, [r3, #16]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d018      	beq.n	8009fdc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fb2:	e853 3f00 	ldrex	r3, [r3]
 8009fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009fbe:	657b      	str	r3, [r7, #84]	@ 0x54
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	461a      	mov	r2, r3
 8009fc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009fca:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fcc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009fce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009fd0:	e841 2300 	strex	r3, r2, [r1]
 8009fd4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009fd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d1e6      	bne.n	8009faa <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	3308      	adds	r3, #8
 8009fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fe6:	e853 3f00 	ldrex	r3, [r3]
 8009fea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fee:	f043 0301 	orr.w	r3, r3, #1
 8009ff2:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	3308      	adds	r3, #8
 8009ffa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009ffc:	637a      	str	r2, [r7, #52]	@ 0x34
 8009ffe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a000:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a002:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a004:	e841 2300 	strex	r3, r2, [r1]
 800a008:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a00a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d1e5      	bne.n	8009fdc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	3308      	adds	r3, #8
 800a016:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	e853 3f00 	ldrex	r3, [r3]
 800a01e:	613b      	str	r3, [r7, #16]
   return(result);
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a026:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	3308      	adds	r3, #8
 800a02e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a030:	623a      	str	r2, [r7, #32]
 800a032:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a034:	69f9      	ldr	r1, [r7, #28]
 800a036:	6a3a      	ldr	r2, [r7, #32]
 800a038:	e841 2300 	strex	r3, r2, [r1]
 800a03c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a03e:	69bb      	ldr	r3, [r7, #24]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d1e5      	bne.n	800a010 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a044:	2300      	movs	r3, #0
}
 800a046:	4618      	mov	r0, r3
 800a048:	3758      	adds	r7, #88	@ 0x58
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	bf00      	nop
 800a050:	0800a1ad 	.word	0x0800a1ad
 800a054:	0800a2d5 	.word	0x0800a2d5
 800a058:	0800a313 	.word	0x0800a313

0800a05c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b08f      	sub	sp, #60	@ 0x3c
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a06a:	6a3b      	ldr	r3, [r7, #32]
 800a06c:	e853 3f00 	ldrex	r3, [r3]
 800a070:	61fb      	str	r3, [r7, #28]
   return(result);
 800a072:	69fb      	ldr	r3, [r7, #28]
 800a074:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a078:	637b      	str	r3, [r7, #52]	@ 0x34
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	461a      	mov	r2, r3
 800a080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a082:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a084:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a086:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a088:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a08a:	e841 2300 	strex	r3, r2, [r1]
 800a08e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a092:	2b00      	cmp	r3, #0
 800a094:	d1e6      	bne.n	800a064 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	3308      	adds	r3, #8
 800a09c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	e853 3f00 	ldrex	r3, [r3]
 800a0a4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a0ac:	633b      	str	r3, [r7, #48]	@ 0x30
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	3308      	adds	r3, #8
 800a0b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0b6:	61ba      	str	r2, [r7, #24]
 800a0b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ba:	6979      	ldr	r1, [r7, #20]
 800a0bc:	69ba      	ldr	r2, [r7, #24]
 800a0be:	e841 2300 	strex	r3, r2, [r1]
 800a0c2:	613b      	str	r3, [r7, #16]
   return(result);
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d1e5      	bne.n	800a096 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2220      	movs	r2, #32
 800a0ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a0d2:	bf00      	nop
 800a0d4:	373c      	adds	r7, #60	@ 0x3c
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0dc:	4770      	bx	lr
	...

0800a0e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b095      	sub	sp, #84	@ 0x54
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0f0:	e853 3f00 	ldrex	r3, [r3]
 800a0f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a0f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a0fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	461a      	mov	r2, r3
 800a104:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a106:	643b      	str	r3, [r7, #64]	@ 0x40
 800a108:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a10a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a10c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a10e:	e841 2300 	strex	r3, r2, [r1]
 800a112:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a116:	2b00      	cmp	r3, #0
 800a118:	d1e6      	bne.n	800a0e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	3308      	adds	r3, #8
 800a120:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a122:	6a3b      	ldr	r3, [r7, #32]
 800a124:	e853 3f00 	ldrex	r3, [r3]
 800a128:	61fb      	str	r3, [r7, #28]
   return(result);
 800a12a:	69fa      	ldr	r2, [r7, #28]
 800a12c:	4b1e      	ldr	r3, [pc, #120]	@ (800a1a8 <UART_EndRxTransfer+0xc8>)
 800a12e:	4013      	ands	r3, r2
 800a130:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	3308      	adds	r3, #8
 800a138:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a13a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a13c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a13e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a140:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a142:	e841 2300 	strex	r3, r2, [r1]
 800a146:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d1e5      	bne.n	800a11a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a152:	2b01      	cmp	r3, #1
 800a154:	d118      	bne.n	800a188 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	e853 3f00 	ldrex	r3, [r3]
 800a162:	60bb      	str	r3, [r7, #8]
   return(result);
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	f023 0310 	bic.w	r3, r3, #16
 800a16a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	461a      	mov	r2, r3
 800a172:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a174:	61bb      	str	r3, [r7, #24]
 800a176:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a178:	6979      	ldr	r1, [r7, #20]
 800a17a:	69ba      	ldr	r2, [r7, #24]
 800a17c:	e841 2300 	strex	r3, r2, [r1]
 800a180:	613b      	str	r3, [r7, #16]
   return(result);
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d1e6      	bne.n	800a156 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2220      	movs	r2, #32
 800a18c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2200      	movs	r2, #0
 800a194:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2200      	movs	r2, #0
 800a19a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a19c:	bf00      	nop
 800a19e:	3754      	adds	r7, #84	@ 0x54
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr
 800a1a8:	effffffe 	.word	0xeffffffe

0800a1ac <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b09c      	sub	sp, #112	@ 0x70
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1b8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	69db      	ldr	r3, [r3, #28]
 800a1be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1c2:	d071      	beq.n	800a2a8 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a1c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a1cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1d4:	e853 3f00 	ldrex	r3, [r3]
 800a1d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a1da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a1dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a1e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a1e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a1ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a1ec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a1f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a1f2:	e841 2300 	strex	r3, r2, [r1]
 800a1f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a1f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d1e6      	bne.n	800a1cc <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	3308      	adds	r3, #8
 800a204:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a208:	e853 3f00 	ldrex	r3, [r3]
 800a20c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a20e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a210:	f023 0301 	bic.w	r3, r3, #1
 800a214:	667b      	str	r3, [r7, #100]	@ 0x64
 800a216:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	3308      	adds	r3, #8
 800a21c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a21e:	647a      	str	r2, [r7, #68]	@ 0x44
 800a220:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a222:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a224:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a226:	e841 2300 	strex	r3, r2, [r1]
 800a22a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a22c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d1e5      	bne.n	800a1fe <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a232:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	3308      	adds	r3, #8
 800a238:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a23a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a23c:	e853 3f00 	ldrex	r3, [r3]
 800a240:	623b      	str	r3, [r7, #32]
   return(result);
 800a242:	6a3b      	ldr	r3, [r7, #32]
 800a244:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a248:	663b      	str	r3, [r7, #96]	@ 0x60
 800a24a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	3308      	adds	r3, #8
 800a250:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a252:	633a      	str	r2, [r7, #48]	@ 0x30
 800a254:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a256:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a258:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a25a:	e841 2300 	strex	r3, r2, [r1]
 800a25e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a262:	2b00      	cmp	r3, #0
 800a264:	d1e5      	bne.n	800a232 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a266:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a268:	2220      	movs	r2, #32
 800a26a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a26e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a270:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a272:	2b01      	cmp	r3, #1
 800a274:	d118      	bne.n	800a2a8 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a276:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	e853 3f00 	ldrex	r3, [r3]
 800a282:	60fb      	str	r3, [r7, #12]
   return(result);
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f023 0310 	bic.w	r3, r3, #16
 800a28a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a28c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	461a      	mov	r2, r3
 800a292:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a294:	61fb      	str	r3, [r7, #28]
 800a296:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a298:	69b9      	ldr	r1, [r7, #24]
 800a29a:	69fa      	ldr	r2, [r7, #28]
 800a29c:	e841 2300 	strex	r3, r2, [r1]
 800a2a0:	617b      	str	r3, [r7, #20]
   return(result);
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d1e6      	bne.n	800a276 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a2a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d107      	bne.n	800a2c6 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a2b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a2bc:	4619      	mov	r1, r3
 800a2be:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a2c0:	f7f6 fb44 	bl	800094c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a2c4:	e002      	b.n	800a2cc <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a2c6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a2c8:	f7fe feec 	bl	80090a4 <HAL_UART_RxCpltCallback>
}
 800a2cc:	bf00      	nop
 800a2ce:	3770      	adds	r7, #112	@ 0x70
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}

0800a2d4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b084      	sub	sp, #16
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2e0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d109      	bne.n	800a304 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a2f6:	085b      	lsrs	r3, r3, #1
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	68f8      	ldr	r0, [r7, #12]
 800a2fe:	f7f6 fb25 	bl	800094c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a302:	e002      	b.n	800a30a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a304:	68f8      	ldr	r0, [r7, #12]
 800a306:	f7fe fed7 	bl	80090b8 <HAL_UART_RxHalfCpltCallback>
}
 800a30a:	bf00      	nop
 800a30c:	3710      	adds	r7, #16
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}

0800a312 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a312:	b580      	push	{r7, lr}
 800a314:	b086      	sub	sp, #24
 800a316:	af00      	add	r7, sp, #0
 800a318:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a31e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a326:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a32e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	689b      	ldr	r3, [r3, #8]
 800a336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a33a:	2b80      	cmp	r3, #128	@ 0x80
 800a33c:	d109      	bne.n	800a352 <UART_DMAError+0x40>
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	2b21      	cmp	r3, #33	@ 0x21
 800a342:	d106      	bne.n	800a352 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	2200      	movs	r2, #0
 800a348:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a34c:	6978      	ldr	r0, [r7, #20]
 800a34e:	f7ff fe85 	bl	800a05c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	689b      	ldr	r3, [r3, #8]
 800a358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a35c:	2b40      	cmp	r3, #64	@ 0x40
 800a35e:	d109      	bne.n	800a374 <UART_DMAError+0x62>
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2b22      	cmp	r3, #34	@ 0x22
 800a364:	d106      	bne.n	800a374 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	2200      	movs	r2, #0
 800a36a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a36e:	6978      	ldr	r0, [r7, #20]
 800a370:	f7ff feb6 	bl	800a0e0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a37a:	f043 0210 	orr.w	r2, r3, #16
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a384:	6978      	ldr	r0, [r7, #20]
 800a386:	f7f6 fb93 	bl	8000ab0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a38a:	bf00      	nop
 800a38c:	3718      	adds	r7, #24
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}

0800a392 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a392:	b580      	push	{r7, lr}
 800a394:	b084      	sub	sp, #16
 800a396:	af00      	add	r7, sp, #0
 800a398:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a39e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a3b0:	68f8      	ldr	r0, [r7, #12]
 800a3b2:	f7f6 fb7d 	bl	8000ab0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a3b6:	bf00      	nop
 800a3b8:	3710      	adds	r7, #16
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}

0800a3be <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a3be:	b580      	push	{r7, lr}
 800a3c0:	b088      	sub	sp, #32
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	e853 3f00 	ldrex	r3, [r3]
 800a3d2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a3da:	61fb      	str	r3, [r7, #28]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	69fb      	ldr	r3, [r7, #28]
 800a3e4:	61bb      	str	r3, [r7, #24]
 800a3e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e8:	6979      	ldr	r1, [r7, #20]
 800a3ea:	69ba      	ldr	r2, [r7, #24]
 800a3ec:	e841 2300 	strex	r3, r2, [r1]
 800a3f0:	613b      	str	r3, [r7, #16]
   return(result);
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d1e6      	bne.n	800a3c6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2220      	movs	r2, #32
 800a3fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2200      	movs	r2, #0
 800a404:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f7fe fe42 	bl	8009090 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a40c:	bf00      	nop
 800a40e:	3720      	adds	r7, #32
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}

0800a414 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a414:	b480      	push	{r7}
 800a416:	b083      	sub	sp, #12
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a41c:	bf00      	nop
 800a41e:	370c      	adds	r7, #12
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr

0800a428 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a428:	b480      	push	{r7}
 800a42a:	b083      	sub	sp, #12
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a430:	bf00      	nop
 800a432:	370c      	adds	r7, #12
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr

0800a43c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b083      	sub	sp, #12
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a444:	bf00      	nop
 800a446:	370c      	adds	r7, #12
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr

0800a450 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a450:	b480      	push	{r7}
 800a452:	b085      	sub	sp, #20
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a45e:	2b01      	cmp	r3, #1
 800a460:	d101      	bne.n	800a466 <HAL_UARTEx_DisableFifoMode+0x16>
 800a462:	2302      	movs	r3, #2
 800a464:	e027      	b.n	800a4b6 <HAL_UARTEx_DisableFifoMode+0x66>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2201      	movs	r2, #1
 800a46a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2224      	movs	r2, #36	@ 0x24
 800a472:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	681a      	ldr	r2, [r3, #0]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f022 0201 	bic.w	r2, r2, #1
 800a48c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a494:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2200      	movs	r2, #0
 800a49a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	68fa      	ldr	r2, [r7, #12]
 800a4a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2220      	movs	r2, #32
 800a4a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a4b4:	2300      	movs	r3, #0
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3714      	adds	r7, #20
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr

0800a4c2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a4c2:	b580      	push	{r7, lr}
 800a4c4:	b084      	sub	sp, #16
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
 800a4ca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a4d2:	2b01      	cmp	r3, #1
 800a4d4:	d101      	bne.n	800a4da <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a4d6:	2302      	movs	r3, #2
 800a4d8:	e02d      	b.n	800a536 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2201      	movs	r2, #1
 800a4de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2224      	movs	r2, #36	@ 0x24
 800a4e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	681a      	ldr	r2, [r3, #0]
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f022 0201 	bic.w	r2, r2, #1
 800a500:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	689b      	ldr	r3, [r3, #8]
 800a508:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	683a      	ldr	r2, [r7, #0]
 800a512:	430a      	orrs	r2, r1
 800a514:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f000 f8a4 	bl	800a664 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	68fa      	ldr	r2, [r7, #12]
 800a522:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2220      	movs	r2, #32
 800a528:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a534:	2300      	movs	r3, #0
}
 800a536:	4618      	mov	r0, r3
 800a538:	3710      	adds	r7, #16
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}

0800a53e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a53e:	b580      	push	{r7, lr}
 800a540:	b084      	sub	sp, #16
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]
 800a546:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a54e:	2b01      	cmp	r3, #1
 800a550:	d101      	bne.n	800a556 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a552:	2302      	movs	r3, #2
 800a554:	e02d      	b.n	800a5b2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2201      	movs	r2, #1
 800a55a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2224      	movs	r2, #36	@ 0x24
 800a562:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	681a      	ldr	r2, [r3, #0]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f022 0201 	bic.w	r2, r2, #1
 800a57c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	689b      	ldr	r3, [r3, #8]
 800a584:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	683a      	ldr	r2, [r7, #0]
 800a58e:	430a      	orrs	r2, r1
 800a590:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f000 f866 	bl	800a664 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	68fa      	ldr	r2, [r7, #12]
 800a59e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2220      	movs	r2, #32
 800a5a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a5b0:	2300      	movs	r3, #0
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3710      	adds	r7, #16
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}

0800a5ba <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a5ba:	b580      	push	{r7, lr}
 800a5bc:	b08c      	sub	sp, #48	@ 0x30
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	60f8      	str	r0, [r7, #12]
 800a5c2:	60b9      	str	r1, [r7, #8]
 800a5c4:	4613      	mov	r3, r2
 800a5c6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a5ce:	2b20      	cmp	r3, #32
 800a5d0:	d142      	bne.n	800a658 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d002      	beq.n	800a5de <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800a5d8:	88fb      	ldrh	r3, [r7, #6]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d101      	bne.n	800a5e2 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	e03b      	b.n	800a65a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a5ee:	88fb      	ldrh	r3, [r7, #6]
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	68b9      	ldr	r1, [r7, #8]
 800a5f4:	68f8      	ldr	r0, [r7, #12]
 800a5f6:	f7ff fc8b 	bl	8009f10 <UART_Start_Receive_DMA>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a600:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a604:	2b00      	cmp	r3, #0
 800a606:	d124      	bne.n	800a652 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a60c:	2b01      	cmp	r3, #1
 800a60e:	d11d      	bne.n	800a64c <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	2210      	movs	r2, #16
 800a616:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a61e:	69bb      	ldr	r3, [r7, #24]
 800a620:	e853 3f00 	ldrex	r3, [r3]
 800a624:	617b      	str	r3, [r7, #20]
   return(result);
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	f043 0310 	orr.w	r3, r3, #16
 800a62c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	461a      	mov	r2, r3
 800a634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a636:	627b      	str	r3, [r7, #36]	@ 0x24
 800a638:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a63a:	6a39      	ldr	r1, [r7, #32]
 800a63c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a63e:	e841 2300 	strex	r3, r2, [r1]
 800a642:	61fb      	str	r3, [r7, #28]
   return(result);
 800a644:	69fb      	ldr	r3, [r7, #28]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d1e6      	bne.n	800a618 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800a64a:	e002      	b.n	800a652 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a64c:	2301      	movs	r3, #1
 800a64e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800a652:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a656:	e000      	b.n	800a65a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a658:	2302      	movs	r3, #2
  }
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3730      	adds	r7, #48	@ 0x30
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}
	...

0800a664 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a664:	b480      	push	{r7}
 800a666:	b085      	sub	sp, #20
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a670:	2b00      	cmp	r3, #0
 800a672:	d108      	bne.n	800a686 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2201      	movs	r2, #1
 800a678:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2201      	movs	r2, #1
 800a680:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a684:	e031      	b.n	800a6ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a686:	2310      	movs	r3, #16
 800a688:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a68a:	2310      	movs	r3, #16
 800a68c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	689b      	ldr	r3, [r3, #8]
 800a694:	0e5b      	lsrs	r3, r3, #25
 800a696:	b2db      	uxtb	r3, r3
 800a698:	f003 0307 	and.w	r3, r3, #7
 800a69c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	689b      	ldr	r3, [r3, #8]
 800a6a4:	0f5b      	lsrs	r3, r3, #29
 800a6a6:	b2db      	uxtb	r3, r3
 800a6a8:	f003 0307 	and.w	r3, r3, #7
 800a6ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6ae:	7bbb      	ldrb	r3, [r7, #14]
 800a6b0:	7b3a      	ldrb	r2, [r7, #12]
 800a6b2:	4911      	ldr	r1, [pc, #68]	@ (800a6f8 <UARTEx_SetNbDataToProcess+0x94>)
 800a6b4:	5c8a      	ldrb	r2, [r1, r2]
 800a6b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a6ba:	7b3a      	ldrb	r2, [r7, #12]
 800a6bc:	490f      	ldr	r1, [pc, #60]	@ (800a6fc <UARTEx_SetNbDataToProcess+0x98>)
 800a6be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6c0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a6c4:	b29a      	uxth	r2, r3
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a6cc:	7bfb      	ldrb	r3, [r7, #15]
 800a6ce:	7b7a      	ldrb	r2, [r7, #13]
 800a6d0:	4909      	ldr	r1, [pc, #36]	@ (800a6f8 <UARTEx_SetNbDataToProcess+0x94>)
 800a6d2:	5c8a      	ldrb	r2, [r1, r2]
 800a6d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a6d8:	7b7a      	ldrb	r2, [r7, #13]
 800a6da:	4908      	ldr	r1, [pc, #32]	@ (800a6fc <UARTEx_SetNbDataToProcess+0x98>)
 800a6dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a6de:	fb93 f3f2 	sdiv	r3, r3, r2
 800a6e2:	b29a      	uxth	r2, r3
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a6ea:	bf00      	nop
 800a6ec:	3714      	adds	r7, #20
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f4:	4770      	bx	lr
 800a6f6:	bf00      	nop
 800a6f8:	0800a8e4 	.word	0x0800a8e4
 800a6fc:	0800a8ec 	.word	0x0800a8ec

0800a700 <balanceparam_init>:

extern IMUData imuData;

char DataSend[100];
void balanceparam_init()
{
 800a700:	b480      	push	{r7}
 800a702:	af00      	add	r7, sp, #0
    balanceparam.gyr_ang_p = 1;
 800a704:	4b1a      	ldr	r3, [pc, #104]	@ (800a770 <balanceparam_init+0x70>)
 800a706:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800a70a:	601a      	str	r2, [r3, #0]
    balanceparam.gyr_ang_i = 1;
 800a70c:	4b18      	ldr	r3, [pc, #96]	@ (800a770 <balanceparam_init+0x70>)
 800a70e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800a712:	605a      	str	r2, [r3, #4]
    balanceparam.gyr_ang_d = 0;
 800a714:	4b16      	ldr	r3, [pc, #88]	@ (800a770 <balanceparam_init+0x70>)
 800a716:	f04f 0200 	mov.w	r2, #0
 800a71a:	609a      	str	r2, [r3, #8]

    balanceparam.wheel_v_p = 1;
 800a71c:	4b14      	ldr	r3, [pc, #80]	@ (800a770 <balanceparam_init+0x70>)
 800a71e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800a722:	619a      	str	r2, [r3, #24]
    balanceparam.wheel_v_i = 0;
 800a724:	4b12      	ldr	r3, [pc, #72]	@ (800a770 <balanceparam_init+0x70>)
 800a726:	f04f 0200 	mov.w	r2, #0
 800a72a:	61da      	str	r2, [r3, #28]
    balanceparam.wheel_v_d = 0;
 800a72c:	4b10      	ldr	r3, [pc, #64]	@ (800a770 <balanceparam_init+0x70>)
 800a72e:	f04f 0200 	mov.w	r2, #0
 800a732:	621a      	str	r2, [r3, #32]

    balanceparam.gyr_ang_v_p = 1;
 800a734:	4b0e      	ldr	r3, [pc, #56]	@ (800a770 <balanceparam_init+0x70>)
 800a736:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800a73a:	60da      	str	r2, [r3, #12]
    balanceparam.gyr_ang_v_i = 0;
 800a73c:	4b0c      	ldr	r3, [pc, #48]	@ (800a770 <balanceparam_init+0x70>)
 800a73e:	f04f 0200 	mov.w	r2, #0
 800a742:	611a      	str	r2, [r3, #16]
    balanceparam.gyr_ang_v_d = 0;
 800a744:	4b0a      	ldr	r3, [pc, #40]	@ (800a770 <balanceparam_init+0x70>)
 800a746:	f04f 0200 	mov.w	r2, #0
 800a74a:	615a      	str	r2, [r3, #20]

    balanceparam.gyr_ang_tar = 0;
 800a74c:	4b08      	ldr	r3, [pc, #32]	@ (800a770 <balanceparam_init+0x70>)
 800a74e:	f04f 0200 	mov.w	r2, #0
 800a752:	62da      	str	r2, [r3, #44]	@ 0x2c
    balanceparam.wheel_v_tar = 0;
 800a754:	4b06      	ldr	r3, [pc, #24]	@ (800a770 <balanceparam_init+0x70>)
 800a756:	f04f 0200 	mov.w	r2, #0
 800a75a:	625a      	str	r2, [r3, #36]	@ 0x24
    balanceparam.gyr_ang_v_tar = 0;
 800a75c:	4b04      	ldr	r3, [pc, #16]	@ (800a770 <balanceparam_init+0x70>)
 800a75e:	f04f 0200 	mov.w	r2, #0
 800a762:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800a764:	bf00      	nop
 800a766:	46bd      	mov	sp, r7
 800a768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76c:	4770      	bx	lr
 800a76e:	bf00      	nop
 800a770:	24000388 	.word	0x24000388

0800a774 <Bal_Ang_Control>:

// 陀螺仪角度环
float Bal_Ang_Control()
{
 800a774:	b480      	push	{r7}
 800a776:	b083      	sub	sp, #12
 800a778:	af00      	add	r7, sp, #0
    float pwm = 0;
 800a77a:	f04f 0300 	mov.w	r3, #0
 800a77e:	607b      	str	r3, [r7, #4]
    float ang_bias = 0;
 800a780:	f04f 0300 	mov.w	r3, #0
 800a784:	603b      	str	r3, [r7, #0]
    static float ang_error = 0; // 定义静态局部变量ang_error，使其在函数内一直存在
    ang_bias = imuData.angle.roll - balanceparam.gyr_ang_tar;
 800a786:	4b2c      	ldr	r3, [pc, #176]	@ (800a838 <Bal_Ang_Control+0xc4>)
 800a788:	ed93 7a08 	vldr	s14, [r3, #32]
 800a78c:	4b2b      	ldr	r3, [pc, #172]	@ (800a83c <Bal_Ang_Control+0xc8>)
 800a78e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800a792:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a796:	edc7 7a00 	vstr	s15, [r7]
    ang_error += ang_bias;
 800a79a:	4b29      	ldr	r3, [pc, #164]	@ (800a840 <Bal_Ang_Control+0xcc>)
 800a79c:	ed93 7a00 	vldr	s14, [r3]
 800a7a0:	edd7 7a00 	vldr	s15, [r7]
 800a7a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a7a8:	4b25      	ldr	r3, [pc, #148]	@ (800a840 <Bal_Ang_Control+0xcc>)
 800a7aa:	edc3 7a00 	vstr	s15, [r3]
    if (ang_error > 30 || ang_error < -30) // 对ang_error的取值进行限幅
 800a7ae:	4b24      	ldr	r3, [pc, #144]	@ (800a840 <Bal_Ang_Control+0xcc>)
 800a7b0:	edd3 7a00 	vldr	s15, [r3]
 800a7b4:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800a7b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a7bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7c0:	dc09      	bgt.n	800a7d6 <Bal_Ang_Control+0x62>
 800a7c2:	4b1f      	ldr	r3, [pc, #124]	@ (800a840 <Bal_Ang_Control+0xcc>)
 800a7c4:	edd3 7a00 	vldr	s15, [r3]
 800a7c8:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 800a7cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a7d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7d4:	d503      	bpl.n	800a7de <Bal_Ang_Control+0x6a>
    {
        ang_error = 0;
 800a7d6:	4b1a      	ldr	r3, [pc, #104]	@ (800a840 <Bal_Ang_Control+0xcc>)
 800a7d8:	f04f 0200 	mov.w	r2, #0
 800a7dc:	601a      	str	r2, [r3, #0]
    }
    pwm = balanceparam.gyr_ang_p * (imuData.angle.roll - balanceparam.gyr_ang_tar) + balanceparam.gyr_ang_i * ang_error + balanceparam.gyr_ang_d * imuData.gyro.gyroX; // 我们认为陀螺仪角度微分可以用角速度来近似
 800a7de:	4b17      	ldr	r3, [pc, #92]	@ (800a83c <Bal_Ang_Control+0xc8>)
 800a7e0:	ed93 7a00 	vldr	s14, [r3]
 800a7e4:	4b14      	ldr	r3, [pc, #80]	@ (800a838 <Bal_Ang_Control+0xc4>)
 800a7e6:	edd3 6a08 	vldr	s13, [r3, #32]
 800a7ea:	4b14      	ldr	r3, [pc, #80]	@ (800a83c <Bal_Ang_Control+0xc8>)
 800a7ec:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800a7f0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a7f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a7f8:	4b10      	ldr	r3, [pc, #64]	@ (800a83c <Bal_Ang_Control+0xc8>)
 800a7fa:	edd3 6a01 	vldr	s13, [r3, #4]
 800a7fe:	4b10      	ldr	r3, [pc, #64]	@ (800a840 <Bal_Ang_Control+0xcc>)
 800a800:	edd3 7a00 	vldr	s15, [r3]
 800a804:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a808:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a80c:	4b0b      	ldr	r3, [pc, #44]	@ (800a83c <Bal_Ang_Control+0xc8>)
 800a80e:	edd3 6a02 	vldr	s13, [r3, #8]
 800a812:	4b09      	ldr	r3, [pc, #36]	@ (800a838 <Bal_Ang_Control+0xc4>)
 800a814:	edd3 7a04 	vldr	s15, [r3, #16]
 800a818:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a81c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a820:	edc7 7a01 	vstr	s15, [r7, #4]
    return pwm;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	ee07 3a90 	vmov	s15, r3
}
 800a82a:	eeb0 0a67 	vmov.f32	s0, s15
 800a82e:	370c      	adds	r7, #12
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr
 800a838:	24000030 	.word	0x24000030
 800a83c:	24000388 	.word	0x24000388
 800a840:	240003b8 	.word	0x240003b8

0800a844 <memset>:
 800a844:	4402      	add	r2, r0
 800a846:	4603      	mov	r3, r0
 800a848:	4293      	cmp	r3, r2
 800a84a:	d100      	bne.n	800a84e <memset+0xa>
 800a84c:	4770      	bx	lr
 800a84e:	f803 1b01 	strb.w	r1, [r3], #1
 800a852:	e7f9      	b.n	800a848 <memset+0x4>

0800a854 <__libc_init_array>:
 800a854:	b570      	push	{r4, r5, r6, lr}
 800a856:	4d0d      	ldr	r5, [pc, #52]	@ (800a88c <__libc_init_array+0x38>)
 800a858:	4c0d      	ldr	r4, [pc, #52]	@ (800a890 <__libc_init_array+0x3c>)
 800a85a:	1b64      	subs	r4, r4, r5
 800a85c:	10a4      	asrs	r4, r4, #2
 800a85e:	2600      	movs	r6, #0
 800a860:	42a6      	cmp	r6, r4
 800a862:	d109      	bne.n	800a878 <__libc_init_array+0x24>
 800a864:	4d0b      	ldr	r5, [pc, #44]	@ (800a894 <__libc_init_array+0x40>)
 800a866:	4c0c      	ldr	r4, [pc, #48]	@ (800a898 <__libc_init_array+0x44>)
 800a868:	f000 f818 	bl	800a89c <_init>
 800a86c:	1b64      	subs	r4, r4, r5
 800a86e:	10a4      	asrs	r4, r4, #2
 800a870:	2600      	movs	r6, #0
 800a872:	42a6      	cmp	r6, r4
 800a874:	d105      	bne.n	800a882 <__libc_init_array+0x2e>
 800a876:	bd70      	pop	{r4, r5, r6, pc}
 800a878:	f855 3b04 	ldr.w	r3, [r5], #4
 800a87c:	4798      	blx	r3
 800a87e:	3601      	adds	r6, #1
 800a880:	e7ee      	b.n	800a860 <__libc_init_array+0xc>
 800a882:	f855 3b04 	ldr.w	r3, [r5], #4
 800a886:	4798      	blx	r3
 800a888:	3601      	adds	r6, #1
 800a88a:	e7f2      	b.n	800a872 <__libc_init_array+0x1e>
 800a88c:	0800a8fc 	.word	0x0800a8fc
 800a890:	0800a8fc 	.word	0x0800a8fc
 800a894:	0800a8fc 	.word	0x0800a8fc
 800a898:	0800a900 	.word	0x0800a900

0800a89c <_init>:
 800a89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a89e:	bf00      	nop
 800a8a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8a2:	bc08      	pop	{r3}
 800a8a4:	469e      	mov	lr, r3
 800a8a6:	4770      	bx	lr

0800a8a8 <_fini>:
 800a8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8aa:	bf00      	nop
 800a8ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8ae:	bc08      	pop	{r3}
 800a8b0:	469e      	mov	lr, r3
 800a8b2:	4770      	bx	lr
